Preprocessed file pp.c written
File parsed into AST
--------------------------------------------------------------------------------
FileAST: 
  Typedef: name='ptrdiff_t', quals=[], storage=['typedef']
    TypeDecl: declname='ptrdiff_t', quals=[]
      IdentifierType: names=['int']
  Typedef: name='size_t', quals=[], storage=['typedef']
    TypeDecl: declname='size_t', quals=[]
      IdentifierType: names=['int', 'unsigned']
  Typedef: name='wchar_t', quals=[], storage=['typedef']
    TypeDecl: declname='wchar_t', quals=[]
      IdentifierType: names=['int']
  Decl: name=None, quals=[], storage=[]
    Struct: name='__nesc_attr_nonnull', packed=False
  Decl: name=None, quals=[], storage=[]
    Struct: name='__nesc_attr_bnd', packed=False
      Decl: name='lo', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='lo', quals=[]
            IdentifierType: names=['void']
      Decl: name='hi', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='hi', quals=[]
            IdentifierType: names=['void']
  Decl: name=None, quals=[], storage=[]
    Struct: name='__nesc_attr_bnd_nok', packed=False
      Decl: name='lo', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='lo', quals=[]
            IdentifierType: names=['void']
      Decl: name='hi', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='hi', quals=[]
            IdentifierType: names=['void']
  Decl: name=None, quals=[], storage=[]
    Struct: name='__nesc_attr_count', packed=False
      Decl: name='n', quals=[], storage=[]
        TypeDecl: declname='n', quals=[]
          IdentifierType: names=['int']
  Decl: name=None, quals=[], storage=[]
    Struct: name='__nesc_attr_count_nok', packed=False
      Decl: name='n', quals=[], storage=[]
        TypeDecl: declname='n', quals=[]
          IdentifierType: names=['int']
  Decl: name=None, quals=[], storage=[]
    Struct: name='__nesc_attr_one', packed=False
  Decl: name=None, quals=[], storage=[]
    Struct: name='__nesc_attr_one_nok', packed=False
  Decl: name=None, quals=[], storage=[]
    Struct: name='__nesc_attr_dmemset', packed=False
      Decl: name='a1', quals=[], storage=[]
        TypeDecl: declname='a1', quals=[]
          IdentifierType: names=['int']
      Decl: name='a2', quals=[], storage=[]
        TypeDecl: declname='a2', quals=[]
          IdentifierType: names=['int']
      Decl: name='a3', quals=[], storage=[]
        TypeDecl: declname='a3', quals=[]
          IdentifierType: names=['int']
  Decl: name=None, quals=[], storage=[]
    Struct: name='__nesc_attr_dmemcpy', packed=False
      Decl: name='a1', quals=[], storage=[]
        TypeDecl: declname='a1', quals=[]
          IdentifierType: names=['int']
      Decl: name='a2', quals=[], storage=[]
        TypeDecl: declname='a2', quals=[]
          IdentifierType: names=['int']
      Decl: name='a3', quals=[], storage=[]
        TypeDecl: declname='a3', quals=[]
          IdentifierType: names=['int']
  Decl: name=None, quals=[], storage=[]
    Struct: name='__nesc_attr_nts', packed=False
  Typedef: name='int8_t', quals=[], storage=['typedef']
    TypeDecl: declname='int8_t', quals=[]
      IdentifierType: names=['char', 'signed']
  Typedef: name='uint8_t', quals=[], storage=['typedef']
    TypeDecl: declname='uint8_t', quals=[]
      IdentifierType: names=['char', 'unsigned']
  Typedef: name='int16_t', quals=[], storage=['typedef']
    TypeDecl: declname='int16_t', quals=[]
      IdentifierType: names=['int']
  Typedef: name='uint16_t', quals=[], storage=['typedef']
    TypeDecl: declname='uint16_t', quals=[]
      IdentifierType: names=['int', 'unsigned']
  Typedef: name='int32_t', quals=[], storage=['typedef']
    TypeDecl: declname='int32_t', quals=[]
      IdentifierType: names=['long']
  Typedef: name='uint32_t', quals=[], storage=['typedef']
    TypeDecl: declname='uint32_t', quals=[]
      IdentifierType: names=['long', 'unsigned']
  Typedef: name='int64_t', quals=[], storage=['typedef']
    TypeDecl: declname='int64_t', quals=[]
      IdentifierType: names=['long', 'long']
  Typedef: name='uint64_t', quals=[], storage=['typedef']
    TypeDecl: declname='uint64_t', quals=[]
      IdentifierType: names=['long', 'long', 'unsigned']
  Typedef: name='intptr_t', quals=[], storage=['typedef']
    TypeDecl: declname='intptr_t', quals=[]
      IdentifierType: names=['int16_t']
  Typedef: name='uintptr_t', quals=[], storage=['typedef']
    TypeDecl: declname='uintptr_t', quals=[]
      IdentifierType: names=['uint16_t']
  Typedef: name='nx_int8_t', quals=[], storage=['typedef']
    TypeDecl: declname='nx_int8_t', quals=[]
      Struct: name=None, packed=True
        Decl: name='data', quals=[], storage=[]
          ArrayDecl: 
            TypeDecl: declname='data', quals=[]
              IdentifierType: names=['char', 'unsigned']
            Constant: type='int', value='1'
  Typedef: name='__nesc_nxbase_nx_int8_t', quals=[], storage=['typedef']
    TypeDecl: declname='__nesc_nxbase_nx_int8_t', quals=[]
      IdentifierType: names=['int8_t']
  Typedef: name='nx_int16_t', quals=[], storage=['typedef']
    TypeDecl: declname='nx_int16_t', quals=[]
      Struct: name=None, packed=True
        Decl: name='data', quals=[], storage=[]
          ArrayDecl: 
            TypeDecl: declname='data', quals=[]
              IdentifierType: names=['char', 'unsigned']
            Constant: type='int', value='2'
  Typedef: name='__nesc_nxbase_nx_int16_t', quals=[], storage=['typedef']
    TypeDecl: declname='__nesc_nxbase_nx_int16_t', quals=[]
      IdentifierType: names=['int16_t']
  Typedef: name='nx_int32_t', quals=[], storage=['typedef']
    TypeDecl: declname='nx_int32_t', quals=[]
      Struct: name=None, packed=True
        Decl: name='data', quals=[], storage=[]
          ArrayDecl: 
            TypeDecl: declname='data', quals=[]
              IdentifierType: names=['char', 'unsigned']
            Constant: type='int', value='4'
  Typedef: name='__nesc_nxbase_nx_int32_t', quals=[], storage=['typedef']
    TypeDecl: declname='__nesc_nxbase_nx_int32_t', quals=[]
      IdentifierType: names=['int32_t']
  Typedef: name='nx_int64_t', quals=[], storage=['typedef']
    TypeDecl: declname='nx_int64_t', quals=[]
      Struct: name=None, packed=True
        Decl: name='data', quals=[], storage=[]
          ArrayDecl: 
            TypeDecl: declname='data', quals=[]
              IdentifierType: names=['char', 'unsigned']
            Constant: type='int', value='8'
  Typedef: name='__nesc_nxbase_nx_int64_t', quals=[], storage=['typedef']
    TypeDecl: declname='__nesc_nxbase_nx_int64_t', quals=[]
      IdentifierType: names=['int64_t']
  Typedef: name='nx_uint8_t', quals=[], storage=['typedef']
    TypeDecl: declname='nx_uint8_t', quals=[]
      Struct: name=None, packed=True
        Decl: name='data', quals=[], storage=[]
          ArrayDecl: 
            TypeDecl: declname='data', quals=[]
              IdentifierType: names=['char', 'unsigned']
            Constant: type='int', value='1'
  Typedef: name='__nesc_nxbase_nx_uint8_t', quals=[], storage=['typedef']
    TypeDecl: declname='__nesc_nxbase_nx_uint8_t', quals=[]
      IdentifierType: names=['uint8_t']
  Typedef: name='nx_uint16_t', quals=[], storage=['typedef']
    TypeDecl: declname='nx_uint16_t', quals=[]
      Struct: name=None, packed=True
        Decl: name='data', quals=[], storage=[]
          ArrayDecl: 
            TypeDecl: declname='data', quals=[]
              IdentifierType: names=['char', 'unsigned']
            Constant: type='int', value='2'
  Typedef: name='__nesc_nxbase_nx_uint16_t', quals=[], storage=['typedef']
    TypeDecl: declname='__nesc_nxbase_nx_uint16_t', quals=[]
      IdentifierType: names=['uint16_t']
  Typedef: name='nx_uint32_t', quals=[], storage=['typedef']
    TypeDecl: declname='nx_uint32_t', quals=[]
      Struct: name=None, packed=True
        Decl: name='data', quals=[], storage=[]
          ArrayDecl: 
            TypeDecl: declname='data', quals=[]
              IdentifierType: names=['char', 'unsigned']
            Constant: type='int', value='4'
  Typedef: name='__nesc_nxbase_nx_uint32_t', quals=[], storage=['typedef']
    TypeDecl: declname='__nesc_nxbase_nx_uint32_t', quals=[]
      IdentifierType: names=['uint32_t']
  Typedef: name='nx_uint64_t', quals=[], storage=['typedef']
    TypeDecl: declname='nx_uint64_t', quals=[]
      Struct: name=None, packed=True
        Decl: name='data', quals=[], storage=[]
          ArrayDecl: 
            TypeDecl: declname='data', quals=[]
              IdentifierType: names=['char', 'unsigned']
            Constant: type='int', value='8'
  Typedef: name='__nesc_nxbase_nx_uint64_t', quals=[], storage=['typedef']
    TypeDecl: declname='__nesc_nxbase_nx_uint64_t', quals=[]
      IdentifierType: names=['uint64_t']
  Typedef: name='nxle_int8_t', quals=[], storage=['typedef']
    TypeDecl: declname='nxle_int8_t', quals=[]
      Struct: name=None, packed=True
        Decl: name='data', quals=[], storage=[]
          ArrayDecl: 
            TypeDecl: declname='data', quals=[]
              IdentifierType: names=['char', 'unsigned']
            Constant: type='int', value='1'
  Typedef: name='__nesc_nxbase_nxle_int8_t', quals=[], storage=['typedef']
    TypeDecl: declname='__nesc_nxbase_nxle_int8_t', quals=[]
      IdentifierType: names=['int8_t']
  Typedef: name='nxle_int16_t', quals=[], storage=['typedef']
    TypeDecl: declname='nxle_int16_t', quals=[]
      Struct: name=None, packed=True
        Decl: name='data', quals=[], storage=[]
          ArrayDecl: 
            TypeDecl: declname='data', quals=[]
              IdentifierType: names=['char', 'unsigned']
            Constant: type='int', value='2'
  Typedef: name='__nesc_nxbase_nxle_int16_t', quals=[], storage=['typedef']
    TypeDecl: declname='__nesc_nxbase_nxle_int16_t', quals=[]
      IdentifierType: names=['int16_t']
  Typedef: name='nxle_int32_t', quals=[], storage=['typedef']
    TypeDecl: declname='nxle_int32_t', quals=[]
      Struct: name=None, packed=True
        Decl: name='data', quals=[], storage=[]
          ArrayDecl: 
            TypeDecl: declname='data', quals=[]
              IdentifierType: names=['char', 'unsigned']
            Constant: type='int', value='4'
  Typedef: name='__nesc_nxbase_nxle_int32_t', quals=[], storage=['typedef']
    TypeDecl: declname='__nesc_nxbase_nxle_int32_t', quals=[]
      IdentifierType: names=['int32_t']
  Typedef: name='nxle_int64_t', quals=[], storage=['typedef']
    TypeDecl: declname='nxle_int64_t', quals=[]
      Struct: name=None, packed=True
        Decl: name='data', quals=[], storage=[]
          ArrayDecl: 
            TypeDecl: declname='data', quals=[]
              IdentifierType: names=['char', 'unsigned']
            Constant: type='int', value='8'
  Typedef: name='__nesc_nxbase_nxle_int64_t', quals=[], storage=['typedef']
    TypeDecl: declname='__nesc_nxbase_nxle_int64_t', quals=[]
      IdentifierType: names=['int64_t']
  Typedef: name='nxle_uint8_t', quals=[], storage=['typedef']
    TypeDecl: declname='nxle_uint8_t', quals=[]
      Struct: name=None, packed=True
        Decl: name='data', quals=[], storage=[]
          ArrayDecl: 
            TypeDecl: declname='data', quals=[]
              IdentifierType: names=['char', 'unsigned']
            Constant: type='int', value='1'
  Typedef: name='__nesc_nxbase_nxle_uint8_t', quals=[], storage=['typedef']
    TypeDecl: declname='__nesc_nxbase_nxle_uint8_t', quals=[]
      IdentifierType: names=['uint8_t']
  Typedef: name='nxle_uint16_t', quals=[], storage=['typedef']
    TypeDecl: declname='nxle_uint16_t', quals=[]
      Struct: name=None, packed=True
        Decl: name='data', quals=[], storage=[]
          ArrayDecl: 
            TypeDecl: declname='data', quals=[]
              IdentifierType: names=['char', 'unsigned']
            Constant: type='int', value='2'
  Typedef: name='__nesc_nxbase_nxle_uint16_t', quals=[], storage=['typedef']
    TypeDecl: declname='__nesc_nxbase_nxle_uint16_t', quals=[]
      IdentifierType: names=['uint16_t']
  Typedef: name='nxle_uint32_t', quals=[], storage=['typedef']
    TypeDecl: declname='nxle_uint32_t', quals=[]
      Struct: name=None, packed=True
        Decl: name='data', quals=[], storage=[]
          ArrayDecl: 
            TypeDecl: declname='data', quals=[]
              IdentifierType: names=['char', 'unsigned']
            Constant: type='int', value='4'
  Typedef: name='__nesc_nxbase_nxle_uint32_t', quals=[], storage=['typedef']
    TypeDecl: declname='__nesc_nxbase_nxle_uint32_t', quals=[]
      IdentifierType: names=['uint32_t']
  Typedef: name='nxle_uint64_t', quals=[], storage=['typedef']
    TypeDecl: declname='nxle_uint64_t', quals=[]
      Struct: name=None, packed=True
        Decl: name='data', quals=[], storage=[]
          ArrayDecl: 
            TypeDecl: declname='data', quals=[]
              IdentifierType: names=['char', 'unsigned']
            Constant: type='int', value='8'
  Typedef: name='__nesc_nxbase_nxle_uint64_t', quals=[], storage=['typedef']
    TypeDecl: declname='__nesc_nxbase_nxle_uint64_t', quals=[]
      IdentifierType: names=['uint64_t']
  Typedef: name='u_char', quals=[], storage=['typedef']
    TypeDecl: declname='u_char', quals=[]
      IdentifierType: names=['char', 'unsigned']
  Typedef: name='u_short', quals=[], storage=['typedef']
    TypeDecl: declname='u_short', quals=[]
      IdentifierType: names=['short', 'unsigned']
  Typedef: name='u_int', quals=[], storage=['typedef']
    TypeDecl: declname='u_int', quals=[]
      IdentifierType: names=['int', 'unsigned']
  Typedef: name='u_long', quals=[], storage=['typedef']
    TypeDecl: declname='u_long', quals=[]
      IdentifierType: names=['long', 'unsigned']
  Typedef: name='ushort', quals=[], storage=['typedef']
    TypeDecl: declname='ushort', quals=[]
      IdentifierType: names=['short', 'unsigned']
  Typedef: name='uint', quals=[], storage=['typedef']
    TypeDecl: declname='uint', quals=[]
      IdentifierType: names=['int', 'unsigned']
  Typedef: name='u_int8_t', quals=[], storage=['typedef']
    TypeDecl: declname='u_int8_t', quals=[]
      IdentifierType: names=['uint8_t']
  Typedef: name='u_int16_t', quals=[], storage=['typedef']
    TypeDecl: declname='u_int16_t', quals=[]
      IdentifierType: names=['uint16_t']
  Typedef: name='u_int32_t', quals=[], storage=['typedef']
    TypeDecl: declname='u_int32_t', quals=[]
      IdentifierType: names=['uint32_t']
  Typedef: name='u_int64_t', quals=[], storage=['typedef']
    TypeDecl: declname='u_int64_t', quals=[]
      IdentifierType: names=['uint64_t']
  Typedef: name='u_quad_t', quals=[], storage=['typedef']
    TypeDecl: declname='u_quad_t', quals=[]
      IdentifierType: names=['u_int64_t']
  Typedef: name='quad_t', quals=[], storage=['typedef']
    TypeDecl: declname='quad_t', quals=[]
      IdentifierType: names=['int64_t']
  Typedef: name='qaddr_t', quals=[], storage=['typedef']
    PtrDecl: quals=[]
      TypeDecl: declname='qaddr_t', quals=[]
        IdentifierType: names=['quad_t']
  Typedef: name='caddr_t', quals=[], storage=['typedef']
    PtrDecl: quals=[]
      TypeDecl: declname='caddr_t', quals=[]
        IdentifierType: names=['char']
  Typedef: name='c_caddr_t', quals=['const'], storage=['typedef']
    PtrDecl: quals=[]
      TypeDecl: declname='c_caddr_t', quals=['const']
        IdentifierType: names=['char']
  Typedef: name='v_caddr_t', quals=['volatile'], storage=['typedef']
    PtrDecl: quals=[]
      TypeDecl: declname='v_caddr_t', quals=['volatile']
        IdentifierType: names=['char']
  Typedef: name='fixpt_t', quals=[], storage=['typedef']
    TypeDecl: declname='fixpt_t', quals=[]
      IdentifierType: names=['u_int32_t']
  Typedef: name='gid_t', quals=[], storage=['typedef']
    TypeDecl: declname='gid_t', quals=[]
      IdentifierType: names=['u_int32_t']
  Typedef: name='in_addr_t', quals=[], storage=['typedef']
    TypeDecl: declname='in_addr_t', quals=[]
      IdentifierType: names=['u_int32_t']
  Typedef: name='in_port_t', quals=[], storage=['typedef']
    TypeDecl: declname='in_port_t', quals=[]
      IdentifierType: names=['u_int16_t']
  Typedef: name='ino_t', quals=[], storage=['typedef']
    TypeDecl: declname='ino_t', quals=[]
      IdentifierType: names=['u_int32_t']
  Typedef: name='key_t', quals=[], storage=['typedef']
    TypeDecl: declname='key_t', quals=[]
      IdentifierType: names=['long']
  Typedef: name='mode_t', quals=[], storage=['typedef']
    TypeDecl: declname='mode_t', quals=[]
      IdentifierType: names=['u_int16_t']
  Typedef: name='nlink_t', quals=[], storage=['typedef']
    TypeDecl: declname='nlink_t', quals=[]
      IdentifierType: names=['u_int16_t']
  Typedef: name='rlim_t', quals=[], storage=['typedef']
    TypeDecl: declname='rlim_t', quals=[]
      IdentifierType: names=['quad_t']
  Typedef: name='segsz_t', quals=[], storage=['typedef']
    TypeDecl: declname='segsz_t', quals=[]
      IdentifierType: names=['int32_t']
  Typedef: name='swblk_t', quals=[], storage=['typedef']
    TypeDecl: declname='swblk_t', quals=[]
      IdentifierType: names=['int32_t']
  Typedef: name='ufs_daddr_t', quals=[], storage=['typedef']
    TypeDecl: declname='ufs_daddr_t', quals=[]
      IdentifierType: names=['int32_t']
  Typedef: name='ufs_time_t', quals=[], storage=['typedef']
    TypeDecl: declname='ufs_time_t', quals=[]
      IdentifierType: names=['int32_t']
  Typedef: name='uid_t', quals=[], storage=['typedef']
    TypeDecl: declname='uid_t', quals=[]
      IdentifierType: names=['u_int32_t']
  Decl: name='memset', quals=[], storage=['extern']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='arg_0x702690', quals=[], storage=[]
          PtrDecl: quals=[]
            TypeDecl: declname='arg_0x702690', quals=[]
              IdentifierType: names=['void']
        Decl: name='arg_0x7027e8', quals=[], storage=[]
          TypeDecl: declname='arg_0x7027e8', quals=[]
            IdentifierType: names=['int']
        Decl: name='arg_0x702980', quals=[], storage=[]
          TypeDecl: declname='arg_0x702980', quals=[]
            IdentifierType: names=['size_t']
      PtrDecl: quals=[]
        TypeDecl: declname='memset', quals=[]
          IdentifierType: names=['void']
  Decl: name='memset', quals=[], storage=['extern']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='arg_0x1045650', quals=[], storage=[]
          PtrDecl: quals=[]
            TypeDecl: declname='arg_0x1045650', quals=[]
              IdentifierType: names=['void']
        Decl: name='arg_0x10457a8', quals=[], storage=[]
          TypeDecl: declname='arg_0x10457a8', quals=[]
            IdentifierType: names=['int']
        Decl: name='arg_0x1045940', quals=[], storage=[]
          TypeDecl: declname='arg_0x1045940', quals=[]
            IdentifierType: names=['size_t']
      PtrDecl: quals=[]
        TypeDecl: declname='memset', quals=[]
          IdentifierType: names=['void']
  Typedef: name='div_t', quals=[], storage=['typedef']
    TypeDecl: declname='div_t', quals=[]
      Struct: name='__nesc_unnamed4242', packed=False
        Decl: name='quot', quals=[], storage=[]
          TypeDecl: declname='quot', quals=[]
            IdentifierType: names=['int']
        Decl: name='rem', quals=[], storage=[]
          TypeDecl: declname='rem', quals=[]
            IdentifierType: names=['int']
  Typedef: name='ldiv_t', quals=[], storage=['typedef']
    TypeDecl: declname='ldiv_t', quals=[]
      Struct: name='__nesc_unnamed4243', packed=False
        Decl: name='quot', quals=[], storage=[]
          TypeDecl: declname='quot', quals=[]
            IdentifierType: names=['long']
        Decl: name='rem', quals=[], storage=[]
          TypeDecl: declname='rem', quals=[]
            IdentifierType: names=['long']
  Typedef: name='__int32_t', quals=[], storage=['typedef']
    TypeDecl: declname='__int32_t', quals=[]
      IdentifierType: names=['int', 'long']
  Typedef: name='__uint32_t', quals=[], storage=['typedef']
    TypeDecl: declname='__uint32_t', quals=[]
      IdentifierType: names=['int', 'long', 'unsigned']
  Typedef: name='_off_t', quals=[], storage=['typedef']
    TypeDecl: declname='_off_t', quals=[]
      IdentifierType: names=['long']
  Typedef: name='_ssize_t', quals=[], storage=['typedef']
    TypeDecl: declname='_ssize_t', quals=[]
      IdentifierType: names=['long']
  Typedef: name='__ULong', quals=[], storage=['typedef']
    TypeDecl: declname='__ULong', quals=[]
      IdentifierType: names=['__uint32_t']
  Decl: name=None, quals=[], storage=[]
    Struct: name='_glue', packed=False
      Decl: name='_next', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='_next', quals=[]
            Struct: name='_glue', packed=False
      Decl: name='_niobs', quals=[], storage=[]
        TypeDecl: declname='_niobs', quals=[]
          IdentifierType: names=['int']
      Decl: name='_iobs', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='_iobs', quals=[]
            Struct: name='__sFILE', packed=False
  Decl: name=None, quals=[], storage=[]
    Struct: name='_Bigint', packed=False
      Decl: name='_next', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='_next', quals=[]
            Struct: name='_Bigint', packed=False
      Decl: name='_k', quals=[], storage=[]
        TypeDecl: declname='_k', quals=[]
          IdentifierType: names=['int']
      Decl: name='_maxwds', quals=[], storage=[]
        TypeDecl: declname='_maxwds', quals=[]
          IdentifierType: names=['int']
      Decl: name='_sign', quals=[], storage=[]
        TypeDecl: declname='_sign', quals=[]
          IdentifierType: names=['int']
      Decl: name='_wds', quals=[], storage=[]
        TypeDecl: declname='_wds', quals=[]
          IdentifierType: names=['int']
      Decl: name='_x', quals=[], storage=[]
        ArrayDecl: 
          TypeDecl: declname='_x', quals=[]
            IdentifierType: names=['__ULong']
          Constant: type='int', value='1'
  Decl: name=None, quals=[], storage=[]
    Struct: name='__tm', packed=False
      Decl: name='__tm_sec', quals=[], storage=[]
        TypeDecl: declname='__tm_sec', quals=[]
          IdentifierType: names=['int']
      Decl: name='__tm_min', quals=[], storage=[]
        TypeDecl: declname='__tm_min', quals=[]
          IdentifierType: names=['int']
      Decl: name='__tm_hour', quals=[], storage=[]
        TypeDecl: declname='__tm_hour', quals=[]
          IdentifierType: names=['int']
      Decl: name='__tm_mday', quals=[], storage=[]
        TypeDecl: declname='__tm_mday', quals=[]
          IdentifierType: names=['int']
      Decl: name='__tm_mon', quals=[], storage=[]
        TypeDecl: declname='__tm_mon', quals=[]
          IdentifierType: names=['int']
      Decl: name='__tm_year', quals=[], storage=[]
        TypeDecl: declname='__tm_year', quals=[]
          IdentifierType: names=['int']
      Decl: name='__tm_wday', quals=[], storage=[]
        TypeDecl: declname='__tm_wday', quals=[]
          IdentifierType: names=['int']
      Decl: name='__tm_yday', quals=[], storage=[]
        TypeDecl: declname='__tm_yday', quals=[]
          IdentifierType: names=['int']
      Decl: name='__tm_isdst', quals=[], storage=[]
        TypeDecl: declname='__tm_isdst', quals=[]
          IdentifierType: names=['int']
  Decl: name=None, quals=[], storage=[]
    Struct: name='_atexit', packed=False
      Decl: name='_next', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='_next', quals=[]
            Struct: name='_atexit', packed=False
      Decl: name='_ind', quals=[], storage=[]
        TypeDecl: declname='_ind', quals=[]
          IdentifierType: names=['int']
      Decl: name='_fns', quals=[], storage=[]
        ArrayDecl: 
          PtrDecl: quals=[]
            FuncDecl: quals=None
              ParamList: 
                Typename: quals=[]
                  TypeDecl: declname=None, quals=[]
                    IdentifierType: names=['void']
              TypeDecl: declname='_fns', quals=[]
                IdentifierType: names=['void']
          Constant: type='int', value='32'
  Decl: name=None, quals=[], storage=[]
    Struct: name='__sbuf', packed=False
      Decl: name='_base', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='_base', quals=[]
            IdentifierType: names=['char', 'unsigned']
      Decl: name='_size', quals=[], storage=[]
        TypeDecl: declname='_size', quals=[]
          IdentifierType: names=['int']
  Typedef: name='_fpos_t', quals=[], storage=['typedef']
    TypeDecl: declname='_fpos_t', quals=[]
      IdentifierType: names=['long']
  Decl: name=None, quals=[], storage=[]
    Struct: name='__sFILE', packed=False
      Decl: name='_p', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='_p', quals=[]
            IdentifierType: names=['char', 'unsigned']
      Decl: name='_r', quals=[], storage=[]
        TypeDecl: declname='_r', quals=[]
          IdentifierType: names=['int']
      Decl: name='_w', quals=[], storage=[]
        TypeDecl: declname='_w', quals=[]
          IdentifierType: names=['int']
      Decl: name='_flags', quals=[], storage=[]
        TypeDecl: declname='_flags', quals=[]
          IdentifierType: names=['short']
      Decl: name='_file', quals=[], storage=[]
        TypeDecl: declname='_file', quals=[]
          IdentifierType: names=['short']
      Decl: name='_bf', quals=[], storage=[]
        TypeDecl: declname='_bf', quals=[]
          Struct: name='__sbuf', packed=False
      Decl: name='_lbfsize', quals=[], storage=[]
        TypeDecl: declname='_lbfsize', quals=[]
          IdentifierType: names=['int']
      Decl: name='_cookie', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='_cookie', quals=[]
            IdentifierType: names=['void']
      Decl: name='_read', quals=[], storage=[]
        PtrDecl: quals=[]
          FuncDecl: quals=None
            ParamList: 
              Decl: name='_cookie', quals=[], storage=[]
                PtrDecl: quals=[]
                  TypeDecl: declname='_cookie', quals=[]
                    IdentifierType: names=['void']
              Decl: name='_buf', quals=[], storage=[]
                PtrDecl: quals=[]
                  TypeDecl: declname='_buf', quals=[]
                    IdentifierType: names=['char']
              Decl: name='_n', quals=[], storage=[]
                TypeDecl: declname='_n', quals=[]
                  IdentifierType: names=['int']
            TypeDecl: declname='_read', quals=[]
              IdentifierType: names=['int']
      Decl: name='_write', quals=[], storage=[]
        PtrDecl: quals=[]
          FuncDecl: quals=None
            ParamList: 
              Decl: name='_cookie', quals=[], storage=[]
                PtrDecl: quals=[]
                  TypeDecl: declname='_cookie', quals=[]
                    IdentifierType: names=['void']
              Decl: name='_buf', quals=['const'], storage=[]
                PtrDecl: quals=[]
                  TypeDecl: declname='_buf', quals=['const']
                    IdentifierType: names=['char']
              Decl: name='_n', quals=[], storage=[]
                TypeDecl: declname='_n', quals=[]
                  IdentifierType: names=['int']
            TypeDecl: declname='_write', quals=[]
              IdentifierType: names=['int']
      Decl: name='_seek', quals=[], storage=[]
        PtrDecl: quals=[]
          FuncDecl: quals=None
            ParamList: 
              Decl: name='_cookie', quals=[], storage=[]
                PtrDecl: quals=[]
                  TypeDecl: declname='_cookie', quals=[]
                    IdentifierType: names=['void']
              Decl: name='_offset', quals=[], storage=[]
                TypeDecl: declname='_offset', quals=[]
                  IdentifierType: names=['_fpos_t']
              Decl: name='_whence', quals=[], storage=[]
                TypeDecl: declname='_whence', quals=[]
                  IdentifierType: names=['int']
            TypeDecl: declname='_seek', quals=[]
              IdentifierType: names=['_fpos_t']
      Decl: name='_close', quals=[], storage=[]
        PtrDecl: quals=[]
          FuncDecl: quals=None
            ParamList: 
              Decl: name='_cookie', quals=[], storage=[]
                PtrDecl: quals=[]
                  TypeDecl: declname='_cookie', quals=[]
                    IdentifierType: names=['void']
            TypeDecl: declname='_close', quals=[]
              IdentifierType: names=['int']
      Decl: name='_ub', quals=[], storage=[]
        TypeDecl: declname='_ub', quals=[]
          Struct: name='__sbuf', packed=False
      Decl: name='_up', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='_up', quals=[]
            IdentifierType: names=['char', 'unsigned']
      Decl: name='_ur', quals=[], storage=[]
        TypeDecl: declname='_ur', quals=[]
          IdentifierType: names=['int']
      Decl: name='_ubuf', quals=[], storage=[]
        ArrayDecl: 
          TypeDecl: declname='_ubuf', quals=[]
            IdentifierType: names=['char', 'unsigned']
          Constant: type='int', value='3'
      Decl: name='_nbuf', quals=[], storage=[]
        ArrayDecl: 
          TypeDecl: declname='_nbuf', quals=[]
            IdentifierType: names=['char', 'unsigned']
          Constant: type='int', value='1'
      Decl: name='_lb', quals=[], storage=[]
        TypeDecl: declname='_lb', quals=[]
          Struct: name='__sbuf', packed=False
      Decl: name='_blksize', quals=[], storage=[]
        TypeDecl: declname='_blksize', quals=[]
          IdentifierType: names=['int']
      Decl: name='_offset', quals=[], storage=[]
        TypeDecl: declname='_offset', quals=[]
          IdentifierType: names=['int']
      Decl: name='_data', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='_data', quals=[]
            Struct: name='_reent', packed=False
  Decl: name=None, quals=[], storage=[]
    Struct: name='_rand48', packed=False
      Decl: name='_seed', quals=[], storage=[]
        ArrayDecl: 
          TypeDecl: declname='_seed', quals=[]
            IdentifierType: names=['short', 'unsigned']
          Constant: type='int', value='3'
      Decl: name='_mult', quals=[], storage=[]
        ArrayDecl: 
          TypeDecl: declname='_mult', quals=[]
            IdentifierType: names=['short', 'unsigned']
          Constant: type='int', value='3'
      Decl: name='_add', quals=[], storage=[]
        TypeDecl: declname='_add', quals=[]
          IdentifierType: names=['short', 'unsigned']
  Decl: name=None, quals=[], storage=[]
    Struct: name='_reent', packed=False
      Decl: name='_errno', quals=[], storage=[]
        TypeDecl: declname='_errno', quals=[]
          IdentifierType: names=['int']
      Decl: name='_stdin', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='_stdin', quals=[]
            Struct: name='__sFILE', packed=False
      Decl: name='_stdout', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='_stdout', quals=[]
            Struct: name='__sFILE', packed=False
      Decl: name='_stderr', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='_stderr', quals=[]
            Struct: name='__sFILE', packed=False
      Decl: name='_inc', quals=[], storage=[]
        TypeDecl: declname='_inc', quals=[]
          IdentifierType: names=['int']
      Decl: name='_emergency', quals=[], storage=[]
        ArrayDecl: 
          TypeDecl: declname='_emergency', quals=[]
            IdentifierType: names=['char']
          Constant: type='int', value='25'
      Decl: name='_current_category', quals=[], storage=[]
        TypeDecl: declname='_current_category', quals=[]
          IdentifierType: names=['int']
      Decl: name='_current_locale', quals=['const'], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='_current_locale', quals=['const']
            IdentifierType: names=['char']
      Decl: name='__sdidinit', quals=[], storage=[]
        TypeDecl: declname='__sdidinit', quals=[]
          IdentifierType: names=['int']
      Decl: name='__cleanup', quals=[], storage=[]
        PtrDecl: quals=[]
          FuncDecl: quals=None
            ParamList: 
              Decl: name='arg_0x1073ab8', quals=[], storage=[]
                PtrDecl: quals=[]
                  TypeDecl: declname='arg_0x1073ab8', quals=[]
                    Struct: name='_reent', packed=False
            TypeDecl: declname='__cleanup', quals=[]
              IdentifierType: names=['void']
      Decl: name='_result', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='_result', quals=[]
            Struct: name='_Bigint', packed=False
      Decl: name='_result_k', quals=[], storage=[]
        TypeDecl: declname='_result_k', quals=[]
          IdentifierType: names=['int']
      Decl: name='_p5s', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='_p5s', quals=[]
            Struct: name='_Bigint', packed=False
      Decl: name='_freelist', quals=[], storage=[]
        PtrDecl: quals=[]
          PtrDecl: quals=[]
            TypeDecl: declname='_freelist', quals=[]
              Struct: name='_Bigint', packed=False
      Decl: name='_cvtlen', quals=[], storage=[]
        TypeDecl: declname='_cvtlen', quals=[]
          IdentifierType: names=['int']
      Decl: name='_cvtbuf', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='_cvtbuf', quals=[]
            IdentifierType: names=['char']
      Decl: name='_new', quals=[], storage=[]
        TypeDecl: declname='_new', quals=[]
          Union: name='__nesc_unnamed4244', packed=False
            Decl: name='_reent', quals=[], storage=[]
              TypeDecl: declname='_reent', quals=[]
                Struct: name='__nesc_unnamed4245', packed=False
                  Decl: name='_unused_rand', quals=[], storage=[]
                    TypeDecl: declname='_unused_rand', quals=[]
                      IdentifierType: names=['int', 'unsigned']
                  Decl: name='_strtok_last', quals=[], storage=[]
                    PtrDecl: quals=[]
                      TypeDecl: declname='_strtok_last', quals=[]
                        IdentifierType: names=['char']
                  Decl: name='_asctime_buf', quals=[], storage=[]
                    ArrayDecl: 
                      TypeDecl: declname='_asctime_buf', quals=[]
                        IdentifierType: names=['char']
                      Constant: type='int', value='26'
                  Decl: name='_localtime_buf', quals=[], storage=[]
                    TypeDecl: declname='_localtime_buf', quals=[]
                      Struct: name='__tm', packed=False
                  Decl: name='_gamma_signgam', quals=[], storage=[]
                    TypeDecl: declname='_gamma_signgam', quals=[]
                      IdentifierType: names=['int']
                  Decl: name='_rand_next', quals=['__extension__'], storage=[]
                    TypeDecl: declname='_rand_next', quals=['__extension__']
                      IdentifierType: names=['long', 'long', 'unsigned']
                  Decl: name='_r48', quals=[], storage=[]
                    TypeDecl: declname='_r48', quals=[]
                      Struct: name='_rand48', packed=False
            Decl: name='_unused', quals=[], storage=[]
              TypeDecl: declname='_unused', quals=[]
                Struct: name='__nesc_unnamed4246', packed=False
                  Decl: name='_nextf', quals=[], storage=[]
                    ArrayDecl: 
                      PtrDecl: quals=[]
                        TypeDecl: declname='_nextf', quals=[]
                          IdentifierType: names=['char', 'unsigned']
                      Constant: type='int', value='30'
                  Decl: name='_nmalloc', quals=[], storage=[]
                    ArrayDecl: 
                      TypeDecl: declname='_nmalloc', quals=[]
                        IdentifierType: names=['int', 'unsigned']
                      Constant: type='int', value='30'
      Decl: name='_atexit', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='_atexit', quals=[]
            Struct: name='_atexit', packed=False
      Decl: name='_atexit0', quals=[], storage=[]
        TypeDecl: declname='_atexit0', quals=[]
          Struct: name='_atexit', packed=False
      Decl: name='_sig_func', quals=[], storage=[]
        PtrDecl: quals=[]
          PtrDecl: quals=[]
            FuncDecl: quals=None
              ParamList: 
                Decl: name='arg_0x1077c98', quals=[], storage=[]
                  TypeDecl: declname='arg_0x1077c98', quals=[]
                    IdentifierType: names=['int']
              TypeDecl: declname='_sig_func', quals=[]
                IdentifierType: names=['void']
      Decl: name='__sglue', quals=[], storage=[]
        TypeDecl: declname='__sglue', quals=[]
          Struct: name='_glue', packed=False
      Decl: name='__sf', quals=[], storage=[]
        ArrayDecl: 
          TypeDecl: declname='__sf', quals=[]
            Struct: name='__sFILE', packed=False
          Constant: type='int', value='3'
  Decl: name=None, quals=[], storage=[]
    Struct: name='_reent', packed=False
  Decl: name=None, quals=[], storage=[]
    Union: name='__dmath', packed=False
      Decl: name='i', quals=[], storage=[]
        ArrayDecl: 
          TypeDecl: declname='i', quals=[]
            IdentifierType: names=['__uint32_t']
          Constant: type='int', value='2'
      Decl: name='d', quals=[], storage=[]
        TypeDecl: declname='d', quals=[]
          IdentifierType: names=['double']
  Decl: name=None, quals=[], storage=[]
    Union: name='__dmath', packed=False
  Decl: name=None, quals=[], storage=[]
    Struct: name='exception', packed=False
      Decl: name='type', quals=[], storage=[]
        TypeDecl: declname='type', quals=[]
          IdentifierType: names=['int']
      Decl: name='name', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='name', quals=[]
            IdentifierType: names=['char']
      Decl: name='arg1', quals=[], storage=[]
        TypeDecl: declname='arg1', quals=[]
          IdentifierType: names=['double']
      Decl: name='arg2', quals=[], storage=[]
        TypeDecl: declname='arg2', quals=[]
          IdentifierType: names=['double']
      Decl: name='retval', quals=[], storage=[]
        TypeDecl: declname='retval', quals=[]
          IdentifierType: names=['double']
      Decl: name='err', quals=[], storage=[]
        TypeDecl: declname='err', quals=[]
          IdentifierType: names=['int']
  Decl: name=None, quals=[], storage=[]
    Enum: name='__fdlibm_version'
      EnumeratorList: 
        Enumerator: name='__fdlibm_ieee'
          UnaryOp: op='-'
            Constant: type='int', value='1'
        Enumerator: name='__fdlibm_svid'
        Enumerator: name='__fdlibm_xopen'
        Enumerator: name='__fdlibm_posix'
  Decl: name=None, quals=[], storage=[]
    Enum: name='__fdlibm_version'
  Typedef: name='bool', quals=[], storage=['typedef']
    TypeDecl: declname='bool', quals=[]
      IdentifierType: names=['uint8_t']
  Decl: name=None, quals=[], storage=[]
    Enum: name='__nesc_unnamed4247'
      EnumeratorList: 
        Enumerator: name='FALSE'
          Constant: type='int', value='0'
        Enumerator: name='TRUE'
          Constant: type='int', value='1'
  Typedef: name='nx_bool', quals=[], storage=['typedef']
    TypeDecl: declname='nx_bool', quals=[]
      IdentifierType: names=['nx_int8_t']
  Decl: name=None, quals=[], storage=[]
    Struct: name='__nesc_attr_atmostonce', packed=False
  Decl: name=None, quals=[], storage=[]
    Struct: name='__nesc_attr_atleastonce', packed=False
  Decl: name=None, quals=[], storage=[]
    Struct: name='__nesc_attr_exactlyonce', packed=False
  Decl: name=None, quals=[], storage=[]
    Enum: name='__nesc_unnamed4248'
      EnumeratorList: 
        Enumerator: name='SUCCESS'
          Constant: type='int', value='0'
        Enumerator: name='FAIL'
          Constant: type='int', value='1'
        Enumerator: name='ESIZE'
          Constant: type='int', value='2'
        Enumerator: name='ECANCEL'
          Constant: type='int', value='3'
        Enumerator: name='EOFF'
          Constant: type='int', value='4'
        Enumerator: name='EBUSY'
          Constant: type='int', value='5'
        Enumerator: name='EINVAL'
          Constant: type='int', value='6'
        Enumerator: name='ERETRY'
          Constant: type='int', value='7'
        Enumerator: name='ERESERVE'
          Constant: type='int', value='8'
        Enumerator: name='EALREADY'
          Constant: type='int', value='9'
        Enumerator: name='ENOMEM'
          Constant: type='int', value='10'
        Enumerator: name='ENOACK'
          Constant: type='int', value='11'
        Enumerator: name='ELAST'
          Constant: type='int', value='11'
  Typedef: name='error_t', quals=[], storage=['typedef']
    TypeDecl: declname='error_t', quals=[]
      IdentifierType: names=['uint8_t']
  Typedef: name='ioregister_t', quals=[], storage=['typedef']
    TypeDecl: declname='ioregister_t', quals=[]
      Union: name='port', packed=True
        Decl: name='reg_p', quals=['volatile'], storage=[]
          TypeDecl: declname='reg_p', quals=['volatile']
            IdentifierType: names=['char', 'unsigned']
        Decl: name='__pin', quals=['volatile'], storage=[]
          TypeDecl: declname='__pin', quals=['volatile']
            Struct: name='__nesc_unnamed4249', packed=False
              Decl: name='__p0', quals=[], storage=[]
                TypeDecl: declname='__p0', quals=[]
                  IdentifierType: names=['char', 'unsigned']
                Constant: type='int', value='1'
              Decl: name='__p1', quals=[], storage=[]
                TypeDecl: declname='__p1', quals=[]
                  IdentifierType: names=['char', 'unsigned']
                Constant: type='int', value='1'
              Decl: name='__p2', quals=[], storage=[]
                TypeDecl: declname='__p2', quals=[]
                  IdentifierType: names=['char', 'unsigned']
                Constant: type='int', value='1'
              Decl: name='__p3', quals=[], storage=[]
                TypeDecl: declname='__p3', quals=[]
                  IdentifierType: names=['char', 'unsigned']
                Constant: type='int', value='1'
              Decl: name='__p4', quals=[], storage=[]
                TypeDecl: declname='__p4', quals=[]
                  IdentifierType: names=['char', 'unsigned']
                Constant: type='int', value='1'
              Decl: name='__p5', quals=[], storage=[]
                TypeDecl: declname='__p5', quals=[]
                  IdentifierType: names=['char', 'unsigned']
                Constant: type='int', value='1'
              Decl: name='__p6', quals=[], storage=[]
                TypeDecl: declname='__p6', quals=[]
                  IdentifierType: names=['char', 'unsigned']
                Constant: type='int', value='1'
              Decl: name='__p7', quals=[], storage=[]
                TypeDecl: declname='__p7', quals=[]
                  IdentifierType: names=['char', 'unsigned']
                Constant: type='int', value='1'
  Decl: name=None, quals=[], storage=[]
    Struct: name='port_full_t', packed=False
      Decl: name='in', quals=[], storage=[]
        TypeDecl: declname='in', quals=[]
          IdentifierType: names=['ioregister_t']
      Decl: name='out', quals=[], storage=[]
        TypeDecl: declname='out', quals=[]
          IdentifierType: names=['ioregister_t']
      Decl: name='dir', quals=[], storage=[]
        TypeDecl: declname='dir', quals=[]
          IdentifierType: names=['ioregister_t']
      Decl: name='ifg', quals=[], storage=[]
        TypeDecl: declname='ifg', quals=[]
          IdentifierType: names=['ioregister_t']
      Decl: name='ies', quals=[], storage=[]
        TypeDecl: declname='ies', quals=[]
          IdentifierType: names=['ioregister_t']
      Decl: name='ie', quals=[], storage=[]
        TypeDecl: declname='ie', quals=[]
          IdentifierType: names=['ioregister_t']
      Decl: name='sel', quals=[], storage=[]
        TypeDecl: declname='sel', quals=[]
          IdentifierType: names=['ioregister_t']
  Decl: name=None, quals=[], storage=[]
    Struct: name='port_simple_t', packed=False
      Decl: name='in', quals=[], storage=[]
        TypeDecl: declname='in', quals=[]
          IdentifierType: names=['ioregister_t']
      Decl: name='out', quals=[], storage=[]
        TypeDecl: declname='out', quals=[]
          IdentifierType: names=['ioregister_t']
      Decl: name='dir', quals=[], storage=[]
        TypeDecl: declname='dir', quals=[]
          IdentifierType: names=['ioregister_t']
      Decl: name='sel', quals=[], storage=[]
        TypeDecl: declname='sel', quals=[]
          IdentifierType: names=['ioregister_t']
  Decl: name=None, quals=[], storage=[]
    Struct: name='port_full_t', packed=False
  Decl: name=None, quals=[], storage=[]
    Struct: name='port_full_t', packed=False
  Decl: name=None, quals=[], storage=[]
    Struct: name='port_simple_t', packed=False
  Decl: name=None, quals=[], storage=[]
    Struct: name='port_simple_t', packed=False
  Decl: name=None, quals=[], storage=[]
    Struct: name='port_simple_t', packed=False
  Decl: name=None, quals=[], storage=[]
    Struct: name='port_simple_t', packed=False
  Decl: name='P1OUT@"0x0021"', quals=['volatile'], storage=[]
    TypeDecl: declname='P1OUT@"0x0021"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P1DIR@"0x0022"', quals=['volatile'], storage=[]
    TypeDecl: declname='P1DIR@"0x0022"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P1IE@"0x0025"', quals=['volatile'], storage=[]
    TypeDecl: declname='P1IE@"0x0025"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P1SEL@"0x0026"', quals=['volatile'], storage=[]
    TypeDecl: declname='P1SEL@"0x0026"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P2OUT@"0x0029"', quals=['volatile'], storage=[]
    TypeDecl: declname='P2OUT@"0x0029"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P2DIR@"0x002A"', quals=['volatile'], storage=[]
    TypeDecl: declname='P2DIR@"0x002A"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P2IE@"0x002D"', quals=['volatile'], storage=[]
    TypeDecl: declname='P2IE@"0x002D"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P2SEL@"0x002E"', quals=['volatile'], storage=[]
    TypeDecl: declname='P2SEL@"0x002E"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P3OUT@"0x0019"', quals=['volatile'], storage=[]
    TypeDecl: declname='P3OUT@"0x0019"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P3DIR@"0x001A"', quals=['volatile'], storage=[]
    TypeDecl: declname='P3DIR@"0x001A"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P3SEL@"0x001B"', quals=['volatile'], storage=[]
    TypeDecl: declname='P3SEL@"0x001B"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P4OUT@"0x001D"', quals=['volatile'], storage=[]
    TypeDecl: declname='P4OUT@"0x001D"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P4DIR@"0x001E"', quals=['volatile'], storage=[]
    TypeDecl: declname='P4DIR@"0x001E"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P4SEL@"0x001F"', quals=['volatile'], storage=[]
    TypeDecl: declname='P4SEL@"0x001F"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P5OUT@"0x0031"', quals=['volatile'], storage=[]
    TypeDecl: declname='P5OUT@"0x0031"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P5DIR@"0x0032"', quals=['volatile'], storage=[]
    TypeDecl: declname='P5DIR@"0x0032"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P5SEL@"0x0033"', quals=['volatile'], storage=[]
    TypeDecl: declname='P5SEL@"0x0033"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P6OUT@"0x0035"', quals=['volatile'], storage=[]
    TypeDecl: declname='P6OUT@"0x0035"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P6DIR@"0x0036"', quals=['volatile'], storage=[]
    TypeDecl: declname='P6DIR@"0x0036"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='P6SEL@"0x0037"', quals=['volatile'], storage=[]
    TypeDecl: declname='P6SEL@"0x0037"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='U0TCTL@"0x0071"', quals=['volatile'], storage=[]
    TypeDecl: declname='U0TCTL@"0x0071"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='U1TCTL@"0x0079"', quals=['volatile'], storage=[]
    TypeDecl: declname='U1TCTL@"0x0079"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='TA0CTL@"0x0160"', quals=['volatile'], storage=[]
    TypeDecl: declname='TA0CTL@"0x0160"', quals=['volatile']
      IdentifierType: names=['int', 'unsigned']
  Decl: name='TA0R@"0x0170"', quals=['volatile'], storage=[]
    TypeDecl: declname='TA0R@"0x0170"', quals=['volatile']
      IdentifierType: names=['int', 'unsigned']
  Decl: name='TA0CCTL0@"0x0162"', quals=['volatile'], storage=[]
    TypeDecl: declname='TA0CCTL0@"0x0162"', quals=['volatile']
      IdentifierType: names=['int', 'unsigned']
  Decl: name='TA0CCTL1@"0x0164"', quals=['volatile'], storage=[]
    TypeDecl: declname='TA0CCTL1@"0x0164"', quals=['volatile']
      IdentifierType: names=['int', 'unsigned']
  Decl: name='TA0CCTL2@"0x0166"', quals=['volatile'], storage=[]
    TypeDecl: declname='TA0CCTL2@"0x0166"', quals=['volatile']
      IdentifierType: names=['int', 'unsigned']
  Typedef: name='tactl_t', quals=[], storage=['typedef']
    TypeDecl: declname='tactl_t', quals=[]
      Struct: name='__nesc_unnamed4250', packed=True
        Decl: name='taifg', quals=['volatile'], storage=[]
          TypeDecl: declname='taifg', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='taie', quals=['volatile'], storage=[]
          TypeDecl: declname='taie', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='taclr', quals=['volatile'], storage=[]
          TypeDecl: declname='taclr', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='dummy', quals=['volatile'], storage=[]
          TypeDecl: declname='dummy', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='tamc', quals=['volatile'], storage=[]
          TypeDecl: declname='tamc', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='2'
        Decl: name='taid', quals=['volatile'], storage=[]
          TypeDecl: declname='taid', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='2'
        Decl: name='tassel', quals=['volatile'], storage=[]
          TypeDecl: declname='tassel', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='2'
  Typedef: name='tacctl_t', quals=[], storage=['typedef']
    TypeDecl: declname='tacctl_t', quals=[]
      Struct: name='__nesc_unnamed4251', packed=True
        Decl: name='ccifg', quals=['volatile'], storage=[]
          TypeDecl: declname='ccifg', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='cov', quals=['volatile'], storage=[]
          TypeDecl: declname='cov', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='out', quals=['volatile'], storage=[]
          TypeDecl: declname='out', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='cci', quals=['volatile'], storage=[]
          TypeDecl: declname='cci', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='ccie', quals=['volatile'], storage=[]
          TypeDecl: declname='ccie', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='outmod', quals=['volatile'], storage=[]
          TypeDecl: declname='outmod', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='3'
        Decl: name='cap', quals=['volatile'], storage=[]
          TypeDecl: declname='cap', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='dummy', quals=['volatile'], storage=[]
          TypeDecl: declname='dummy', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='scci', quals=['volatile'], storage=[]
          TypeDecl: declname='scci', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='scs', quals=['volatile'], storage=[]
          TypeDecl: declname='scs', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='ccis', quals=['volatile'], storage=[]
          TypeDecl: declname='ccis', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='2'
        Decl: name='cm', quals=['volatile'], storage=[]
          TypeDecl: declname='cm', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='2'
  Decl: name=None, quals=[], storage=[]
    Struct: name='timera_t', packed=False
      Decl: name='ctl', quals=[], storage=[]
        TypeDecl: declname='ctl', quals=[]
          IdentifierType: names=['tactl_t']
      Decl: name='cctl0', quals=[], storage=[]
        TypeDecl: declname='cctl0', quals=[]
          IdentifierType: names=['tacctl_t']
      Decl: name='cctl1', quals=[], storage=[]
        TypeDecl: declname='cctl1', quals=[]
          IdentifierType: names=['tacctl_t']
      Decl: name='cctl2', quals=[], storage=[]
        TypeDecl: declname='cctl2', quals=[]
          IdentifierType: names=['tacctl_t']
      Decl: name='dummy', quals=['volatile'], storage=[]
        ArrayDecl: 
          TypeDecl: declname='dummy', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='4'
      Decl: name='tar', quals=['volatile'], storage=[]
        TypeDecl: declname='tar', quals=['volatile']
          IdentifierType: names=['unsigned']
      Decl: name='taccr0', quals=['volatile'], storage=[]
        TypeDecl: declname='taccr0', quals=['volatile']
          IdentifierType: names=['unsigned']
      Decl: name='taccr1', quals=['volatile'], storage=[]
        TypeDecl: declname='taccr1', quals=['volatile']
          IdentifierType: names=['unsigned']
      Decl: name='taccr2', quals=['volatile'], storage=[]
        TypeDecl: declname='taccr2', quals=['volatile']
          IdentifierType: names=['unsigned']
  Decl: name=None, quals=[], storage=[]
    Struct: name='timera_t', packed=False
  Decl: name='TBR@"0x0190"', quals=['volatile'], storage=[]
    TypeDecl: declname='TBR@"0x0190"', quals=['volatile']
      IdentifierType: names=['int', 'unsigned']
  Decl: name='TBCCTL0@"0x0182"', quals=['volatile'], storage=[]
    TypeDecl: declname='TBCCTL0@"0x0182"', quals=['volatile']
      IdentifierType: names=['int', 'unsigned']
  Decl: name='TBCCR0@"0x0192"', quals=['volatile'], storage=[]
    TypeDecl: declname='TBCCR0@"0x0192"', quals=['volatile']
      IdentifierType: names=['int', 'unsigned']
  Typedef: name='tbctl_t', quals=[], storage=['typedef']
    TypeDecl: declname='tbctl_t', quals=[]
      Struct: name='__nesc_unnamed4252', packed=True
        Decl: name='tbifg', quals=['volatile'], storage=[]
          TypeDecl: declname='tbifg', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='tbie', quals=['volatile'], storage=[]
          TypeDecl: declname='tbie', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='tbclr', quals=['volatile'], storage=[]
          TypeDecl: declname='tbclr', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='dummy1', quals=['volatile'], storage=[]
          TypeDecl: declname='dummy1', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='tbmc', quals=['volatile'], storage=[]
          TypeDecl: declname='tbmc', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='2'
        Decl: name='tbid', quals=['volatile'], storage=[]
          TypeDecl: declname='tbid', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='2'
        Decl: name='tbssel', quals=['volatile'], storage=[]
          TypeDecl: declname='tbssel', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='2'
        Decl: name='dummy2', quals=['volatile'], storage=[]
          TypeDecl: declname='dummy2', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='tbcntl', quals=['volatile'], storage=[]
          TypeDecl: declname='tbcntl', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='2'
        Decl: name='tbclgrp', quals=['volatile'], storage=[]
          TypeDecl: declname='tbclgrp', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='2'
  Typedef: name='tbcctl_t', quals=[], storage=['typedef']
    TypeDecl: declname='tbcctl_t', quals=[]
      Struct: name='__nesc_unnamed4253', packed=True
        Decl: name='ccifg', quals=['volatile'], storage=[]
          TypeDecl: declname='ccifg', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='cov', quals=['volatile'], storage=[]
          TypeDecl: declname='cov', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='out', quals=['volatile'], storage=[]
          TypeDecl: declname='out', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='cci', quals=['volatile'], storage=[]
          TypeDecl: declname='cci', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='ccie', quals=['volatile'], storage=[]
          TypeDecl: declname='ccie', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='outmod', quals=['volatile'], storage=[]
          TypeDecl: declname='outmod', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='3'
        Decl: name='cap', quals=['volatile'], storage=[]
          TypeDecl: declname='cap', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='clld', quals=['volatile'], storage=[]
          TypeDecl: declname='clld', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='2'
        Decl: name='scs', quals=['volatile'], storage=[]
          TypeDecl: declname='scs', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='ccis', quals=['volatile'], storage=[]
          TypeDecl: declname='ccis', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='2'
        Decl: name='cm', quals=['volatile'], storage=[]
          TypeDecl: declname='cm', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='2'
  Decl: name=None, quals=[], storage=[]
    Struct: name='timerb_t', packed=False
      Decl: name='ctl', quals=[], storage=[]
        TypeDecl: declname='ctl', quals=[]
          IdentifierType: names=['tbctl_t']
      Decl: name='cctl0', quals=[], storage=[]
        TypeDecl: declname='cctl0', quals=[]
          IdentifierType: names=['tbcctl_t']
      Decl: name='cctl1', quals=[], storage=[]
        TypeDecl: declname='cctl1', quals=[]
          IdentifierType: names=['tbcctl_t']
      Decl: name='cctl2', quals=[], storage=[]
        TypeDecl: declname='cctl2', quals=[]
          IdentifierType: names=['tbcctl_t']
      Decl: name='cctl3', quals=[], storage=[]
        TypeDecl: declname='cctl3', quals=[]
          IdentifierType: names=['tbcctl_t']
      Decl: name='cctl4', quals=[], storage=[]
        TypeDecl: declname='cctl4', quals=[]
          IdentifierType: names=['tbcctl_t']
      Decl: name='cctl5', quals=[], storage=[]
        TypeDecl: declname='cctl5', quals=[]
          IdentifierType: names=['tbcctl_t']
      Decl: name='cctl6', quals=[], storage=[]
        TypeDecl: declname='cctl6', quals=[]
          IdentifierType: names=['tbcctl_t']
      Decl: name='tbr', quals=['volatile'], storage=[]
        TypeDecl: declname='tbr', quals=['volatile']
          IdentifierType: names=['unsigned']
      Decl: name='tbccr0', quals=['volatile'], storage=[]
        TypeDecl: declname='tbccr0', quals=['volatile']
          IdentifierType: names=['unsigned']
      Decl: name='tbccr1', quals=['volatile'], storage=[]
        TypeDecl: declname='tbccr1', quals=['volatile']
          IdentifierType: names=['unsigned']
      Decl: name='tbccr2', quals=['volatile'], storage=[]
        TypeDecl: declname='tbccr2', quals=['volatile']
          IdentifierType: names=['unsigned']
      Decl: name='tbccr3', quals=['volatile'], storage=[]
        TypeDecl: declname='tbccr3', quals=['volatile']
          IdentifierType: names=['unsigned']
      Decl: name='tbccr4', quals=['volatile'], storage=[]
        TypeDecl: declname='tbccr4', quals=['volatile']
          IdentifierType: names=['unsigned']
      Decl: name='tbccr5', quals=['volatile'], storage=[]
        TypeDecl: declname='tbccr5', quals=['volatile']
          IdentifierType: names=['unsigned']
      Decl: name='tbccr6', quals=['volatile'], storage=[]
        TypeDecl: declname='tbccr6', quals=['volatile']
          IdentifierType: names=['unsigned']
  Decl: name=None, quals=[], storage=[]
    Struct: name='timerb_t', packed=False
  Decl: name='DCOCTL@"0x0056"', quals=['volatile'], storage=[]
    TypeDecl: declname='DCOCTL@"0x0056"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='BCSCTL1@"0x0057"', quals=['volatile'], storage=[]
    TypeDecl: declname='BCSCTL1@"0x0057"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='BCSCTL2@"0x0058"', quals=['volatile'], storage=[]
    TypeDecl: declname='BCSCTL2@"0x0058"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='ADC12CTL0@"0x01A0"', quals=['volatile'], storage=[]
    TypeDecl: declname='ADC12CTL0@"0x01A0"', quals=['volatile']
      IdentifierType: names=['int', 'unsigned']
  Decl: name='ADC12CTL1@"0x01A2"', quals=['volatile'], storage=[]
    TypeDecl: declname='ADC12CTL1@"0x01A2"', quals=['volatile']
      IdentifierType: names=['int', 'unsigned']
  Typedef: name='adc12ctl0_t', quals=[], storage=['typedef']
    TypeDecl: declname='adc12ctl0_t', quals=[]
      Struct: name='__nesc_unnamed4254', packed=True
        Decl: name='adc12sc', quals=['volatile'], storage=[]
          TypeDecl: declname='adc12sc', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='enc', quals=['volatile'], storage=[]
          TypeDecl: declname='enc', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='adc12tovie', quals=['volatile'], storage=[]
          TypeDecl: declname='adc12tovie', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='adc12ovie', quals=['volatile'], storage=[]
          TypeDecl: declname='adc12ovie', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='adc12on', quals=['volatile'], storage=[]
          TypeDecl: declname='adc12on', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='refon', quals=['volatile'], storage=[]
          TypeDecl: declname='refon', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='r2_5v', quals=['volatile'], storage=[]
          TypeDecl: declname='r2_5v', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='msc', quals=['volatile'], storage=[]
          TypeDecl: declname='msc', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='sht0', quals=['volatile'], storage=[]
          TypeDecl: declname='sht0', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='4'
        Decl: name='sht1', quals=['volatile'], storage=[]
          TypeDecl: declname='sht1', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='4'
  Typedef: name='adc12ctl1_t', quals=[], storage=['typedef']
    TypeDecl: declname='adc12ctl1_t', quals=[]
      Struct: name='__nesc_unnamed4255', packed=True
        Decl: name='adc12busy', quals=['volatile'], storage=[]
          TypeDecl: declname='adc12busy', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='conseq', quals=['volatile'], storage=[]
          TypeDecl: declname='conseq', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='2'
        Decl: name='adc12ssel', quals=['volatile'], storage=[]
          TypeDecl: declname='adc12ssel', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='2'
        Decl: name='adc12div', quals=['volatile'], storage=[]
          TypeDecl: declname='adc12div', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='3'
        Decl: name='issh', quals=['volatile'], storage=[]
          TypeDecl: declname='issh', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='shp', quals=['volatile'], storage=[]
          TypeDecl: declname='shp', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='shs', quals=['volatile'], storage=[]
          TypeDecl: declname='shs', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='2'
        Decl: name='cstartadd', quals=['volatile'], storage=[]
          TypeDecl: declname='cstartadd', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='4'
  Typedef: name='adc12xflg_t', quals=[], storage=['typedef']
    TypeDecl: declname='adc12xflg_t', quals=[]
      Struct: name='__nesc_unnamed4256', packed=True
        Decl: name='bit0', quals=['volatile'], storage=[]
          TypeDecl: declname='bit0', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='bit1', quals=['volatile'], storage=[]
          TypeDecl: declname='bit1', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='bit2', quals=['volatile'], storage=[]
          TypeDecl: declname='bit2', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='bit3', quals=['volatile'], storage=[]
          TypeDecl: declname='bit3', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='bit4', quals=['volatile'], storage=[]
          TypeDecl: declname='bit4', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='bit5', quals=['volatile'], storage=[]
          TypeDecl: declname='bit5', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='bit6', quals=['volatile'], storage=[]
          TypeDecl: declname='bit6', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='bit7', quals=['volatile'], storage=[]
          TypeDecl: declname='bit7', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='bit8', quals=['volatile'], storage=[]
          TypeDecl: declname='bit8', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='bit9', quals=['volatile'], storage=[]
          TypeDecl: declname='bit9', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='bit10', quals=['volatile'], storage=[]
          TypeDecl: declname='bit10', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='bit11', quals=['volatile'], storage=[]
          TypeDecl: declname='bit11', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='bit12', quals=['volatile'], storage=[]
          TypeDecl: declname='bit12', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='bit13', quals=['volatile'], storage=[]
          TypeDecl: declname='bit13', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='bit14', quals=['volatile'], storage=[]
          TypeDecl: declname='bit14', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
        Decl: name='bit15', quals=['volatile'], storage=[]
          TypeDecl: declname='bit15', quals=['volatile']
            IdentifierType: names=['unsigned']
          Constant: type='int', value='1'
  Decl: name=None, quals=[], storage=[]
    Struct: name='adc12_t', packed=False
      Decl: name='ctl0', quals=[], storage=[]
        TypeDecl: declname='ctl0', quals=[]
          IdentifierType: names=['adc12ctl0_t']
      Decl: name='ctl1', quals=[], storage=[]
        TypeDecl: declname='ctl1', quals=[]
          IdentifierType: names=['adc12ctl1_t']
      Decl: name='ifg', quals=[], storage=[]
        TypeDecl: declname='ifg', quals=[]
          IdentifierType: names=['adc12xflg_t']
      Decl: name='ie', quals=[], storage=[]
        TypeDecl: declname='ie', quals=[]
          IdentifierType: names=['adc12xflg_t']
      Decl: name='iv', quals=[], storage=[]
        TypeDecl: declname='iv', quals=[]
          IdentifierType: names=['adc12xflg_t']
  Decl: name=None, quals=[], storage=[]
    Struct: name='adc12_t', packed=False
  Decl: name='ME1@"0x0004"', quals=['volatile'], storage=[]
    TypeDecl: declname='ME1@"0x0004"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='ME2@"0x0005"', quals=['volatile'], storage=[]
    TypeDecl: declname='ME2@"0x0005"', quals=['volatile']
      IdentifierType: names=['char', 'unsigned']
  Decl: name='U0CTLnr@"0x0070"', quals=['volatile'], storage=['static']
    TypeDecl: declname='U0CTLnr@"0x0070"', quals=['volatile']
      IdentifierType: names=['uint8_t']
  Decl: name='I2CTCTLnr@"0x0071"', quals=['volatile'], storage=['static']
    TypeDecl: declname='I2CTCTLnr@"0x0071"', quals=['volatile']
      IdentifierType: names=['uint8_t']
  Decl: name='I2CDCTLnr@"0x0072"', quals=['volatile'], storage=['static']
    TypeDecl: declname='I2CDCTLnr@"0x0072"', quals=['volatile']
      IdentifierType: names=['uint8_t']
  Typedef: name='mcu_power_t', quals=[], storage=['typedef']
    TypeDecl: declname='mcu_power_t', quals=[]
      IdentifierType: names=['uint8_t']
  Decl: name='mcombine', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='m1', quals=[], storage=[]
          TypeDecl: declname='m1', quals=[]
            IdentifierType: names=['mcu_power_t']
        Decl: name='m2', quals=[], storage=[]
          TypeDecl: declname='m2', quals=[]
            IdentifierType: names=['mcu_power_t']
      TypeDecl: declname='mcombine', quals=[]
        IdentifierType: names=['mcu_power_t']
  Decl: name=None, quals=[], storage=[]
    Enum: name='__nesc_unnamed4257'
      EnumeratorList: 
        Enumerator: name='MSP430_POWER_ACTIVE'
          Constant: type='int', value='0'
        Enumerator: name='MSP430_POWER_LPM0'
          Constant: type='int', value='1'
        Enumerator: name='MSP430_POWER_LPM1'
          Constant: type='int', value='2'
        Enumerator: name='MSP430_POWER_LPM2'
          Constant: type='int', value='3'
        Enumerator: name='MSP430_POWER_LPM3'
          Constant: type='int', value='4'
        Enumerator: name='MSP430_POWER_LPM4'
          Constant: type='int', value='5'
  Decl: name='__nesc_disable_interrupt', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='__nesc_disable_interrupt', quals=[]
        IdentifierType: names=['void']
  Decl: name='__nesc_enable_interrupt', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='__nesc_enable_interrupt', quals=[]
        IdentifierType: names=['void']
  Typedef: name='__nesc_atomic_t', quals=[], storage=['typedef']
    TypeDecl: declname='__nesc_atomic_t', quals=[]
      IdentifierType: names=['bool']
  Decl: name='__nesc_atomic_start', quals=[], storage=[]
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='__nesc_atomic_start', quals=[]
        IdentifierType: names=['__nesc_atomic_t']
  Decl: name='__nesc_atomic_end', quals=[], storage=[]
    FuncDecl: quals=None
      ParamList: 
        Decl: name='reenable_interrupts', quals=[], storage=[]
          TypeDecl: declname='reenable_interrupts', quals=[]
            IdentifierType: names=['__nesc_atomic_t']
      TypeDecl: declname='__nesc_atomic_end', quals=[]
        IdentifierType: names=['void']
  Decl: name='__nesc_atomic_start', quals=[], storage=[]
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='__nesc_atomic_start', quals=[]
        IdentifierType: names=['__nesc_atomic_t']
  Decl: name='__nesc_atomic_end', quals=[], storage=[]
    FuncDecl: quals=None
      ParamList: 
        Decl: name='reenable_interrupts', quals=[], storage=[]
          TypeDecl: declname='reenable_interrupts', quals=[]
            IdentifierType: names=['__nesc_atomic_t']
      TypeDecl: declname='__nesc_atomic_end', quals=[]
        IdentifierType: names=['void']
  Typedef: name='nx_float', quals=[], storage=['typedef']
    TypeDecl: declname='nx_float', quals=[]
      Struct: name=None, packed=True
        Decl: name='data', quals=[], storage=[]
          ArrayDecl: 
            TypeDecl: declname='data', quals=[]
              IdentifierType: names=['char', 'unsigned']
            Constant: type='int', value='4'
  Typedef: name='__nesc_nxbase_nx_float', quals=[], storage=['typedef']
    TypeDecl: declname='__nesc_nxbase_nx_float', quals=[]
      IdentifierType: names=['float']
  Decl: name='TOSH_SET_SIMO0_PIN', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      TypeDecl: declname='TOSH_SET_SIMO0_PIN', quals=[]
        IdentifierType: names=['void']
  Decl: name='TOSH_CLR_SIMO0_PIN', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      TypeDecl: declname='TOSH_CLR_SIMO0_PIN', quals=[]
        IdentifierType: names=['void']
  Decl: name='TOSH_MAKE_SIMO0_OUTPUT', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      TypeDecl: declname='TOSH_MAKE_SIMO0_OUTPUT', quals=[]
        IdentifierType: names=['void']
  Decl: name='TOSH_SET_UCLK0_PIN', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      TypeDecl: declname='TOSH_SET_UCLK0_PIN', quals=[]
        IdentifierType: names=['void']
  Decl: name='TOSH_CLR_UCLK0_PIN', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      TypeDecl: declname='TOSH_CLR_UCLK0_PIN', quals=[]
        IdentifierType: names=['void']
  Decl: name='TOSH_MAKE_UCLK0_OUTPUT', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      TypeDecl: declname='TOSH_MAKE_UCLK0_OUTPUT', quals=[]
        IdentifierType: names=['void']
  Decl: name=None, quals=[], storage=[]
    Enum: name='__nesc_unnamed4258'
      EnumeratorList: 
        Enumerator: name='TOSH_HUMIDITY_ADDR'
          Constant: type='int', value='5'
        Enumerator: name='TOSH_HUMIDTEMP_ADDR'
          Constant: type='int', value='3'
        Enumerator: name='TOSH_HUMIDITY_RESET'
          Constant: type='int', value='0x1E'
  Decl: name='TOSH_SET_FLASH_CS_PIN', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      TypeDecl: declname='TOSH_SET_FLASH_CS_PIN', quals=[]
        IdentifierType: names=['void']
  Decl: name='TOSH_CLR_FLASH_CS_PIN', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      TypeDecl: declname='TOSH_CLR_FLASH_CS_PIN', quals=[]
        IdentifierType: names=['void']
  Decl: name='TOSH_MAKE_FLASH_CS_OUTPUT', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      TypeDecl: declname='TOSH_MAKE_FLASH_CS_OUTPUT', quals=[]
        IdentifierType: names=['void']
  Decl: name='TOSH_SET_FLASH_HOLD_PIN', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      TypeDecl: declname='TOSH_SET_FLASH_HOLD_PIN', quals=[]
        IdentifierType: names=['void']
  Decl: name='TOSH_MAKE_FLASH_HOLD_OUTPUT', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      TypeDecl: declname='TOSH_MAKE_FLASH_HOLD_OUTPUT', quals=[]
        IdentifierType: names=['void']
  Decl: name=None, quals=[], storage=[]
    Enum: name='__nesc_unnamed4259'
      EnumeratorList: 
        Enumerator: name='MSP430TIMER_CM_NONE'
          Constant: type='int', value='0'
        Enumerator: name='MSP430TIMER_CM_RISING'
          Constant: type='int', value='1'
        Enumerator: name='MSP430TIMER_CM_FALLING'
          Constant: type='int', value='2'
        Enumerator: name='MSP430TIMER_CM_BOTH'
          Constant: type='int', value='3'
        Enumerator: name='MSP430TIMER_STOP_MODE'
          Constant: type='int', value='0'
        Enumerator: name='MSP430TIMER_UP_MODE'
          Constant: type='int', value='1'
        Enumerator: name='MSP430TIMER_CONTINUOUS_MODE'
          Constant: type='int', value='2'
        Enumerator: name='MSP430TIMER_UPDOWN_MODE'
          Constant: type='int', value='3'
        Enumerator: name='MSP430TIMER_TACLK'
          Constant: type='int', value='0'
        Enumerator: name='MSP430TIMER_TBCLK'
          Constant: type='int', value='0'
        Enumerator: name='MSP430TIMER_ACLK'
          Constant: type='int', value='1'
        Enumerator: name='MSP430TIMER_SMCLK'
          Constant: type='int', value='2'
        Enumerator: name='MSP430TIMER_INCLK'
          Constant: type='int', value='3'
        Enumerator: name='MSP430TIMER_CLOCKDIV_1'
          Constant: type='int', value='0'
        Enumerator: name='MSP430TIMER_CLOCKDIV_2'
          Constant: type='int', value='1'
        Enumerator: name='MSP430TIMER_CLOCKDIV_4'
          Constant: type='int', value='2'
        Enumerator: name='MSP430TIMER_CLOCKDIV_8'
          Constant: type='int', value='3'
  Typedef: name='msp430_compare_control_t', quals=[], storage=['typedef']
    TypeDecl: declname='msp430_compare_control_t', quals=[]
      Struct: name='__nesc_unnamed4260', packed=False
        Decl: name='ccifg', quals=[], storage=[]
          TypeDecl: declname='ccifg', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='1'
        Decl: name='cov', quals=[], storage=[]
          TypeDecl: declname='cov', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='1'
        Decl: name='out', quals=[], storage=[]
          TypeDecl: declname='out', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='1'
        Decl: name='cci', quals=[], storage=[]
          TypeDecl: declname='cci', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='1'
        Decl: name='ccie', quals=[], storage=[]
          TypeDecl: declname='ccie', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='1'
        Decl: name='outmod', quals=[], storage=[]
          TypeDecl: declname='outmod', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='3'
        Decl: name='cap', quals=[], storage=[]
          TypeDecl: declname='cap', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='1'
        Decl: name='clld', quals=[], storage=[]
          TypeDecl: declname='clld', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='2'
        Decl: name='scs', quals=[], storage=[]
          TypeDecl: declname='scs', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='1'
        Decl: name='ccis', quals=[], storage=[]
          TypeDecl: declname='ccis', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='2'
        Decl: name='cm', quals=[], storage=[]
          TypeDecl: declname='cm', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='2'
  Typedef: name='msp430_timer_a_control_t', quals=[], storage=['typedef']
    TypeDecl: declname='msp430_timer_a_control_t', quals=[]
      Struct: name='__nesc_unnamed4261', packed=False
        Decl: name='taifg', quals=[], storage=[]
          TypeDecl: declname='taifg', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='1'
        Decl: name='taie', quals=[], storage=[]
          TypeDecl: declname='taie', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='1'
        Decl: name='taclr', quals=[], storage=[]
          TypeDecl: declname='taclr', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='1'
        Decl: name='_unused0', quals=[], storage=[]
          TypeDecl: declname='_unused0', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='1'
        Decl: name='mc', quals=[], storage=[]
          TypeDecl: declname='mc', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='2'
        Decl: name='id', quals=[], storage=[]
          TypeDecl: declname='id', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='2'
        Decl: name='tassel', quals=[], storage=[]
          TypeDecl: declname='tassel', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='2'
        Decl: name='_unused1', quals=[], storage=[]
          TypeDecl: declname='_unused1', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='6'
  Typedef: name='msp430_timer_b_control_t', quals=[], storage=['typedef']
    TypeDecl: declname='msp430_timer_b_control_t', quals=[]
      Struct: name='__nesc_unnamed4262', packed=False
        Decl: name='tbifg', quals=[], storage=[]
          TypeDecl: declname='tbifg', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='1'
        Decl: name='tbie', quals=[], storage=[]
          TypeDecl: declname='tbie', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='1'
        Decl: name='tbclr', quals=[], storage=[]
          TypeDecl: declname='tbclr', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='1'
        Decl: name='_unused0', quals=[], storage=[]
          TypeDecl: declname='_unused0', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='1'
        Decl: name='mc', quals=[], storage=[]
          TypeDecl: declname='mc', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='2'
        Decl: name='id', quals=[], storage=[]
          TypeDecl: declname='id', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='2'
        Decl: name='tbssel', quals=[], storage=[]
          TypeDecl: declname='tbssel', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='2'
        Decl: name='_unused1', quals=[], storage=[]
          TypeDecl: declname='_unused1', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='1'
        Decl: name='cntl', quals=[], storage=[]
          TypeDecl: declname='cntl', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='2'
        Decl: name='tbclgrp', quals=[], storage=[]
          TypeDecl: declname='tbclgrp', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='2'
        Decl: name='_unused2', quals=[], storage=[]
          TypeDecl: declname='_unused2', quals=[]
            IdentifierType: names=['int']
          Constant: type='int', value='1'
  Typedef: name='TMilli', quals=[], storage=['typedef']
    TypeDecl: declname='TMilli', quals=[]
      Struct: name='__nesc_unnamed4263', packed=False
        Decl: name='notUsed', quals=[], storage=[]
          TypeDecl: declname='notUsed', quals=[]
            IdentifierType: names=['int']
  Typedef: name='T32khz', quals=[], storage=['typedef']
    TypeDecl: declname='T32khz', quals=[]
      Struct: name='__nesc_unnamed4264', packed=False
        Decl: name='notUsed', quals=[], storage=[]
          TypeDecl: declname='notUsed', quals=[]
            IdentifierType: names=['int']
  Typedef: name='TMicro', quals=[], storage=['typedef']
    TypeDecl: declname='TMicro', quals=[]
      Struct: name='__nesc_unnamed4265', packed=False
        Decl: name='notUsed', quals=[], storage=[]
          TypeDecl: declname='notUsed', quals=[]
            IdentifierType: names=['int']
  Decl: name=None, quals=[], storage=[]
    Enum: name='__nesc_unnamed4266'
      EnumeratorList: 
        Enumerator: name='LEDS_LED0'
          BinaryOp: op='<<'
            Constant: type='int', value='1'
            Constant: type='int', value='0'
        Enumerator: name='LEDS_LED1'
          BinaryOp: op='<<'
            Constant: type='int', value='1'
            Constant: type='int', value='1'
        Enumerator: name='LEDS_LED2'
          BinaryOp: op='<<'
            Constant: type='int', value='1'
            Constant: type='int', value='2'
        Enumerator: name='LEDS_LED3'
          BinaryOp: op='<<'
            Constant: type='int', value='1'
            Constant: type='int', value='3'
        Enumerator: name='LEDS_LED4'
          BinaryOp: op='<<'
            Constant: type='int', value='1'
            Constant: type='int', value='4'
        Enumerator: name='LEDS_LED5'
          BinaryOp: op='<<'
            Constant: type='int', value='1'
            Constant: type='int', value='5'
        Enumerator: name='LEDS_LED6'
          BinaryOp: op='<<'
            Constant: type='int', value='1'
            Constant: type='int', value='6'
        Enumerator: name='LEDS_LED7'
          BinaryOp: op='<<'
            Constant: type='int', value='1'
            Constant: type='int', value='7'
  Typedef: name='BlinkC_Timer0_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='BlinkC_Timer0_precision_tag', quals=[]
      IdentifierType: names=['TMilli']
  Typedef: name='BlinkC_Timer1_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='BlinkC_Timer1_precision_tag', quals=[]
      IdentifierType: names=['TMilli']
  Typedef: name='BlinkC_Timer2_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='BlinkC_Timer2_precision_tag', quals=[]
      IdentifierType: names=['TMilli']
  Decl: name=None, quals=[], storage=[]
    Enum: name='Msp430Timer32khzC_0___nesc_unnamed4267'
      EnumeratorList: 
        Enumerator: name='Msp430Timer32khzC_0_ALARM_ID'
          Constant: type='int', value='0U'
  Typedef: name='Msp430AlarmC_0_frequency_tag', quals=[], storage=['typedef']
    TypeDecl: declname='Msp430AlarmC_0_frequency_tag', quals=[]
      IdentifierType: names=['T32khz']
  Typedef: name='Msp430AlarmC_0_Alarm_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='Msp430AlarmC_0_Alarm_precision_tag', quals=[]
      IdentifierType: names=['Msp430AlarmC_0_frequency_tag']
  Typedef: name='Msp430AlarmC_0_Alarm_size_type', quals=[], storage=['typedef']
    TypeDecl: declname='Msp430AlarmC_0_Alarm_size_type', quals=[]
      IdentifierType: names=['uint16_t']
  Typedef: name='Msp430CounterC_0_frequency_tag', quals=[], storage=['typedef']
    TypeDecl: declname='Msp430CounterC_0_frequency_tag', quals=[]
      IdentifierType: names=['T32khz']
  Typedef: name='Msp430CounterC_0_Counter_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='Msp430CounterC_0_Counter_precision_tag', quals=[]
      IdentifierType: names=['Msp430CounterC_0_frequency_tag']
  Typedef: name='Msp430CounterC_0_Counter_size_type', quals=[], storage=['typedef']
    TypeDecl: declname='Msp430CounterC_0_Counter_size_type', quals=[]
      IdentifierType: names=['uint16_t']
  Typedef: name='TransformCounterC_0_to_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='TransformCounterC_0_to_precision_tag', quals=[]
      IdentifierType: names=['TMilli']
  Typedef: name='TransformCounterC_0_to_size_type', quals=[], storage=['typedef']
    TypeDecl: declname='TransformCounterC_0_to_size_type', quals=[]
      IdentifierType: names=['uint32_t']
  Typedef: name='TransformCounterC_0_from_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='TransformCounterC_0_from_precision_tag', quals=[]
      IdentifierType: names=['T32khz']
  Typedef: name='TransformCounterC_0_from_size_type', quals=[], storage=['typedef']
    TypeDecl: declname='TransformCounterC_0_from_size_type', quals=[]
      IdentifierType: names=['uint16_t']
  Typedef: name='TransformCounterC_0_upper_count_type', quals=[], storage=['typedef']
    TypeDecl: declname='TransformCounterC_0_upper_count_type', quals=[]
      IdentifierType: names=['uint32_t']
  Typedef: name='TransformCounterC_0_CounterFrom_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='TransformCounterC_0_CounterFrom_precision_tag', quals=[]
      IdentifierType: names=['TransformCounterC_0_from_precision_tag']
  Typedef: name='TransformCounterC_0_CounterFrom_size_type', quals=[], storage=['typedef']
    TypeDecl: declname='TransformCounterC_0_CounterFrom_size_type', quals=[]
      IdentifierType: names=['TransformCounterC_0_from_size_type']
  Typedef: name='TransformCounterC_0_Counter_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='TransformCounterC_0_Counter_precision_tag', quals=[]
      IdentifierType: names=['TransformCounterC_0_to_precision_tag']
  Typedef: name='TransformCounterC_0_Counter_size_type', quals=[], storage=['typedef']
    TypeDecl: declname='TransformCounterC_0_Counter_size_type', quals=[]
      IdentifierType: names=['TransformCounterC_0_to_size_type']
  Typedef: name='TransformAlarmC_0_to_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='TransformAlarmC_0_to_precision_tag', quals=[]
      IdentifierType: names=['TMilli']
  Typedef: name='TransformAlarmC_0_to_size_type', quals=[], storage=['typedef']
    TypeDecl: declname='TransformAlarmC_0_to_size_type', quals=[]
      IdentifierType: names=['uint32_t']
  Typedef: name='TransformAlarmC_0_from_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='TransformAlarmC_0_from_precision_tag', quals=[]
      IdentifierType: names=['T32khz']
  Typedef: name='TransformAlarmC_0_from_size_type', quals=[], storage=['typedef']
    TypeDecl: declname='TransformAlarmC_0_from_size_type', quals=[]
      IdentifierType: names=['uint16_t']
  Typedef: name='TransformAlarmC_0_Alarm_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='TransformAlarmC_0_Alarm_precision_tag', quals=[]
      IdentifierType: names=['TransformAlarmC_0_to_precision_tag']
  Typedef: name='TransformAlarmC_0_Alarm_size_type', quals=[], storage=['typedef']
    TypeDecl: declname='TransformAlarmC_0_Alarm_size_type', quals=[]
      IdentifierType: names=['TransformAlarmC_0_to_size_type']
  Typedef: name='TransformAlarmC_0_AlarmFrom_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='TransformAlarmC_0_AlarmFrom_precision_tag', quals=[]
      IdentifierType: names=['TransformAlarmC_0_from_precision_tag']
  Typedef: name='TransformAlarmC_0_AlarmFrom_size_type', quals=[], storage=['typedef']
    TypeDecl: declname='TransformAlarmC_0_AlarmFrom_size_type', quals=[]
      IdentifierType: names=['TransformAlarmC_0_from_size_type']
  Typedef: name='TransformAlarmC_0_Counter_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='TransformAlarmC_0_Counter_precision_tag', quals=[]
      IdentifierType: names=['TransformAlarmC_0_to_precision_tag']
  Typedef: name='TransformAlarmC_0_Counter_size_type', quals=[], storage=['typedef']
    TypeDecl: declname='TransformAlarmC_0_Counter_size_type', quals=[]
      IdentifierType: names=['TransformAlarmC_0_to_size_type']
  Typedef: name='AlarmToTimerC_0_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='AlarmToTimerC_0_precision_tag', quals=[]
      IdentifierType: names=['TMilli']
  Typedef: name='AlarmToTimerC_0_Alarm_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='AlarmToTimerC_0_Alarm_precision_tag', quals=[]
      IdentifierType: names=['AlarmToTimerC_0_precision_tag']
  Typedef: name='AlarmToTimerC_0_Alarm_size_type', quals=[], storage=['typedef']
    TypeDecl: declname='AlarmToTimerC_0_Alarm_size_type', quals=[]
      IdentifierType: names=['uint32_t']
  Typedef: name='AlarmToTimerC_0_Timer_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='AlarmToTimerC_0_Timer_precision_tag', quals=[]
      IdentifierType: names=['AlarmToTimerC_0_precision_tag']
  Typedef: name='VirtualizeTimerC_0_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='VirtualizeTimerC_0_precision_tag', quals=[]
      IdentifierType: names=['TMilli']
  Typedef: name='VirtualizeTimerC_0_TimerFrom_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='VirtualizeTimerC_0_TimerFrom_precision_tag', quals=[]
      IdentifierType: names=['VirtualizeTimerC_0_precision_tag']
  Typedef: name='VirtualizeTimerC_0_Timer_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='VirtualizeTimerC_0_Timer_precision_tag', quals=[]
      IdentifierType: names=['VirtualizeTimerC_0_precision_tag']
  Typedef: name='CounterToLocalTimeC_0_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='CounterToLocalTimeC_0_precision_tag', quals=[]
      IdentifierType: names=['TMilli']
  Typedef: name='CounterToLocalTimeC_0_LocalTime_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='CounterToLocalTimeC_0_LocalTime_precision_tag', quals=[]
      IdentifierType: names=['CounterToLocalTimeC_0_precision_tag']
  Typedef: name='CounterToLocalTimeC_0_Counter_precision_tag', quals=[], storage=['typedef']
    TypeDecl: declname='CounterToLocalTimeC_0_Counter_precision_tag', quals=[]
      IdentifierType: names=['CounterToLocalTimeC_0_precision_tag']
  Typedef: name='CounterToLocalTimeC_0_Counter_size_type', quals=[], storage=['typedef']
    TypeDecl: declname='CounterToLocalTimeC_0_Counter_size_type', quals=[]
      IdentifierType: names=['uint32_t']
  Decl: name='PlatformP_Init_init', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='PlatformP_Init_init', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='MotePlatformC_Init_init', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='MotePlatformC_Init_init', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='Msp430ClockP_Msp430ClockInit_defaultInitClocks', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_defaultInitClocks', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Msp430ClockInit_default_initTimerB', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_default_initTimerB', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Msp430ClockInit_defaultInitTimerA', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_defaultInitTimerA', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Msp430ClockInit_default_initTimerA', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_default_initTimerA', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Msp430ClockInit_defaultInitTimerB', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_defaultInitTimerB', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Msp430ClockInit_defaultSetupDcoCalibrate', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_defaultSetupDcoCalibrate', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Msp430ClockInit_default_setupDcoCalibrate', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_default_setupDcoCalibrate', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Msp430ClockInit_default_initClocks', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_default_initClocks', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Init_init', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Init_init', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='Msp430TimerP_0_VectorTimerX0_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerP_0_VectorTimerX0_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_0_Overflow_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerP_0_Overflow_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_0_VectorTimerX1_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerP_0_VectorTimerX1_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_0_Event_default_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='arg_0x1561800', quals=[], storage=[]
          TypeDecl: declname='arg_0x1561800', quals=[]
            IdentifierType: names=['uint8_t']
      TypeDecl: declname='Msp430TimerP_0_Event_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_1_VectorTimerX0_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerP_1_VectorTimerX0_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_1_Overflow_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerP_1_Overflow_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_1_VectorTimerX1_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerP_1_VectorTimerX1_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_1_Event_default_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='arg_0x1561800', quals=[], storage=[]
          TypeDecl: declname='arg_0x1561800', quals=[]
            IdentifierType: names=['uint8_t']
      TypeDecl: declname='Msp430TimerP_1_Event_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_1_Timer_get', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerP_1_Timer_get', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerP_1_Timer_isOverflowPending', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerP_1_Timer_isOverflowPending', quals=[]
        IdentifierType: names=['bool']
  Decl: name='Msp430TimerCapComP_0_Capture_getEvent', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_0_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_0_Capture_default_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_0_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_0_Control_getControl', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_0_Control_getControl', quals=[]
        IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_0_Event_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_0_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_0_Compare_default_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_0_Compare_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_0_Timer_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_0_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_1_Capture_getEvent', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_1_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_1_Capture_default_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_1_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_1_Control_getControl', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_1_Control_getControl', quals=[]
        IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_1_Event_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_1_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_1_Compare_default_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_1_Compare_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_1_Timer_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_1_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_2_Capture_getEvent', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_2_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_2_Capture_default_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_2_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_2_Control_getControl', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_2_Control_getControl', quals=[]
        IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_2_Event_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_2_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_2_Compare_default_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_2_Compare_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_2_Timer_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_2_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Capture_getEvent', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_3_Capture_default_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_3_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Control_getControl', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_Control_getControl', quals=[]
        IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_3_Control_enableEvents', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_Control_enableEvents', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Control_setControlAsCompare', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_Control_setControlAsCompare', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Control_disableEvents', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_Control_disableEvents', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Control_clearPendingInterrupt', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_Control_clearPendingInterrupt', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Event_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Compare_setEvent', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_3_Compare_setEvent', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Compare_setEventFromNow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='delta', quals=[], storage=[]
          TypeDecl: declname='delta', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_3_Compare_setEventFromNow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Timer_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_4_Capture_getEvent', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_4_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_4_Capture_default_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_4_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_4_Control_getControl', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_4_Control_getControl', quals=[]
        IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_4_Event_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_4_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_4_Compare_default_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_4_Compare_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_4_Timer_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_4_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_5_Capture_getEvent', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_5_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_5_Capture_default_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_5_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_5_Control_getControl', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_5_Control_getControl', quals=[]
        IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_5_Event_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_5_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_5_Compare_default_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_5_Compare_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_5_Timer_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_5_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_6_Capture_getEvent', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_6_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_6_Capture_default_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_6_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_6_Control_getControl', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_6_Control_getControl', quals=[]
        IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_6_Event_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_6_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_6_Compare_default_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_6_Compare_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_6_Timer_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_6_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_7_Capture_getEvent', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_7_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_7_Capture_default_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_7_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_7_Control_getControl', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_7_Control_getControl', quals=[]
        IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_7_Event_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_7_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_7_Compare_default_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_7_Compare_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_7_Timer_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_7_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_8_Capture_getEvent', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_8_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_8_Capture_default_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_8_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_8_Control_getControl', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_8_Control_getControl', quals=[]
        IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_8_Event_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_8_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_8_Compare_default_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_8_Compare_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_8_Timer_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_8_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_9_Capture_getEvent', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_9_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_9_Capture_default_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_9_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_9_Control_getControl', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_9_Control_getControl', quals=[]
        IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_9_Event_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_9_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_9_Compare_default_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_9_Compare_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_9_Timer_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_9_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='SchedulerBasicP_TaskBasic_postTask', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='arg_0x147bb38', quals=[], storage=[]
          TypeDecl: declname='arg_0x147bb38', quals=[]
            IdentifierType: names=['uint8_t']
      TypeDecl: declname='SchedulerBasicP_TaskBasic_postTask', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='SchedulerBasicP_TaskBasic_default_runTask', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='arg_0x147bb38', quals=[], storage=[]
          TypeDecl: declname='arg_0x147bb38', quals=[]
            IdentifierType: names=['uint8_t']
      TypeDecl: declname='SchedulerBasicP_TaskBasic_default_runTask', quals=[]
        IdentifierType: names=['void']
  Decl: name='SchedulerBasicP_Scheduler_init', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='SchedulerBasicP_Scheduler_init', quals=[]
        IdentifierType: names=['void']
  Decl: name='SchedulerBasicP_Scheduler_taskLoop', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='SchedulerBasicP_Scheduler_taskLoop', quals=[]
        IdentifierType: names=['void']
  Decl: name='SchedulerBasicP_Scheduler_runNextTask', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='SchedulerBasicP_Scheduler_runNextTask', quals=[]
        IdentifierType: names=['bool']
  Decl: name='McuSleepC_McuPowerOverride_default_lowestState', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='McuSleepC_McuPowerOverride_default_lowestState', quals=[]
        IdentifierType: names=['mcu_power_t']
  Decl: name='McuSleepC_McuSleep_sleep', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='McuSleepC_McuSleep_sleep', quals=[]
        IdentifierType: names=['void']
  Decl: name='BlinkC_Timer0_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='BlinkC_Timer0_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='BlinkC_Boot_booted', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='BlinkC_Boot_booted', quals=[]
        IdentifierType: names=['void']
  Decl: name='BlinkC_Timer1_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='BlinkC_Timer1_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='BlinkC_Timer2_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='BlinkC_Timer2_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='LedsP_Init_init', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='LedsP_Init_init', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='LedsP_Leds_led0Toggle', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='LedsP_Leds_led0Toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='LedsP_Leds_led1Toggle', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='LedsP_Leds_led1Toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='LedsP_Leds_led2Toggle', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='LedsP_Leds_led2Toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='HplMsp430GeneralIOP_36_IO_toggle', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='HplMsp430GeneralIOP_36_IO_toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='HplMsp430GeneralIOP_36_IO_makeOutput', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='HplMsp430GeneralIOP_36_IO_makeOutput', quals=[]
        IdentifierType: names=['void']
  Decl: name='HplMsp430GeneralIOP_36_IO_set', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='HplMsp430GeneralIOP_36_IO_set', quals=[]
        IdentifierType: names=['void']
  Decl: name='HplMsp430GeneralIOP_37_IO_toggle', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='HplMsp430GeneralIOP_37_IO_toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='HplMsp430GeneralIOP_37_IO_makeOutput', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='HplMsp430GeneralIOP_37_IO_makeOutput', quals=[]
        IdentifierType: names=['void']
  Decl: name='HplMsp430GeneralIOP_37_IO_set', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='HplMsp430GeneralIOP_37_IO_set', quals=[]
        IdentifierType: names=['void']
  Decl: name='HplMsp430GeneralIOP_38_IO_toggle', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='HplMsp430GeneralIOP_38_IO_toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='HplMsp430GeneralIOP_38_IO_makeOutput', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='HplMsp430GeneralIOP_38_IO_makeOutput', quals=[]
        IdentifierType: names=['void']
  Decl: name='HplMsp430GeneralIOP_38_IO_set', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='HplMsp430GeneralIOP_38_IO_set', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_0_GeneralIO_toggle', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_0_GeneralIO_toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_0_GeneralIO_makeOutput', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_0_GeneralIO_makeOutput', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_0_GeneralIO_set', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_0_GeneralIO_set', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_1_GeneralIO_toggle', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_1_GeneralIO_toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_1_GeneralIO_makeOutput', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_1_GeneralIO_makeOutput', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_1_GeneralIO_set', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_1_GeneralIO_set', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_2_GeneralIO_toggle', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_2_GeneralIO_toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_2_GeneralIO_makeOutput', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_2_GeneralIO_makeOutput', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_2_GeneralIO_set', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_2_GeneralIO_set', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430AlarmC_0_Msp430Compare_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430AlarmC_0_Msp430Compare_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430AlarmC_0_Msp430Timer_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430AlarmC_0_Msp430Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430AlarmC_0_Alarm_startAt', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='t0', quals=[], storage=[]
          TypeDecl: declname='t0', quals=[]
            IdentifierType: names=['Msp430AlarmC_0_Alarm_size_type']
        Decl: name='dt', quals=[], storage=[]
          TypeDecl: declname='dt', quals=[]
            IdentifierType: names=['Msp430AlarmC_0_Alarm_size_type']
      TypeDecl: declname='Msp430AlarmC_0_Alarm_startAt', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430AlarmC_0_Alarm_stop', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430AlarmC_0_Alarm_stop', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430AlarmC_0_Init_init', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430AlarmC_0_Init_init', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='Msp430CounterC_0_Msp430Timer_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430CounterC_0_Msp430Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430CounterC_0_Counter_get', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430CounterC_0_Counter_get', quals=[]
        IdentifierType: names=['Msp430CounterC_0_Counter_size_type']
  Decl: name='Msp430CounterC_0_Counter_isOverflowPending', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430CounterC_0_Counter_isOverflowPending', quals=[]
        IdentifierType: names=['bool']
  Decl: name='TransformCounterC_0_CounterFrom_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformCounterC_0_CounterFrom_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='TransformCounterC_0_Counter_get', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformCounterC_0_Counter_get', quals=[]
        IdentifierType: names=['TransformCounterC_0_Counter_size_type']
  Decl: name='TransformAlarmC_0_Alarm_getNow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformAlarmC_0_Alarm_getNow', quals=[]
        IdentifierType: names=['TransformAlarmC_0_Alarm_size_type']
  Decl: name='TransformAlarmC_0_Alarm_startAt', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='t0', quals=[], storage=[]
          TypeDecl: declname='t0', quals=[]
            IdentifierType: names=['TransformAlarmC_0_Alarm_size_type']
        Decl: name='dt', quals=[], storage=[]
          TypeDecl: declname='dt', quals=[]
            IdentifierType: names=['TransformAlarmC_0_Alarm_size_type']
      TypeDecl: declname='TransformAlarmC_0_Alarm_startAt', quals=[]
        IdentifierType: names=['void']
  Decl: name='TransformAlarmC_0_Alarm_getAlarm', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformAlarmC_0_Alarm_getAlarm', quals=[]
        IdentifierType: names=['TransformAlarmC_0_Alarm_size_type']
  Decl: name='TransformAlarmC_0_Alarm_stop', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformAlarmC_0_Alarm_stop', quals=[]
        IdentifierType: names=['void']
  Decl: name='TransformAlarmC_0_AlarmFrom_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformAlarmC_0_AlarmFrom_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='TransformAlarmC_0_Counter_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformAlarmC_0_Counter_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='AlarmToTimerC_0_fired_runTask', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='AlarmToTimerC_0_fired_runTask', quals=[]
        IdentifierType: names=['void']
  Decl: name='AlarmToTimerC_0_Alarm_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='AlarmToTimerC_0_Alarm_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='AlarmToTimerC_0_Timer_getNow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='AlarmToTimerC_0_Timer_getNow', quals=[]
        IdentifierType: names=['uint32_t']
  Decl: name='AlarmToTimerC_0_Timer_startOneShotAt', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='t0', quals=[], storage=[]
          TypeDecl: declname='t0', quals=[]
            IdentifierType: names=['uint32_t']
        Decl: name='dt', quals=[], storage=[]
          TypeDecl: declname='dt', quals=[]
            IdentifierType: names=['uint32_t']
      TypeDecl: declname='AlarmToTimerC_0_Timer_startOneShotAt', quals=[]
        IdentifierType: names=['void']
  Decl: name='AlarmToTimerC_0_Timer_stop', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='AlarmToTimerC_0_Timer_stop', quals=[]
        IdentifierType: names=['void']
  Decl: name='VirtualizeTimerC_0_updateFromTimer_runTask', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='VirtualizeTimerC_0_updateFromTimer_runTask', quals=[]
        IdentifierType: names=['void']
  Decl: name='VirtualizeTimerC_0_TimerFrom_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='VirtualizeTimerC_0_TimerFrom_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='VirtualizeTimerC_0_Timer_default_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='arg_0x18a3ea0', quals=[], storage=[]
          TypeDecl: declname='arg_0x18a3ea0', quals=[]
            IdentifierType: names=['uint8_t']
      TypeDecl: declname='VirtualizeTimerC_0_Timer_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='VirtualizeTimerC_0_Timer_startPeriodic', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='arg_0x18a3ea0', quals=[], storage=[]
          TypeDecl: declname='arg_0x18a3ea0', quals=[]
            IdentifierType: names=['uint8_t']
        Decl: name='dt', quals=[], storage=[]
          TypeDecl: declname='dt', quals=[]
            IdentifierType: names=['uint32_t']
      TypeDecl: declname='VirtualizeTimerC_0_Timer_startPeriodic', quals=[]
        IdentifierType: names=['void']
  Decl: name='CounterToLocalTimeC_0_Counter_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='CounterToLocalTimeC_0_Counter_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='PlatformP_MoteInit_init', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='PlatformP_MoteInit_init', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='PlatformP_MoteClockInit_init', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='PlatformP_MoteClockInit_init', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='PlatformP_LedsInit_init', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='PlatformP_LedsInit_init', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='PlatformP_Init_init', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='PlatformP_Init_init', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='MotePlatformC_uwait', quals=[], storage=['__inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='u', quals=[], storage=[]
          TypeDecl: declname='u', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='MotePlatformC_uwait', quals=[]
        IdentifierType: names=['void']
  Decl: name='MotePlatformC_TOSH_wait', quals=[], storage=['__inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='MotePlatformC_TOSH_wait', quals=[]
        IdentifierType: names=['void']
  Decl: name='MotePlatformC_TOSH_FLASH_M25P_DP_bit', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='set', quals=[], storage=[]
          TypeDecl: declname='set', quals=[]
            IdentifierType: names=['bool']
      TypeDecl: declname='MotePlatformC_TOSH_FLASH_M25P_DP_bit', quals=[]
        IdentifierType: names=['void']
  Decl: name='MotePlatformC_TOSH_FLASH_M25P_DP', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='MotePlatformC_TOSH_FLASH_M25P_DP', quals=[]
        IdentifierType: names=['void']
  Decl: name='MotePlatformC_Init_init', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='MotePlatformC_Init_init', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='Msp430ClockP_Msp430ClockInit_initTimerB', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_initTimerB', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Msp430ClockInit_initTimerA', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_initTimerA', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Msp430ClockInit_setupDcoCalibrate', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_setupDcoCalibrate', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Msp430ClockInit_initClocks', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_initClocks', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_IE1@"0x0000"', quals=['volatile'], storage=['static']
    TypeDecl: declname='Msp430ClockP_IE1@"0x0000"', quals=['volatile']
      IdentifierType: names=['uint8_t']
  Decl: name='Msp430ClockP_TA0CTL@"0x0160"', quals=['volatile'], storage=['static']
    TypeDecl: declname='Msp430ClockP_TA0CTL@"0x0160"', quals=['volatile']
      IdentifierType: names=['uint16_t']
  Decl: name='Msp430ClockP_TA0IV@"0x012E"', quals=['volatile'], storage=['static']
    TypeDecl: declname='Msp430ClockP_TA0IV@"0x012E"', quals=['volatile']
      IdentifierType: names=['uint16_t']
  Decl: name='Msp430ClockP_TBCTL@"0x0180"', quals=['volatile'], storage=['static']
    TypeDecl: declname='Msp430ClockP_TBCTL@"0x0180"', quals=['volatile']
      IdentifierType: names=['uint16_t']
  Decl: name='Msp430ClockP_TBIV@"0x011E"', quals=['volatile'], storage=['static']
    TypeDecl: declname='Msp430ClockP_TBIV@"0x011E"', quals=['volatile']
      IdentifierType: names=['uint16_t']
  Decl: name=None, quals=[], storage=[]
    Enum: name='Msp430ClockP___nesc_unnamed4268'
      EnumeratorList: 
        Enumerator: name='Msp430ClockP_ACLK_CALIB_PERIOD'
          Constant: type='int', value='8'
        Enumerator: name='Msp430ClockP_TARGET_DCO_DELTA'
          BinaryOp: op='*'
            BinaryOp: op='/'
              Constant: type='int', value='4096'
              Constant: type='int', value='32'
            ID: name='Msp430ClockP_ACLK_CALIB_PERIOD'
  Decl: name='Msp430ClockP_Msp430ClockInit_defaultSetupDcoCalibrate', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_defaultSetupDcoCalibrate', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Msp430ClockInit_defaultInitClocks', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_defaultInitClocks', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Msp430ClockInit_defaultInitTimerA', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_defaultInitTimerA', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Msp430ClockInit_defaultInitTimerB', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_defaultInitTimerB', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Msp430ClockInit_default_setupDcoCalibrate', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_default_setupDcoCalibrate', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Msp430ClockInit_default_initClocks', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_default_initClocks', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Msp430ClockInit_default_initTimerA', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_default_initTimerA', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Msp430ClockInit_default_initTimerB', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Msp430ClockInit_default_initTimerB', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_startTimerA', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_startTimerA', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_startTimerB', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_startTimerB', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_set_dco_calib', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='calib', quals=[], storage=[]
          TypeDecl: declname='calib', quals=[]
            IdentifierType: names=['int']
      TypeDecl: declname='Msp430ClockP_set_dco_calib', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_test_calib_busywait_delta', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='calib', quals=[], storage=[]
          TypeDecl: declname='calib', quals=[]
            IdentifierType: names=['int']
      TypeDecl: declname='Msp430ClockP_test_calib_busywait_delta', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430ClockP_busyCalibrateDco', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_busyCalibrateDco', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430ClockP_Init_init', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430ClockP_Init_init', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='Msp430TimerP_0_Event_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='arg_0x1561800', quals=[], storage=[]
          TypeDecl: declname='arg_0x1561800', quals=[]
            IdentifierType: names=['uint8_t']
      TypeDecl: declname='Msp430TimerP_0_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_0_Timer_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerP_0_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_0_VectorTimerX0_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerP_0_VectorTimerX0_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_0_VectorTimerX1_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerP_0_VectorTimerX1_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_0_Overflow_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerP_0_Overflow_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_0_Event_default_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='n', quals=[], storage=[]
          TypeDecl: declname='n', quals=[]
            IdentifierType: names=['uint8_t']
      TypeDecl: declname='Msp430TimerP_0_Event_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_1_Event_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='arg_0x1561800', quals=[], storage=[]
          TypeDecl: declname='arg_0x1561800', quals=[]
            IdentifierType: names=['uint8_t']
      TypeDecl: declname='Msp430TimerP_1_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_1_Timer_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerP_1_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_1_Timer_get', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerP_1_Timer_get', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerP_1_Timer_isOverflowPending', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerP_1_Timer_isOverflowPending', quals=[]
        IdentifierType: names=['bool']
  Decl: name='Msp430TimerP_1_VectorTimerX0_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerP_1_VectorTimerX0_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_1_VectorTimerX1_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerP_1_VectorTimerX1_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_1_Overflow_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerP_1_Overflow_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerP_1_Event_default_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='n', quals=[], storage=[]
          TypeDecl: declname='n', quals=[]
            IdentifierType: names=['uint8_t']
      TypeDecl: declname='Msp430TimerP_1_Event_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_0_Capture_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_0_Capture_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_0_Compare_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_0_Compare_fired', quals=[]
        IdentifierType: names=['void']
  Typedef: name='Msp430TimerCapComP_0_cc_t', quals=[], storage=['typedef']
    TypeDecl: declname='Msp430TimerCapComP_0_cc_t', quals=[]
      IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_0_int2CC', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='x', quals=[], storage=[]
          TypeDecl: declname='x', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_0_int2CC', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_0_cc_t']
  Decl: name='Msp430TimerCapComP_0_Control_getControl', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_0_Control_getControl', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_0_cc_t']
  Decl: name='Msp430TimerCapComP_0_Capture_getEvent', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_0_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_0_Event_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_0_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_0_Capture_default_captured', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='n', quals=[], storage=[]
          TypeDecl: declname='n', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_0_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_0_Compare_default_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_0_Compare_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_0_Timer_overflow', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_0_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_1_Capture_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_1_Capture_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_1_Compare_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_1_Compare_fired', quals=[]
        IdentifierType: names=['void']
  Typedef: name='Msp430TimerCapComP_1_cc_t', quals=[], storage=['typedef']
    TypeDecl: declname='Msp430TimerCapComP_1_cc_t', quals=[]
      IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_1_int2CC', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='x', quals=[], storage=[]
          TypeDecl: declname='x', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_1_int2CC', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_1_cc_t']
  Decl: name='Msp430TimerCapComP_1_Control_getControl', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_1_Control_getControl', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_1_cc_t']
  Decl: name='Msp430TimerCapComP_1_Capture_getEvent', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_1_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_1_Event_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_1_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_1_Capture_default_captured', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='n', quals=[], storage=[]
          TypeDecl: declname='n', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_1_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_1_Compare_default_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_1_Compare_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_1_Timer_overflow', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_1_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_2_Capture_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_2_Capture_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_2_Compare_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_2_Compare_fired', quals=[]
        IdentifierType: names=['void']
  Typedef: name='Msp430TimerCapComP_2_cc_t', quals=[], storage=['typedef']
    TypeDecl: declname='Msp430TimerCapComP_2_cc_t', quals=[]
      IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_2_int2CC', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='x', quals=[], storage=[]
          TypeDecl: declname='x', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_2_int2CC', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_2_cc_t']
  Decl: name='Msp430TimerCapComP_2_Control_getControl', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_2_Control_getControl', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_2_cc_t']
  Decl: name='Msp430TimerCapComP_2_Capture_getEvent', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_2_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_2_Event_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_2_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_2_Capture_default_captured', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='n', quals=[], storage=[]
          TypeDecl: declname='n', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_2_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_2_Compare_default_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_2_Compare_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_2_Timer_overflow', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_2_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Capture_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_3_Capture_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Compare_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_Compare_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Timer_get', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_Timer_get', quals=[]
        IdentifierType: names=['uint16_t']
  Typedef: name='Msp430TimerCapComP_3_cc_t', quals=[], storage=['typedef']
    TypeDecl: declname='Msp430TimerCapComP_3_cc_t', quals=[]
      IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_3_CC2int', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='x', quals=[], storage=[]
          TypeDecl: declname='x', quals=[]
            IdentifierType: names=['Msp430TimerCapComP_3_cc_t']
      TypeDecl: declname='Msp430TimerCapComP_3_CC2int', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_3_int2CC', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='x', quals=[], storage=[]
          TypeDecl: declname='x', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_3_int2CC', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_3_cc_t']
  Decl: name='Msp430TimerCapComP_3_compareControl', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_compareControl', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_3_Control_getControl', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_Control_getControl', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_3_cc_t']
  Decl: name='Msp430TimerCapComP_3_Control_clearPendingInterrupt', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_Control_clearPendingInterrupt', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Control_setControlAsCompare', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_Control_setControlAsCompare', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Control_enableEvents', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_Control_enableEvents', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Control_disableEvents', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_Control_disableEvents', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Capture_getEvent', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_3_Compare_setEvent', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='x', quals=[], storage=[]
          TypeDecl: declname='x', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_3_Compare_setEvent', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Compare_setEventFromNow', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='x', quals=[], storage=[]
          TypeDecl: declname='x', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_3_Compare_setEventFromNow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Event_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Capture_default_captured', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='n', quals=[], storage=[]
          TypeDecl: declname='n', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_3_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_3_Timer_overflow', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_3_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_4_Capture_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_4_Capture_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_4_Compare_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_4_Compare_fired', quals=[]
        IdentifierType: names=['void']
  Typedef: name='Msp430TimerCapComP_4_cc_t', quals=[], storage=['typedef']
    TypeDecl: declname='Msp430TimerCapComP_4_cc_t', quals=[]
      IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_4_int2CC', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='x', quals=[], storage=[]
          TypeDecl: declname='x', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_4_int2CC', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_4_cc_t']
  Decl: name='Msp430TimerCapComP_4_Control_getControl', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_4_Control_getControl', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_4_cc_t']
  Decl: name='Msp430TimerCapComP_4_Capture_getEvent', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_4_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_4_Event_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_4_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_4_Capture_default_captured', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='n', quals=[], storage=[]
          TypeDecl: declname='n', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_4_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_4_Compare_default_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_4_Compare_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_4_Timer_overflow', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_4_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_5_Capture_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_5_Capture_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_5_Compare_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_5_Compare_fired', quals=[]
        IdentifierType: names=['void']
  Typedef: name='Msp430TimerCapComP_5_cc_t', quals=[], storage=['typedef']
    TypeDecl: declname='Msp430TimerCapComP_5_cc_t', quals=[]
      IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_5_int2CC', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='x', quals=[], storage=[]
          TypeDecl: declname='x', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_5_int2CC', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_5_cc_t']
  Decl: name='Msp430TimerCapComP_5_Control_getControl', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_5_Control_getControl', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_5_cc_t']
  Decl: name='Msp430TimerCapComP_5_Capture_getEvent', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_5_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_5_Event_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_5_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_5_Capture_default_captured', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='n', quals=[], storage=[]
          TypeDecl: declname='n', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_5_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_5_Compare_default_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_5_Compare_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_5_Timer_overflow', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_5_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_6_Capture_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_6_Capture_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_6_Compare_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_6_Compare_fired', quals=[]
        IdentifierType: names=['void']
  Typedef: name='Msp430TimerCapComP_6_cc_t', quals=[], storage=['typedef']
    TypeDecl: declname='Msp430TimerCapComP_6_cc_t', quals=[]
      IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_6_int2CC', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='x', quals=[], storage=[]
          TypeDecl: declname='x', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_6_int2CC', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_6_cc_t']
  Decl: name='Msp430TimerCapComP_6_Control_getControl', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_6_Control_getControl', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_6_cc_t']
  Decl: name='Msp430TimerCapComP_6_Capture_getEvent', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_6_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_6_Event_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_6_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_6_Capture_default_captured', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='n', quals=[], storage=[]
          TypeDecl: declname='n', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_6_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_6_Compare_default_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_6_Compare_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_6_Timer_overflow', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_6_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_7_Capture_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_7_Capture_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_7_Compare_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_7_Compare_fired', quals=[]
        IdentifierType: names=['void']
  Typedef: name='Msp430TimerCapComP_7_cc_t', quals=[], storage=['typedef']
    TypeDecl: declname='Msp430TimerCapComP_7_cc_t', quals=[]
      IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_7_int2CC', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='x', quals=[], storage=[]
          TypeDecl: declname='x', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_7_int2CC', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_7_cc_t']
  Decl: name='Msp430TimerCapComP_7_Control_getControl', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_7_Control_getControl', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_7_cc_t']
  Decl: name='Msp430TimerCapComP_7_Capture_getEvent', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_7_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_7_Event_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_7_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_7_Capture_default_captured', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='n', quals=[], storage=[]
          TypeDecl: declname='n', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_7_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_7_Compare_default_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_7_Compare_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_7_Timer_overflow', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_7_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_8_Capture_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_8_Capture_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_8_Compare_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_8_Compare_fired', quals=[]
        IdentifierType: names=['void']
  Typedef: name='Msp430TimerCapComP_8_cc_t', quals=[], storage=['typedef']
    TypeDecl: declname='Msp430TimerCapComP_8_cc_t', quals=[]
      IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_8_int2CC', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='x', quals=[], storage=[]
          TypeDecl: declname='x', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_8_int2CC', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_8_cc_t']
  Decl: name='Msp430TimerCapComP_8_Control_getControl', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_8_Control_getControl', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_8_cc_t']
  Decl: name='Msp430TimerCapComP_8_Capture_getEvent', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_8_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_8_Event_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_8_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_8_Capture_default_captured', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='n', quals=[], storage=[]
          TypeDecl: declname='n', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_8_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_8_Compare_default_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_8_Compare_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_8_Timer_overflow', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_8_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_9_Capture_captured', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_9_Capture_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_9_Compare_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_9_Compare_fired', quals=[]
        IdentifierType: names=['void']
  Typedef: name='Msp430TimerCapComP_9_cc_t', quals=[], storage=['typedef']
    TypeDecl: declname='Msp430TimerCapComP_9_cc_t', quals=[]
      IdentifierType: names=['msp430_compare_control_t']
  Decl: name='Msp430TimerCapComP_9_int2CC', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='x', quals=[], storage=[]
          TypeDecl: declname='x', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_9_int2CC', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_9_cc_t']
  Decl: name='Msp430TimerCapComP_9_Control_getControl', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_9_Control_getControl', quals=[]
        IdentifierType: names=['Msp430TimerCapComP_9_cc_t']
  Decl: name='Msp430TimerCapComP_9_Capture_getEvent', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_9_Capture_getEvent', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430TimerCapComP_9_Event_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_9_Event_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_9_Capture_default_captured', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='n', quals=[], storage=[]
          TypeDecl: declname='n', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430TimerCapComP_9_Capture_default_captured', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_9_Compare_default_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_9_Compare_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCapComP_9_Timer_overflow', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCapComP_9_Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCommonP_VectorTimerB1_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCommonP_VectorTimerB1_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCommonP_VectorTimerA0_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCommonP_VectorTimerA0_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCommonP_VectorTimerA1_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCommonP_VectorTimerA1_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430TimerCommonP_VectorTimerB0_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430TimerCommonP_VectorTimerB0_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='sig_TIMERA0_VECTOR', quals=[], storage=[]
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='sig_TIMERA0_VECTOR', quals=[]
        IdentifierType: names=['void']
  Decl: name='sig_TIMERA1_VECTOR', quals=[], storage=[]
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='sig_TIMERA1_VECTOR', quals=[]
        IdentifierType: names=['void']
  Decl: name='sig_TIMERB0_VECTOR', quals=[], storage=[]
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='sig_TIMERB0_VECTOR', quals=[]
        IdentifierType: names=['void']
  Decl: name='sig_TIMERB1_VECTOR', quals=[], storage=[]
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='sig_TIMERB1_VECTOR', quals=[]
        IdentifierType: names=['void']
  Decl: name='RealMainP_SoftwareInit_init', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='RealMainP_SoftwareInit_init', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='RealMainP_Boot_booted', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='RealMainP_Boot_booted', quals=[]
        IdentifierType: names=['void']
  Decl: name='RealMainP_PlatformInit_init', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='RealMainP_PlatformInit_init', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='RealMainP_Scheduler_init', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='RealMainP_Scheduler_init', quals=[]
        IdentifierType: names=['void']
  Decl: name='RealMainP_Scheduler_taskLoop', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='RealMainP_Scheduler_taskLoop', quals=[]
        IdentifierType: names=['void']
  Decl: name='RealMainP_Scheduler_runNextTask', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='RealMainP_Scheduler_runNextTask', quals=[]
        IdentifierType: names=['bool']
  Decl: name='main', quals=[], storage=[]
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='main', quals=[]
        IdentifierType: names=['int']
  Decl: name='SchedulerBasicP_TaskBasic_runTask', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='arg_0x147bb38', quals=[], storage=[]
          TypeDecl: declname='arg_0x147bb38', quals=[]
            IdentifierType: names=['uint8_t']
      TypeDecl: declname='SchedulerBasicP_TaskBasic_runTask', quals=[]
        IdentifierType: names=['void']
  Decl: name='SchedulerBasicP_McuSleep_sleep', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='SchedulerBasicP_McuSleep_sleep', quals=[]
        IdentifierType: names=['void']
  Decl: name=None, quals=[], storage=[]
    Enum: name='SchedulerBasicP___nesc_unnamed4269'
      EnumeratorList: 
        Enumerator: name='SchedulerBasicP_NUM_TASKS'
          Constant: type='int', value='2U'
        Enumerator: name='SchedulerBasicP_NO_TASK'
          Constant: type='int', value='255'
  Decl: name='SchedulerBasicP_m_head', quals=[], storage=[]
    TypeDecl: declname='SchedulerBasicP_m_head', quals=[]
      IdentifierType: names=['uint8_t']
  Decl: name='SchedulerBasicP_m_tail', quals=[], storage=[]
    TypeDecl: declname='SchedulerBasicP_m_tail', quals=[]
      IdentifierType: names=['uint8_t']
  Decl: name='SchedulerBasicP_m_next', quals=[], storage=[]
    ArrayDecl: 
      TypeDecl: declname='SchedulerBasicP_m_next', quals=[]
        IdentifierType: names=['uint8_t']
      ID: name='SchedulerBasicP_NUM_TASKS'
  Decl: name='SchedulerBasicP_popTask', quals=[], storage=['__inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='SchedulerBasicP_popTask', quals=[]
        IdentifierType: names=['uint8_t']
  Decl: name='SchedulerBasicP_isWaiting', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='id', quals=[], storage=[]
          TypeDecl: declname='id', quals=[]
            IdentifierType: names=['uint8_t']
      TypeDecl: declname='SchedulerBasicP_isWaiting', quals=[]
        IdentifierType: names=['bool']
  Decl: name='SchedulerBasicP_pushTask', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='id', quals=[], storage=[]
          TypeDecl: declname='id', quals=[]
            IdentifierType: names=['uint8_t']
      TypeDecl: declname='SchedulerBasicP_pushTask', quals=[]
        IdentifierType: names=['bool']
  Decl: name='SchedulerBasicP_Scheduler_init', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='SchedulerBasicP_Scheduler_init', quals=[]
        IdentifierType: names=['void']
  Decl: name='SchedulerBasicP_Scheduler_runNextTask', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='SchedulerBasicP_Scheduler_runNextTask', quals=[]
        IdentifierType: names=['bool']
  Decl: name='SchedulerBasicP_Scheduler_taskLoop', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='SchedulerBasicP_Scheduler_taskLoop', quals=[]
        IdentifierType: names=['void']
  Decl: name='SchedulerBasicP_TaskBasic_postTask', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='id', quals=[], storage=[]
          TypeDecl: declname='id', quals=[]
            IdentifierType: names=['uint8_t']
      TypeDecl: declname='SchedulerBasicP_TaskBasic_postTask', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='SchedulerBasicP_TaskBasic_default_runTask', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='id', quals=[], storage=[]
          TypeDecl: declname='id', quals=[]
            IdentifierType: names=['uint8_t']
      TypeDecl: declname='SchedulerBasicP_TaskBasic_default_runTask', quals=[]
        IdentifierType: names=['void']
  Decl: name='McuSleepC_McuPowerOverride_lowestState', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='McuSleepC_McuPowerOverride_lowestState', quals=[]
        IdentifierType: names=['mcu_power_t']
  Decl: name='McuSleepC_dirty', quals=[], storage=[]
    TypeDecl: declname='McuSleepC_dirty', quals=[]
      IdentifierType: names=['bool']
    ID: name='TRUE'
  Decl: name='McuSleepC_powerState', quals=[], storage=[]
    TypeDecl: declname='McuSleepC_powerState', quals=[]
      IdentifierType: names=['mcu_power_t']
    ID: name='MSP430_POWER_ACTIVE'
  Decl: name='McuSleepC_msp430PowerBits', quals=['const'], storage=[]
    ArrayDecl: 
      TypeDecl: declname='McuSleepC_msp430PowerBits', quals=['const']
        IdentifierType: names=['uint16_t']
      BinaryOp: op='+'
        ID: name='MSP430_POWER_LPM4'
        Constant: type='int', value='1'
    ExprList: 
      Constant: type='int', value='0'
      Constant: type='int', value='0x0010'
      BinaryOp: op='+'
        Constant: type='int', value='0x0040'
        Constant: type='int', value='0x0010'
      BinaryOp: op='+'
        Constant: type='int', value='0x0080'
        Constant: type='int', value='0x0010'
      BinaryOp: op='+'
        BinaryOp: op='+'
          Constant: type='int', value='0x0080'
          Constant: type='int', value='0x0040'
        Constant: type='int', value='0x0010'
      BinaryOp: op='+'
        BinaryOp: op='+'
          BinaryOp: op='+'
            Constant: type='int', value='0x0080'
            Constant: type='int', value='0x0040'
          Constant: type='int', value='0x0020'
        Constant: type='int', value='0x0010'
  Decl: name='McuSleepC_getPowerState', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='McuSleepC_getPowerState', quals=[]
        IdentifierType: names=['mcu_power_t']
  Decl: name='McuSleepC_computePowerState', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='McuSleepC_computePowerState', quals=[]
        IdentifierType: names=['void']
  Decl: name='McuSleepC_McuSleep_sleep', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='McuSleepC_McuSleep_sleep', quals=[]
        IdentifierType: names=['void']
  Decl: name='McuSleepC_McuPowerOverride_default_lowestState', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='McuSleepC_McuPowerOverride_default_lowestState', quals=[]
        IdentifierType: names=['mcu_power_t']
  Decl: name='BlinkC_Timer0_startPeriodic', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='dt', quals=[], storage=[]
          TypeDecl: declname='dt', quals=[]
            IdentifierType: names=['uint32_t']
      TypeDecl: declname='BlinkC_Timer0_startPeriodic', quals=[]
        IdentifierType: names=['void']
  Decl: name='BlinkC_Timer1_startPeriodic', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='dt', quals=[], storage=[]
          TypeDecl: declname='dt', quals=[]
            IdentifierType: names=['uint32_t']
      TypeDecl: declname='BlinkC_Timer1_startPeriodic', quals=[]
        IdentifierType: names=['void']
  Decl: name='BlinkC_Leds_led0Toggle', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='BlinkC_Leds_led0Toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='BlinkC_Leds_led1Toggle', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='BlinkC_Leds_led1Toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='BlinkC_Leds_led2Toggle', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='BlinkC_Leds_led2Toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='BlinkC_Timer2_startPeriodic', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='dt', quals=[], storage=[]
          TypeDecl: declname='dt', quals=[]
            IdentifierType: names=['uint32_t']
      TypeDecl: declname='BlinkC_Timer2_startPeriodic', quals=[]
        IdentifierType: names=['void']
  Decl: name='BlinkC_Boot_booted', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='BlinkC_Boot_booted', quals=[]
        IdentifierType: names=['void']
  Decl: name='BlinkC_Timer0_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='BlinkC_Timer0_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='BlinkC_Timer1_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='BlinkC_Timer1_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='BlinkC_Timer2_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='BlinkC_Timer2_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='LedsP_Led0_toggle', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='LedsP_Led0_toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='LedsP_Led0_makeOutput', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='LedsP_Led0_makeOutput', quals=[]
        IdentifierType: names=['void']
  Decl: name='LedsP_Led0_set', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='LedsP_Led0_set', quals=[]
        IdentifierType: names=['void']
  Decl: name='LedsP_Led1_toggle', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='LedsP_Led1_toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='LedsP_Led1_makeOutput', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='LedsP_Led1_makeOutput', quals=[]
        IdentifierType: names=['void']
  Decl: name='LedsP_Led1_set', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='LedsP_Led1_set', quals=[]
        IdentifierType: names=['void']
  Decl: name='LedsP_Led2_toggle', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='LedsP_Led2_toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='LedsP_Led2_makeOutput', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='LedsP_Led2_makeOutput', quals=[]
        IdentifierType: names=['void']
  Decl: name='LedsP_Led2_set', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='LedsP_Led2_set', quals=[]
        IdentifierType: names=['void']
  Decl: name='LedsP_Init_init', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='LedsP_Init_init', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='LedsP_Leds_led0Toggle', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='LedsP_Leds_led0Toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='LedsP_Leds_led1Toggle', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='LedsP_Leds_led1Toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='LedsP_Leds_led2Toggle', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='LedsP_Leds_led2Toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='HplMsp430GeneralIOP_36_IO_set', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='HplMsp430GeneralIOP_36_IO_set', quals=[]
        IdentifierType: names=['void']
  Decl: name='HplMsp430GeneralIOP_36_IO_toggle', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='HplMsp430GeneralIOP_36_IO_toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='HplMsp430GeneralIOP_36_IO_makeOutput', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='HplMsp430GeneralIOP_36_IO_makeOutput', quals=[]
        IdentifierType: names=['void']
  Decl: name='HplMsp430GeneralIOP_37_IO_set', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='HplMsp430GeneralIOP_37_IO_set', quals=[]
        IdentifierType: names=['void']
  Decl: name='HplMsp430GeneralIOP_37_IO_toggle', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='HplMsp430GeneralIOP_37_IO_toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='HplMsp430GeneralIOP_37_IO_makeOutput', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='HplMsp430GeneralIOP_37_IO_makeOutput', quals=[]
        IdentifierType: names=['void']
  Decl: name='HplMsp430GeneralIOP_38_IO_set', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='HplMsp430GeneralIOP_38_IO_set', quals=[]
        IdentifierType: names=['void']
  Decl: name='HplMsp430GeneralIOP_38_IO_toggle', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='HplMsp430GeneralIOP_38_IO_toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='HplMsp430GeneralIOP_38_IO_makeOutput', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='HplMsp430GeneralIOP_38_IO_makeOutput', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_0_HplGeneralIO_toggle', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_0_HplGeneralIO_toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_0_HplGeneralIO_makeOutput', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_0_HplGeneralIO_makeOutput', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_0_HplGeneralIO_set', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_0_HplGeneralIO_set', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_0_GeneralIO_set', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_0_GeneralIO_set', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_0_GeneralIO_toggle', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_0_GeneralIO_toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_0_GeneralIO_makeOutput', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_0_GeneralIO_makeOutput', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_1_HplGeneralIO_toggle', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_1_HplGeneralIO_toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_1_HplGeneralIO_makeOutput', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_1_HplGeneralIO_makeOutput', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_1_HplGeneralIO_set', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_1_HplGeneralIO_set', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_1_GeneralIO_set', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_1_GeneralIO_set', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_1_GeneralIO_toggle', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_1_GeneralIO_toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_1_GeneralIO_makeOutput', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_1_GeneralIO_makeOutput', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_2_HplGeneralIO_toggle', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_2_HplGeneralIO_toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_2_HplGeneralIO_makeOutput', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_2_HplGeneralIO_makeOutput', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_2_HplGeneralIO_set', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_2_HplGeneralIO_set', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_2_GeneralIO_set', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_2_GeneralIO_set', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_2_GeneralIO_toggle', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_2_GeneralIO_toggle', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430GpioC_2_GeneralIO_makeOutput', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430GpioC_2_GeneralIO_makeOutput', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430AlarmC_0_Msp430Compare_setEvent', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='time', quals=[], storage=[]
          TypeDecl: declname='time', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430AlarmC_0_Msp430Compare_setEvent', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430AlarmC_0_Msp430Compare_setEventFromNow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='delta', quals=[], storage=[]
          TypeDecl: declname='delta', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430AlarmC_0_Msp430Compare_setEventFromNow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430AlarmC_0_Msp430Timer_get', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430AlarmC_0_Msp430Timer_get', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430AlarmC_0_Alarm_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430AlarmC_0_Alarm_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430AlarmC_0_Msp430TimerControl_enableEvents', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430AlarmC_0_Msp430TimerControl_enableEvents', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430AlarmC_0_Msp430TimerControl_setControlAsCompare', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430AlarmC_0_Msp430TimerControl_setControlAsCompare', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430AlarmC_0_Msp430TimerControl_disableEvents', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430AlarmC_0_Msp430TimerControl_disableEvents', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430AlarmC_0_Msp430TimerControl_clearPendingInterrupt', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430AlarmC_0_Msp430TimerControl_clearPendingInterrupt', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430AlarmC_0_Init_init', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430AlarmC_0_Init_init', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='Msp430AlarmC_0_Alarm_stop', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430AlarmC_0_Alarm_stop', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430AlarmC_0_Msp430Compare_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430AlarmC_0_Msp430Compare_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430AlarmC_0_Alarm_startAt', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='t0', quals=[], storage=[]
          TypeDecl: declname='t0', quals=[]
            IdentifierType: names=['uint16_t']
        Decl: name='dt', quals=[], storage=[]
          TypeDecl: declname='dt', quals=[]
            IdentifierType: names=['uint16_t']
      TypeDecl: declname='Msp430AlarmC_0_Alarm_startAt', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430AlarmC_0_Msp430Timer_overflow', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430AlarmC_0_Msp430Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430CounterC_0_Msp430Timer_get', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430CounterC_0_Msp430Timer_get', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430CounterC_0_Msp430Timer_isOverflowPending', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430CounterC_0_Msp430Timer_isOverflowPending', quals=[]
        IdentifierType: names=['bool']
  Decl: name='Msp430CounterC_0_Counter_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430CounterC_0_Counter_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='Msp430CounterC_0_Counter_get', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430CounterC_0_Counter_get', quals=[]
        IdentifierType: names=['uint16_t']
  Decl: name='Msp430CounterC_0_Counter_isOverflowPending', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430CounterC_0_Counter_isOverflowPending', quals=[]
        IdentifierType: names=['bool']
  Decl: name='Msp430CounterC_0_Msp430Timer_overflow', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='Msp430CounterC_0_Msp430Timer_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='TransformCounterC_0_CounterFrom_get', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformCounterC_0_CounterFrom_get', quals=[]
        IdentifierType: names=['TransformCounterC_0_CounterFrom_size_type']
  Decl: name='TransformCounterC_0_CounterFrom_isOverflowPending', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformCounterC_0_CounterFrom_isOverflowPending', quals=[]
        IdentifierType: names=['bool']
  Decl: name='TransformCounterC_0_Counter_overflow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformCounterC_0_Counter_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='TransformCounterC_0_m_upper', quals=[], storage=[]
    TypeDecl: declname='TransformCounterC_0_m_upper', quals=[]
      IdentifierType: names=['TransformCounterC_0_upper_count_type']
  Decl: name=None, quals=[], storage=[]
    Enum: name='TransformCounterC_0___nesc_unnamed4270'
      EnumeratorList: 
        Enumerator: name='TransformCounterC_0_LOW_SHIFT_RIGHT'
          Constant: type='int', value='5'
        Enumerator: name='TransformCounterC_0_HIGH_SHIFT_LEFT'
          BinaryOp: op='-'
            BinaryOp: op='*'
              Constant: type='int', value='8'
              UnaryOp: op='sizeof'
                Typename: quals=[]
                  TypeDecl: declname=None, quals=[]
                    IdentifierType: names=['TransformCounterC_0_from_size_type']
            ID: name='TransformCounterC_0_LOW_SHIFT_RIGHT'
        Enumerator: name='TransformCounterC_0_NUM_UPPER_BITS'
          BinaryOp: op='+'
            BinaryOp: op='-'
              BinaryOp: op='*'
                Constant: type='int', value='8'
                UnaryOp: op='sizeof'
                  Typename: quals=[]
                    TypeDecl: declname=None, quals=[]
                      IdentifierType: names=['TransformCounterC_0_to_size_type']
              BinaryOp: op='*'
                Constant: type='int', value='8'
                UnaryOp: op='sizeof'
                  Typename: quals=[]
                    TypeDecl: declname=None, quals=[]
                      IdentifierType: names=['TransformCounterC_0_from_size_type']
            Constant: type='int', value='5'
        Enumerator: name='TransformCounterC_0_OVERFLOW_MASK'
          TernaryOp: 
            ID: name='TransformCounterC_0_NUM_UPPER_BITS'
            BinaryOp: op='-'
              BinaryOp: op='<<'
                Cast: 
                  Typename: quals=[]
                    TypeDecl: declname=None, quals=[]
                      IdentifierType: names=['TransformCounterC_0_upper_count_type']
                  Constant: type='int', value='2'
                BinaryOp: op='-'
                  ID: name='TransformCounterC_0_NUM_UPPER_BITS'
                  Constant: type='int', value='1'
              Constant: type='int', value='1'
            Constant: type='int', value='0'
  Decl: name='TransformCounterC_0_Counter_get', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformCounterC_0_Counter_get', quals=[]
        IdentifierType: names=['TransformCounterC_0_to_size_type']
  Decl: name='TransformCounterC_0_CounterFrom_overflow', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformCounterC_0_CounterFrom_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='TransformAlarmC_0_Alarm_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformAlarmC_0_Alarm_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='TransformAlarmC_0_AlarmFrom_startAt', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='t0', quals=[], storage=[]
          TypeDecl: declname='t0', quals=[]
            IdentifierType: names=['TransformAlarmC_0_AlarmFrom_size_type']
        Decl: name='dt', quals=[], storage=[]
          TypeDecl: declname='dt', quals=[]
            IdentifierType: names=['TransformAlarmC_0_AlarmFrom_size_type']
      TypeDecl: declname='TransformAlarmC_0_AlarmFrom_startAt', quals=[]
        IdentifierType: names=['void']
  Decl: name='TransformAlarmC_0_AlarmFrom_stop', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformAlarmC_0_AlarmFrom_stop', quals=[]
        IdentifierType: names=['void']
  Decl: name='TransformAlarmC_0_Counter_get', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformAlarmC_0_Counter_get', quals=[]
        IdentifierType: names=['TransformAlarmC_0_Counter_size_type']
  Decl: name='TransformAlarmC_0_m_t0', quals=[], storage=[]
    TypeDecl: declname='TransformAlarmC_0_m_t0', quals=[]
      IdentifierType: names=['TransformAlarmC_0_to_size_type']
  Decl: name='TransformAlarmC_0_m_dt', quals=[], storage=[]
    TypeDecl: declname='TransformAlarmC_0_m_dt', quals=[]
      IdentifierType: names=['TransformAlarmC_0_to_size_type']
  Decl: name=None, quals=[], storage=[]
    Enum: name='TransformAlarmC_0___nesc_unnamed4271'
      EnumeratorList: 
        Enumerator: name='TransformAlarmC_0_MAX_DELAY_LOG2'
          BinaryOp: op='-'
            BinaryOp: op='-'
              BinaryOp: op='*'
                Constant: type='int', value='8'
                UnaryOp: op='sizeof'
                  Typename: quals=[]
                    TypeDecl: declname=None, quals=[]
                      IdentifierType: names=['TransformAlarmC_0_from_size_type']
              Constant: type='int', value='1'
            Constant: type='int', value='5'
        Enumerator: name='TransformAlarmC_0_MAX_DELAY'
          BinaryOp: op='<<'
            Cast: 
              Typename: quals=[]
                TypeDecl: declname=None, quals=[]
                  IdentifierType: names=['TransformAlarmC_0_to_size_type']
              Constant: type='int', value='1'
            ID: name='TransformAlarmC_0_MAX_DELAY_LOG2'
  Decl: name='TransformAlarmC_0_Alarm_getNow', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformAlarmC_0_Alarm_getNow', quals=[]
        IdentifierType: names=['TransformAlarmC_0_to_size_type']
  Decl: name='TransformAlarmC_0_Alarm_getAlarm', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformAlarmC_0_Alarm_getAlarm', quals=[]
        IdentifierType: names=['TransformAlarmC_0_to_size_type']
  Decl: name='TransformAlarmC_0_Alarm_stop', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformAlarmC_0_Alarm_stop', quals=[]
        IdentifierType: names=['void']
  Decl: name='TransformAlarmC_0_set_alarm', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformAlarmC_0_set_alarm', quals=[]
        IdentifierType: names=['void']
  Decl: name='TransformAlarmC_0_Alarm_startAt', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='t0', quals=[], storage=[]
          TypeDecl: declname='t0', quals=[]
            IdentifierType: names=['TransformAlarmC_0_to_size_type']
        Decl: name='dt', quals=[], storage=[]
          TypeDecl: declname='dt', quals=[]
            IdentifierType: names=['TransformAlarmC_0_to_size_type']
      TypeDecl: declname='TransformAlarmC_0_Alarm_startAt', quals=[]
        IdentifierType: names=['void']
  Decl: name='TransformAlarmC_0_AlarmFrom_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformAlarmC_0_AlarmFrom_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='TransformAlarmC_0_Counter_overflow', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='TransformAlarmC_0_Counter_overflow', quals=[]
        IdentifierType: names=['void']
  Decl: name='AlarmToTimerC_0_fired_postTask', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='AlarmToTimerC_0_fired_postTask', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='AlarmToTimerC_0_Alarm_getNow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='AlarmToTimerC_0_Alarm_getNow', quals=[]
        IdentifierType: names=['AlarmToTimerC_0_Alarm_size_type']
  Decl: name='AlarmToTimerC_0_Alarm_startAt', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='t0', quals=[], storage=[]
          TypeDecl: declname='t0', quals=[]
            IdentifierType: names=['AlarmToTimerC_0_Alarm_size_type']
        Decl: name='dt', quals=[], storage=[]
          TypeDecl: declname='dt', quals=[]
            IdentifierType: names=['AlarmToTimerC_0_Alarm_size_type']
      TypeDecl: declname='AlarmToTimerC_0_Alarm_startAt', quals=[]
        IdentifierType: names=['void']
  Decl: name='AlarmToTimerC_0_Alarm_getAlarm', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='AlarmToTimerC_0_Alarm_getAlarm', quals=[]
        IdentifierType: names=['AlarmToTimerC_0_Alarm_size_type']
  Decl: name='AlarmToTimerC_0_Alarm_stop', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='AlarmToTimerC_0_Alarm_stop', quals=[]
        IdentifierType: names=['void']
  Decl: name='AlarmToTimerC_0_Timer_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='AlarmToTimerC_0_Timer_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name=None, quals=[], storage=[]
    Enum: name='AlarmToTimerC_0___nesc_unnamed4272'
      EnumeratorList: 
        Enumerator: name='AlarmToTimerC_0_fired'
          Constant: type='int', value='0U'
  Typedef: name='AlarmToTimerC_0___nesc_sillytask_fired', quals=[], storage=['typedef']
    ArrayDecl: 
      TypeDecl: declname='AlarmToTimerC_0___nesc_sillytask_fired', quals=[]
        IdentifierType: names=['int']
      ID: name='AlarmToTimerC_0_fired'
  Decl: name='AlarmToTimerC_0_m_dt', quals=[], storage=[]
    TypeDecl: declname='AlarmToTimerC_0_m_dt', quals=[]
      IdentifierType: names=['uint32_t']
  Decl: name='AlarmToTimerC_0_m_oneshot', quals=[], storage=[]
    TypeDecl: declname='AlarmToTimerC_0_m_oneshot', quals=[]
      IdentifierType: names=['bool']
  Decl: name='AlarmToTimerC_0_start', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='t0', quals=[], storage=[]
          TypeDecl: declname='t0', quals=[]
            IdentifierType: names=['uint32_t']
        Decl: name='dt', quals=[], storage=[]
          TypeDecl: declname='dt', quals=[]
            IdentifierType: names=['uint32_t']
        Decl: name='oneshot', quals=[], storage=[]
          TypeDecl: declname='oneshot', quals=[]
            IdentifierType: names=['bool']
      TypeDecl: declname='AlarmToTimerC_0_start', quals=[]
        IdentifierType: names=['void']
  Decl: name='AlarmToTimerC_0_Timer_stop', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='AlarmToTimerC_0_Timer_stop', quals=[]
        IdentifierType: names=['void']
  Decl: name='AlarmToTimerC_0_fired_runTask', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='AlarmToTimerC_0_fired_runTask', quals=[]
        IdentifierType: names=['void']
  Decl: name='AlarmToTimerC_0_Alarm_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='AlarmToTimerC_0_Alarm_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='AlarmToTimerC_0_Timer_startOneShotAt', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='t0', quals=[], storage=[]
          TypeDecl: declname='t0', quals=[]
            IdentifierType: names=['uint32_t']
        Decl: name='dt', quals=[], storage=[]
          TypeDecl: declname='dt', quals=[]
            IdentifierType: names=['uint32_t']
      TypeDecl: declname='AlarmToTimerC_0_Timer_startOneShotAt', quals=[]
        IdentifierType: names=['void']
  Decl: name='AlarmToTimerC_0_Timer_getNow', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='AlarmToTimerC_0_Timer_getNow', quals=[]
        IdentifierType: names=['uint32_t']
  Decl: name='VirtualizeTimerC_0_updateFromTimer_postTask', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='VirtualizeTimerC_0_updateFromTimer_postTask', quals=[]
        IdentifierType: names=['error_t']
  Decl: name='VirtualizeTimerC_0_TimerFrom_getNow', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='VirtualizeTimerC_0_TimerFrom_getNow', quals=[]
        IdentifierType: names=['uint32_t']
  Decl: name='VirtualizeTimerC_0_TimerFrom_startOneShotAt', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='t0', quals=[], storage=[]
          TypeDecl: declname='t0', quals=[]
            IdentifierType: names=['uint32_t']
        Decl: name='dt', quals=[], storage=[]
          TypeDecl: declname='dt', quals=[]
            IdentifierType: names=['uint32_t']
      TypeDecl: declname='VirtualizeTimerC_0_TimerFrom_startOneShotAt', quals=[]
        IdentifierType: names=['void']
  Decl: name='VirtualizeTimerC_0_TimerFrom_stop', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='VirtualizeTimerC_0_TimerFrom_stop', quals=[]
        IdentifierType: names=['void']
  Decl: name='VirtualizeTimerC_0_Timer_fired', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='arg_0x18a3ea0', quals=[], storage=[]
          TypeDecl: declname='arg_0x18a3ea0', quals=[]
            IdentifierType: names=['uint8_t']
      TypeDecl: declname='VirtualizeTimerC_0_Timer_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name=None, quals=[], storage=[]
    Enum: name='VirtualizeTimerC_0___nesc_unnamed4273'
      EnumeratorList: 
        Enumerator: name='VirtualizeTimerC_0_updateFromTimer'
          Constant: type='int', value='1U'
  Typedef: name='VirtualizeTimerC_0___nesc_sillytask_updateFromTimer', quals=[], storage=['typedef']
    ArrayDecl: 
      TypeDecl: declname='VirtualizeTimerC_0___nesc_sillytask_updateFromTimer', quals=[]
        IdentifierType: names=['int']
      ID: name='VirtualizeTimerC_0_updateFromTimer'
  Decl: name=None, quals=[], storage=[]
    Enum: name='VirtualizeTimerC_0___nesc_unnamed4274'
      EnumeratorList: 
        Enumerator: name='VirtualizeTimerC_0_NUM_TIMERS'
          Constant: type='int', value='3U'
        Enumerator: name='VirtualizeTimerC_0_END_OF_LIST'
          Constant: type='int', value='255'
  Typedef: name='VirtualizeTimerC_0_Timer_t', quals=[], storage=['typedef']
    TypeDecl: declname='VirtualizeTimerC_0_Timer_t', quals=[]
      Struct: name='VirtualizeTimerC_0___nesc_unnamed4275', packed=False
        Decl: name='t0', quals=[], storage=[]
          TypeDecl: declname='t0', quals=[]
            IdentifierType: names=['uint32_t']
        Decl: name='dt', quals=[], storage=[]
          TypeDecl: declname='dt', quals=[]
            IdentifierType: names=['uint32_t']
        Decl: name='isoneshot', quals=[], storage=[]
          TypeDecl: declname='isoneshot', quals=[]
            IdentifierType: names=['bool']
          Constant: type='int', value='1'
        Decl: name='isrunning', quals=[], storage=[]
          TypeDecl: declname='isrunning', quals=[]
            IdentifierType: names=['bool']
          Constant: type='int', value='1'
        Decl: name='_reserved', quals=[], storage=[]
          TypeDecl: declname='_reserved', quals=[]
            IdentifierType: names=['bool']
          Constant: type='int', value='6'
  Decl: name='VirtualizeTimerC_0_m_timers', quals=[], storage=[]
    ArrayDecl: 
      TypeDecl: declname='VirtualizeTimerC_0_m_timers', quals=[]
        IdentifierType: names=['VirtualizeTimerC_0_Timer_t']
      ID: name='VirtualizeTimerC_0_NUM_TIMERS'
  Decl: name='VirtualizeTimerC_0_fireTimers', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='now', quals=[], storage=[]
          TypeDecl: declname='now', quals=[]
            IdentifierType: names=['uint32_t']
      TypeDecl: declname='VirtualizeTimerC_0_fireTimers', quals=[]
        IdentifierType: names=['void']
  Decl: name='VirtualizeTimerC_0_updateFromTimer_runTask', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='VirtualizeTimerC_0_updateFromTimer_runTask', quals=[]
        IdentifierType: names=['void']
  Decl: name='VirtualizeTimerC_0_TimerFrom_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='VirtualizeTimerC_0_TimerFrom_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='VirtualizeTimerC_0_startTimer', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='num', quals=[], storage=[]
          TypeDecl: declname='num', quals=[]
            IdentifierType: names=['uint8_t']
        Decl: name='t0', quals=[], storage=[]
          TypeDecl: declname='t0', quals=[]
            IdentifierType: names=['uint32_t']
        Decl: name='dt', quals=[], storage=[]
          TypeDecl: declname='dt', quals=[]
            IdentifierType: names=['uint32_t']
        Decl: name='isoneshot', quals=[], storage=[]
          TypeDecl: declname='isoneshot', quals=[]
            IdentifierType: names=['bool']
      TypeDecl: declname='VirtualizeTimerC_0_startTimer', quals=[]
        IdentifierType: names=['void']
  Decl: name='VirtualizeTimerC_0_Timer_startPeriodic', quals=[], storage=['static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='num', quals=[], storage=[]
          TypeDecl: declname='num', quals=[]
            IdentifierType: names=['uint8_t']
        Decl: name='dt', quals=[], storage=[]
          TypeDecl: declname='dt', quals=[]
            IdentifierType: names=['uint32_t']
      TypeDecl: declname='VirtualizeTimerC_0_Timer_startPeriodic', quals=[]
        IdentifierType: names=['void']
  Decl: name='VirtualizeTimerC_0_Timer_default_fired', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Decl: name='num', quals=[], storage=[]
          TypeDecl: declname='num', quals=[]
            IdentifierType: names=['uint8_t']
      TypeDecl: declname='VirtualizeTimerC_0_Timer_default_fired', quals=[]
        IdentifierType: names=['void']
  Decl: name='CounterToLocalTimeC_0_Counter_overflow', quals=[], storage=['inline', 'static']
    FuncDecl: quals=None
      ParamList: 
        Typename: quals=[]
          TypeDecl: declname=None, quals=[]
            IdentifierType: names=['void']
      TypeDecl: declname='CounterToLocalTimeC_0_Counter_overflow', quals=[]
        IdentifierType: names=['void']
  FuncDef: 
    Decl: name='__nesc_enable_interrupt', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='__nesc_enable_interrupt', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_2_Timer_overflow', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_2_Timer_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_1_Timer_overflow', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_1_Timer_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_0_Timer_overflow', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_0_Timer_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerP_0_Timer_overflow', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerP_0_Timer_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_0_Timer_overflow'
      FuncCall: 
        ID: name='Msp430TimerCapComP_1_Timer_overflow'
      FuncCall: 
        ID: name='Msp430TimerCapComP_2_Timer_overflow'
  FuncDef: 
    Decl: name='Msp430TimerP_0_Overflow_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerP_0_Overflow_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerP_0_Timer_overflow'
  FuncDef: 
    Decl: name='Msp430TimerP_0_Event_default_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='n', quals=[], storage=[]
            TypeDecl: declname='n', quals=[]
              IdentifierType: names=['uint8_t']
        TypeDecl: declname='Msp430TimerP_0_Event_default_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerP_0_Event_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='arg_0x1561800', quals=[], storage=[]
            TypeDecl: declname='arg_0x1561800', quals=[]
              IdentifierType: names=['uint8_t']
        TypeDecl: declname='Msp430TimerP_0_Event_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Switch: 
        ID: name='arg_0x1561800'
        Compound: 
          Case: 
            Constant: type='int', value='0'
            FuncCall: 
              ID: name='Msp430TimerCapComP_0_Event_fired'
          Break: 
          Case: 
            Constant: type='int', value='1'
            FuncCall: 
              ID: name='Msp430TimerCapComP_1_Event_fired'
          Break: 
          Case: 
            Constant: type='int', value='2'
            FuncCall: 
              ID: name='Msp430TimerCapComP_2_Event_fired'
          Break: 
          Case: 
            Constant: type='int', value='5'
            FuncCall: 
              ID: name='Msp430TimerP_0_Overflow_fired'
          Break: 
          Default: 
            FuncCall: 
              ID: name='Msp430TimerP_0_Event_default_fired'
              ExprList: 
                ID: name='arg_0x1561800'
          Break: 
  FuncDef: 
    Decl: name='Msp430TimerP_0_VectorTimerX0_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerP_0_VectorTimerX0_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerP_0_Event_fired'
        ExprList: 
          Constant: type='int', value='0'
  FuncDef: 
    Decl: name='Msp430TimerCommonP_VectorTimerA0_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCommonP_VectorTimerA0_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerP_0_VectorTimerX0_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_0_int2CC', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='x', quals=[], storage=[]
            TypeDecl: declname='x', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_0_int2CC', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_0_cc_t']
    Compound: 
      Decl: name='c', quals=[], storage=[]
        TypeDecl: declname='c', quals=[]
          Union: name='Msp430TimerCapComP_0___nesc_unnamed4276', packed=False
            Decl: name='f', quals=[], storage=[]
              TypeDecl: declname='f', quals=[]
                IdentifierType: names=['uint16_t']
            Decl: name='t', quals=[], storage=[]
              TypeDecl: declname='t', quals=[]
                IdentifierType: names=['Msp430TimerCapComP_0_cc_t']
        ExprList: 
          Assignment: op='='
            StructRef: type='.'
              ID: name='f'
            ID: name='x'
      Return: 
        StructRef: type='.'
          ID: name='c'
          ID: name='t'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_0_Control_getControl', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_0_Control_getControl', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_0_cc_t']
    Compound: 
      Return: 
        FuncCall: 
          ID: name='Msp430TimerCapComP_0_int2CC'
          ExprList: 
            UnaryOp: op='*'
              Cast: 
                Typename: quals=['volatile']
                  PtrDecl: quals=[]
                    TypeDecl: declname=None, quals=['volatile']
                      IdentifierType: names=['uint16_t']
                Constant: type='int', value='354U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_0_Capture_default_captured', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='n', quals=[], storage=[]
            TypeDecl: declname='n', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_0_Capture_default_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_0_Capture_captured', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='time', quals=[], storage=[]
            TypeDecl: declname='time', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_0_Capture_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_0_Capture_default_captured'
        ExprList: 
          ID: name='time'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_0_Capture_getEvent', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_0_Capture_getEvent', quals=[]
          IdentifierType: names=['uint16_t']
    Compound: 
      Return: 
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint16_t']
            Constant: type='int', value='370U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_0_Compare_default_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_0_Compare_default_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_0_Compare_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_0_Compare_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_0_Compare_default_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_1_int2CC', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='x', quals=[], storage=[]
            TypeDecl: declname='x', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_1_int2CC', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_1_cc_t']
    Compound: 
      Decl: name='c', quals=[], storage=[]
        TypeDecl: declname='c', quals=[]
          Union: name='Msp430TimerCapComP_1___nesc_unnamed4277', packed=False
            Decl: name='f', quals=[], storage=[]
              TypeDecl: declname='f', quals=[]
                IdentifierType: names=['uint16_t']
            Decl: name='t', quals=[], storage=[]
              TypeDecl: declname='t', quals=[]
                IdentifierType: names=['Msp430TimerCapComP_1_cc_t']
        ExprList: 
          Assignment: op='='
            StructRef: type='.'
              ID: name='f'
            ID: name='x'
      Return: 
        StructRef: type='.'
          ID: name='c'
          ID: name='t'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_1_Control_getControl', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_1_Control_getControl', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_1_cc_t']
    Compound: 
      Return: 
        FuncCall: 
          ID: name='Msp430TimerCapComP_1_int2CC'
          ExprList: 
            UnaryOp: op='*'
              Cast: 
                Typename: quals=['volatile']
                  PtrDecl: quals=[]
                    TypeDecl: declname=None, quals=['volatile']
                      IdentifierType: names=['uint16_t']
                Constant: type='int', value='356U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_1_Capture_default_captured', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='n', quals=[], storage=[]
            TypeDecl: declname='n', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_1_Capture_default_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_1_Capture_captured', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='time', quals=[], storage=[]
            TypeDecl: declname='time', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_1_Capture_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_1_Capture_default_captured'
        ExprList: 
          ID: name='time'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_1_Capture_getEvent', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_1_Capture_getEvent', quals=[]
          IdentifierType: names=['uint16_t']
    Compound: 
      Return: 
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint16_t']
            Constant: type='int', value='372U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_1_Compare_default_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_1_Compare_default_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_1_Compare_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_1_Compare_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_1_Compare_default_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_2_int2CC', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='x', quals=[], storage=[]
            TypeDecl: declname='x', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_2_int2CC', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_2_cc_t']
    Compound: 
      Decl: name='c', quals=[], storage=[]
        TypeDecl: declname='c', quals=[]
          Union: name='Msp430TimerCapComP_2___nesc_unnamed4278', packed=False
            Decl: name='f', quals=[], storage=[]
              TypeDecl: declname='f', quals=[]
                IdentifierType: names=['uint16_t']
            Decl: name='t', quals=[], storage=[]
              TypeDecl: declname='t', quals=[]
                IdentifierType: names=['Msp430TimerCapComP_2_cc_t']
        ExprList: 
          Assignment: op='='
            StructRef: type='.'
              ID: name='f'
            ID: name='x'
      Return: 
        StructRef: type='.'
          ID: name='c'
          ID: name='t'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_2_Control_getControl', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_2_Control_getControl', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_2_cc_t']
    Compound: 
      Return: 
        FuncCall: 
          ID: name='Msp430TimerCapComP_2_int2CC'
          ExprList: 
            UnaryOp: op='*'
              Cast: 
                Typename: quals=['volatile']
                  PtrDecl: quals=[]
                    TypeDecl: declname=None, quals=['volatile']
                      IdentifierType: names=['uint16_t']
                Constant: type='int', value='358U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_2_Capture_default_captured', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='n', quals=[], storage=[]
            TypeDecl: declname='n', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_2_Capture_default_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_2_Capture_captured', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='time', quals=[], storage=[]
            TypeDecl: declname='time', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_2_Capture_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_2_Capture_default_captured'
        ExprList: 
          ID: name='time'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_2_Capture_getEvent', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_2_Capture_getEvent', quals=[]
          IdentifierType: names=['uint16_t']
    Compound: 
      Return: 
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint16_t']
            Constant: type='int', value='374U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_2_Compare_default_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_2_Compare_default_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_2_Compare_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_2_Compare_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_2_Compare_default_fired'
  FuncDef: 
    Decl: name='Msp430TimerP_0_VectorTimerX1_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerP_0_VectorTimerX1_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='n', quals=[], storage=[]
        TypeDecl: declname='n', quals=[]
          IdentifierType: names=['uint8_t']
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint16_t']
            Constant: type='int', value='302U'
      FuncCall: 
        ID: name='Msp430TimerP_0_Event_fired'
        ExprList: 
          BinaryOp: op='>>'
            ID: name='n'
            Constant: type='int', value='1'
  FuncDef: 
    Decl: name='Msp430TimerCommonP_VectorTimerA1_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCommonP_VectorTimerA1_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerP_0_VectorTimerX1_fired'
  FuncDef: 
    Decl: name='Msp430TimerP_1_VectorTimerX0_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerP_1_VectorTimerX0_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerP_1_Event_fired'
        ExprList: 
          Constant: type='int', value='0'
  FuncDef: 
    Decl: name='Msp430TimerCommonP_VectorTimerB0_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCommonP_VectorTimerB0_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerP_1_VectorTimerX0_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_9_Timer_overflow', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_9_Timer_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_8_Timer_overflow', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_8_Timer_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_7_Timer_overflow', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_7_Timer_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_6_Timer_overflow', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_6_Timer_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_5_Timer_overflow', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_5_Timer_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_4_Timer_overflow', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_4_Timer_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_3_Timer_overflow', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_3_Timer_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430AlarmC_0_Msp430Timer_overflow', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430AlarmC_0_Msp430Timer_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='CounterToLocalTimeC_0_Counter_overflow', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='CounterToLocalTimeC_0_Counter_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='TransformAlarmC_0_Counter_overflow', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='TransformAlarmC_0_Counter_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='TransformCounterC_0_Counter_overflow', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='TransformCounterC_0_Counter_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='TransformAlarmC_0_Counter_overflow'
      FuncCall: 
        ID: name='CounterToLocalTimeC_0_Counter_overflow'
  FuncDef: 
    Decl: name='TransformCounterC_0_CounterFrom_overflow', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='TransformCounterC_0_CounterFrom_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Compound: 
        UnaryOp: op='p++'
          ID: name='TransformCounterC_0_m_upper'
        If: 
          BinaryOp: op='=='
            BinaryOp: op='&'
              ID: name='TransformCounterC_0_m_upper'
              ID: name='TransformCounterC_0_OVERFLOW_MASK'
            Constant: type='int', value='0'
          Compound: 
            FuncCall: 
              ID: name='TransformCounterC_0_Counter_overflow'
  FuncDef: 
    Decl: name='Msp430CounterC_0_Counter_overflow', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430CounterC_0_Counter_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='TransformCounterC_0_CounterFrom_overflow'
  FuncDef: 
    Decl: name='Msp430CounterC_0_Msp430Timer_overflow', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430CounterC_0_Msp430Timer_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430CounterC_0_Counter_overflow'
  FuncDef: 
    Decl: name='Msp430TimerP_1_Timer_overflow', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerP_1_Timer_overflow', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430CounterC_0_Msp430Timer_overflow'
      FuncCall: 
        ID: name='Msp430AlarmC_0_Msp430Timer_overflow'
      FuncCall: 
        ID: name='Msp430TimerCapComP_3_Timer_overflow'
      FuncCall: 
        ID: name='Msp430TimerCapComP_4_Timer_overflow'
      FuncCall: 
        ID: name='Msp430TimerCapComP_5_Timer_overflow'
      FuncCall: 
        ID: name='Msp430TimerCapComP_6_Timer_overflow'
      FuncCall: 
        ID: name='Msp430TimerCapComP_7_Timer_overflow'
      FuncCall: 
        ID: name='Msp430TimerCapComP_8_Timer_overflow'
      FuncCall: 
        ID: name='Msp430TimerCapComP_9_Timer_overflow'
  FuncDef: 
    Decl: name='Msp430TimerP_1_Overflow_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerP_1_Overflow_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerP_1_Timer_overflow'
  FuncDef: 
    Decl: name='AlarmToTimerC_0_fired_postTask', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='AlarmToTimerC_0_fired_postTask', quals=[]
          IdentifierType: names=['error_t']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['char', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='SchedulerBasicP_TaskBasic_postTask'
          ExprList: 
            ID: name='AlarmToTimerC_0_fired'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='AlarmToTimerC_0_Alarm_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='AlarmToTimerC_0_Alarm_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='AlarmToTimerC_0_fired_postTask'
  FuncDef: 
    Decl: name='TransformAlarmC_0_Alarm_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='TransformAlarmC_0_Alarm_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='AlarmToTimerC_0_Alarm_fired'
  FuncDef: 
    Decl: name='TransformAlarmC_0_AlarmFrom_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='TransformAlarmC_0_AlarmFrom_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Compound: 
        If: 
          BinaryOp: op='=='
            ID: name='TransformAlarmC_0_m_dt'
            Constant: type='int', value='0'
          Compound: 
            FuncCall: 
              ID: name='TransformAlarmC_0_Alarm_fired'
          Compound: 
            FuncCall: 
              ID: name='TransformAlarmC_0_set_alarm'
  FuncDef: 
    Decl: name='Msp430AlarmC_0_Alarm_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430AlarmC_0_Alarm_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='TransformAlarmC_0_AlarmFrom_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_3_Control_disableEvents', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_3_Control_disableEvents', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='&='
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint16_t']
            Constant: type='int', value='386U'
        UnaryOp: op='~'
          Constant: type='int', value='0x0010'
  FuncDef: 
    Decl: name='Msp430AlarmC_0_Msp430TimerControl_disableEvents', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430AlarmC_0_Msp430TimerControl_disableEvents', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_3_Control_disableEvents'
  FuncDef: 
    Decl: name='Msp430AlarmC_0_Msp430Compare_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430AlarmC_0_Msp430Compare_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430AlarmC_0_Msp430TimerControl_disableEvents'
      FuncCall: 
        ID: name='Msp430AlarmC_0_Alarm_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_3_Compare_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_3_Compare_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430AlarmC_0_Msp430Compare_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_3_Capture_getEvent', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_3_Capture_getEvent', quals=[]
          IdentifierType: names=['uint16_t']
    Compound: 
      Return: 
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint16_t']
            Constant: type='int', value='402U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_3_Capture_default_captured', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='n', quals=[], storage=[]
            TypeDecl: declname='n', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_3_Capture_default_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_3_Capture_captured', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='time', quals=[], storage=[]
            TypeDecl: declname='time', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_3_Capture_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_3_Capture_default_captured'
        ExprList: 
          ID: name='time'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_3_int2CC', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='x', quals=[], storage=[]
            TypeDecl: declname='x', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_3_int2CC', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_3_cc_t']
    Compound: 
      Decl: name='c', quals=[], storage=[]
        TypeDecl: declname='c', quals=[]
          Union: name='Msp430TimerCapComP_3___nesc_unnamed4279', packed=False
            Decl: name='f', quals=[], storage=[]
              TypeDecl: declname='f', quals=[]
                IdentifierType: names=['uint16_t']
            Decl: name='t', quals=[], storage=[]
              TypeDecl: declname='t', quals=[]
                IdentifierType: names=['Msp430TimerCapComP_3_cc_t']
        ExprList: 
          Assignment: op='='
            StructRef: type='.'
              ID: name='f'
            ID: name='x'
      Return: 
        StructRef: type='.'
          ID: name='c'
          ID: name='t'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_3_Control_getControl', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_3_Control_getControl', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_3_cc_t']
    Compound: 
      Return: 
        FuncCall: 
          ID: name='Msp430TimerCapComP_3_int2CC'
          ExprList: 
            UnaryOp: op='*'
              Cast: 
                Typename: quals=['volatile']
                  PtrDecl: quals=[]
                    TypeDecl: declname=None, quals=['volatile']
                      IdentifierType: names=['uint16_t']
                Constant: type='int', value='386U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_3_Event_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_3_Event_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      If: 
        StructRef: type='.'
          FuncCall: 
            ID: name='Msp430TimerCapComP_3_Control_getControl'
          ID: name='cap'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_3_Capture_captured'
            ExprList: 
              FuncCall: 
                ID: name='Msp430TimerCapComP_3_Capture_getEvent'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_3_Compare_fired'
  FuncDef: 
    Decl: name='SchedulerBasicP_isWaiting', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='id', quals=[], storage=[]
            TypeDecl: declname='id', quals=[]
              IdentifierType: names=['uint8_t']
        TypeDecl: declname='SchedulerBasicP_isWaiting', quals=[]
          IdentifierType: names=['bool']
    Compound: 
      Return: 
        BinaryOp: op='||'
          BinaryOp: op='!='
            ArrayRef: 
              ID: name='SchedulerBasicP_m_next'
              ID: name='id'
            ID: name='SchedulerBasicP_NO_TASK'
          BinaryOp: op='=='
            ID: name='SchedulerBasicP_m_tail'
            ID: name='id'
  FuncDef: 
    Decl: name='SchedulerBasicP_pushTask', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='id', quals=[], storage=[]
            TypeDecl: declname='id', quals=[]
              IdentifierType: names=['uint8_t']
        TypeDecl: declname='SchedulerBasicP_pushTask', quals=[]
          IdentifierType: names=['bool']
    Compound: 
      If: 
        UnaryOp: op='!'
          FuncCall: 
            ID: name='SchedulerBasicP_isWaiting'
            ExprList: 
              ID: name='id'
        Compound: 
          If: 
            BinaryOp: op='=='
              ID: name='SchedulerBasicP_m_head'
              ID: name='SchedulerBasicP_NO_TASK'
            Compound: 
              Assignment: op='='
                ID: name='SchedulerBasicP_m_head'
                ID: name='id'
              Assignment: op='='
                ID: name='SchedulerBasicP_m_tail'
                ID: name='id'
            Compound: 
              Assignment: op='='
                ArrayRef: 
                  ID: name='SchedulerBasicP_m_next'
                  ID: name='SchedulerBasicP_m_tail'
                ID: name='id'
              Assignment: op='='
                ID: name='SchedulerBasicP_m_tail'
                ID: name='id'
          Return: 
            ID: name='TRUE'
        Compound: 
          Return: 
            ID: name='FALSE'
  FuncDef: 
    Decl: name='Msp430CounterC_0_Msp430Timer_get', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430CounterC_0_Msp430Timer_get', quals=[]
          IdentifierType: names=['uint16_t']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['int', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='Msp430TimerP_1_Timer_get'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='Msp430CounterC_0_Counter_get', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430CounterC_0_Counter_get', quals=[]
          IdentifierType: names=['uint16_t']
    Compound: 
      Return: 
        FuncCall: 
          ID: name='Msp430CounterC_0_Msp430Timer_get'
  FuncDef: 
    Decl: name='TransformCounterC_0_CounterFrom_get', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='TransformCounterC_0_CounterFrom_get', quals=[]
          IdentifierType: names=['TransformCounterC_0_CounterFrom_size_type']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['int', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='Msp430CounterC_0_Counter_get'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='Msp430TimerP_1_Timer_isOverflowPending', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerP_1_Timer_isOverflowPending', quals=[]
          IdentifierType: names=['bool']
    Compound: 
      Return: 
        BinaryOp: op='&'
          UnaryOp: op='*'
            Cast: 
              Typename: quals=['volatile']
                PtrDecl: quals=[]
                  TypeDecl: declname=None, quals=['volatile']
                    IdentifierType: names=['uint16_t']
              Constant: type='int', value='384U'
          Constant: type='int', value='1U'
  FuncDef: 
    Decl: name='Msp430CounterC_0_Msp430Timer_isOverflowPending', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430CounterC_0_Msp430Timer_isOverflowPending', quals=[]
          IdentifierType: names=['bool']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['char', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='Msp430TimerP_1_Timer_isOverflowPending'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='Msp430CounterC_0_Counter_isOverflowPending', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430CounterC_0_Counter_isOverflowPending', quals=[]
          IdentifierType: names=['bool']
    Compound: 
      Return: 
        FuncCall: 
          ID: name='Msp430CounterC_0_Msp430Timer_isOverflowPending'
  FuncDef: 
    Decl: name='TransformCounterC_0_CounterFrom_isOverflowPending', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='TransformCounterC_0_CounterFrom_isOverflowPending', quals=[]
          IdentifierType: names=['bool']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['char', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='Msp430CounterC_0_Counter_isOverflowPending'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_3_Control_enableEvents', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_3_Control_enableEvents', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='|='
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint16_t']
            Constant: type='int', value='386U'
        Constant: type='int', value='0x0010'
  FuncDef: 
    Decl: name='Msp430AlarmC_0_Msp430TimerControl_enableEvents', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430AlarmC_0_Msp430TimerControl_enableEvents', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_3_Control_enableEvents'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_3_Control_clearPendingInterrupt', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_3_Control_clearPendingInterrupt', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='&='
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint16_t']
            Constant: type='int', value='386U'
        UnaryOp: op='~'
          Constant: type='int', value='0x0001'
  FuncDef: 
    Decl: name='Msp430AlarmC_0_Msp430TimerControl_clearPendingInterrupt', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430AlarmC_0_Msp430TimerControl_clearPendingInterrupt', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_3_Control_clearPendingInterrupt'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_3_Compare_setEvent', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='x', quals=[], storage=[]
            TypeDecl: declname='x', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_3_Compare_setEvent', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='='
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint16_t']
            Constant: type='int', value='402U'
        ID: name='x'
  FuncDef: 
    Decl: name='Msp430AlarmC_0_Msp430Compare_setEvent', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='time', quals=[], storage=[]
            TypeDecl: declname='time', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430AlarmC_0_Msp430Compare_setEvent', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_3_Compare_setEvent'
        ExprList: 
          ID: name='time'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_3_Timer_get', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_3_Timer_get', quals=[]
          IdentifierType: names=['uint16_t']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['int', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='Msp430TimerP_1_Timer_get'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_3_Compare_setEventFromNow', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='x', quals=[], storage=[]
            TypeDecl: declname='x', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_3_Compare_setEventFromNow', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='='
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint16_t']
            Constant: type='int', value='402U'
        BinaryOp: op='+'
          FuncCall: 
            ID: name='Msp430TimerCapComP_3_Timer_get'
          ID: name='x'
  FuncDef: 
    Decl: name='Msp430AlarmC_0_Msp430Compare_setEventFromNow', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='delta', quals=[], storage=[]
            TypeDecl: declname='delta', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430AlarmC_0_Msp430Compare_setEventFromNow', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_3_Compare_setEventFromNow'
        ExprList: 
          ID: name='delta'
  FuncDef: 
    Decl: name='Msp430AlarmC_0_Msp430Timer_get', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430AlarmC_0_Msp430Timer_get', quals=[]
          IdentifierType: names=['uint16_t']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['int', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='Msp430TimerP_1_Timer_get'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='Msp430AlarmC_0_Alarm_startAt', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='t0', quals=[], storage=[]
            TypeDecl: declname='t0', quals=[]
              IdentifierType: names=['uint16_t']
          Decl: name='dt', quals=[], storage=[]
            TypeDecl: declname='dt', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430AlarmC_0_Alarm_startAt', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Compound: 
        Decl: name='now', quals=[], storage=[]
          TypeDecl: declname='now', quals=[]
            IdentifierType: names=['uint16_t']
          FuncCall: 
            ID: name='Msp430AlarmC_0_Msp430Timer_get'
        Decl: name='elapsed', quals=[], storage=[]
          TypeDecl: declname='elapsed', quals=[]
            IdentifierType: names=['uint16_t']
          BinaryOp: op='-'
            ID: name='now'
            ID: name='t0'
        If: 
          BinaryOp: op='>='
            ID: name='elapsed'
            ID: name='dt'
          Compound: 
            FuncCall: 
              ID: name='Msp430AlarmC_0_Msp430Compare_setEventFromNow'
              ExprList: 
                Constant: type='int', value='2'
          Compound: 
            Decl: name='remaining', quals=[], storage=[]
              TypeDecl: declname='remaining', quals=[]
                IdentifierType: names=['uint16_t']
              BinaryOp: op='-'
                ID: name='dt'
                ID: name='elapsed'
            If: 
              BinaryOp: op='<='
                ID: name='remaining'
                Constant: type='int', value='2'
              Compound: 
                FuncCall: 
                  ID: name='Msp430AlarmC_0_Msp430Compare_setEventFromNow'
                  ExprList: 
                    Constant: type='int', value='2'
              Compound: 
                FuncCall: 
                  ID: name='Msp430AlarmC_0_Msp430Compare_setEvent'
                  ExprList: 
                    BinaryOp: op='+'
                      ID: name='now'
                      ID: name='remaining'
        FuncCall: 
          ID: name='Msp430AlarmC_0_Msp430TimerControl_clearPendingInterrupt'
        FuncCall: 
          ID: name='Msp430AlarmC_0_Msp430TimerControl_enableEvents'
  FuncDef: 
    Decl: name='TransformAlarmC_0_AlarmFrom_startAt', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='t0', quals=[], storage=[]
            TypeDecl: declname='t0', quals=[]
              IdentifierType: names=['TransformAlarmC_0_AlarmFrom_size_type']
          Decl: name='dt', quals=[], storage=[]
            TypeDecl: declname='dt', quals=[]
              IdentifierType: names=['TransformAlarmC_0_AlarmFrom_size_type']
        TypeDecl: declname='TransformAlarmC_0_AlarmFrom_startAt', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430AlarmC_0_Alarm_startAt'
        ExprList: 
          ID: name='t0'
          ID: name='dt'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_4_Compare_default_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_4_Compare_default_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_4_Compare_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_4_Compare_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_4_Compare_default_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_4_Capture_getEvent', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_4_Capture_getEvent', quals=[]
          IdentifierType: names=['uint16_t']
    Compound: 
      Return: 
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint16_t']
            Constant: type='int', value='404U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_4_Capture_default_captured', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='n', quals=[], storage=[]
            TypeDecl: declname='n', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_4_Capture_default_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_4_Capture_captured', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='time', quals=[], storage=[]
            TypeDecl: declname='time', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_4_Capture_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_4_Capture_default_captured'
        ExprList: 
          ID: name='time'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_4_int2CC', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='x', quals=[], storage=[]
            TypeDecl: declname='x', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_4_int2CC', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_4_cc_t']
    Compound: 
      Decl: name='c', quals=[], storage=[]
        TypeDecl: declname='c', quals=[]
          Union: name='Msp430TimerCapComP_4___nesc_unnamed4280', packed=False
            Decl: name='f', quals=[], storage=[]
              TypeDecl: declname='f', quals=[]
                IdentifierType: names=['uint16_t']
            Decl: name='t', quals=[], storage=[]
              TypeDecl: declname='t', quals=[]
                IdentifierType: names=['Msp430TimerCapComP_4_cc_t']
        ExprList: 
          Assignment: op='='
            StructRef: type='.'
              ID: name='f'
            ID: name='x'
      Return: 
        StructRef: type='.'
          ID: name='c'
          ID: name='t'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_4_Control_getControl', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_4_Control_getControl', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_4_cc_t']
    Compound: 
      Return: 
        FuncCall: 
          ID: name='Msp430TimerCapComP_4_int2CC'
          ExprList: 
            UnaryOp: op='*'
              Cast: 
                Typename: quals=['volatile']
                  PtrDecl: quals=[]
                    TypeDecl: declname=None, quals=['volatile']
                      IdentifierType: names=['uint16_t']
                Constant: type='int', value='388U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_4_Event_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_4_Event_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      If: 
        StructRef: type='.'
          FuncCall: 
            ID: name='Msp430TimerCapComP_4_Control_getControl'
          ID: name='cap'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_4_Capture_captured'
            ExprList: 
              FuncCall: 
                ID: name='Msp430TimerCapComP_4_Capture_getEvent'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_4_Compare_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_5_Compare_default_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_5_Compare_default_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_5_Compare_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_5_Compare_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_5_Compare_default_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_5_Capture_getEvent', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_5_Capture_getEvent', quals=[]
          IdentifierType: names=['uint16_t']
    Compound: 
      Return: 
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint16_t']
            Constant: type='int', value='406U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_5_Capture_default_captured', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='n', quals=[], storage=[]
            TypeDecl: declname='n', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_5_Capture_default_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_5_Capture_captured', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='time', quals=[], storage=[]
            TypeDecl: declname='time', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_5_Capture_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_5_Capture_default_captured'
        ExprList: 
          ID: name='time'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_5_int2CC', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='x', quals=[], storage=[]
            TypeDecl: declname='x', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_5_int2CC', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_5_cc_t']
    Compound: 
      Decl: name='c', quals=[], storage=[]
        TypeDecl: declname='c', quals=[]
          Union: name='Msp430TimerCapComP_5___nesc_unnamed4281', packed=False
            Decl: name='f', quals=[], storage=[]
              TypeDecl: declname='f', quals=[]
                IdentifierType: names=['uint16_t']
            Decl: name='t', quals=[], storage=[]
              TypeDecl: declname='t', quals=[]
                IdentifierType: names=['Msp430TimerCapComP_5_cc_t']
        ExprList: 
          Assignment: op='='
            StructRef: type='.'
              ID: name='f'
            ID: name='x'
      Return: 
        StructRef: type='.'
          ID: name='c'
          ID: name='t'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_5_Control_getControl', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_5_Control_getControl', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_5_cc_t']
    Compound: 
      Return: 
        FuncCall: 
          ID: name='Msp430TimerCapComP_5_int2CC'
          ExprList: 
            UnaryOp: op='*'
              Cast: 
                Typename: quals=['volatile']
                  PtrDecl: quals=[]
                    TypeDecl: declname=None, quals=['volatile']
                      IdentifierType: names=['uint16_t']
                Constant: type='int', value='390U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_5_Event_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_5_Event_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      If: 
        StructRef: type='.'
          FuncCall: 
            ID: name='Msp430TimerCapComP_5_Control_getControl'
          ID: name='cap'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_5_Capture_captured'
            ExprList: 
              FuncCall: 
                ID: name='Msp430TimerCapComP_5_Capture_getEvent'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_5_Compare_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_6_Compare_default_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_6_Compare_default_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_6_Compare_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_6_Compare_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_6_Compare_default_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_6_Capture_getEvent', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_6_Capture_getEvent', quals=[]
          IdentifierType: names=['uint16_t']
    Compound: 
      Return: 
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint16_t']
            Constant: type='int', value='408U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_6_Capture_default_captured', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='n', quals=[], storage=[]
            TypeDecl: declname='n', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_6_Capture_default_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_6_Capture_captured', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='time', quals=[], storage=[]
            TypeDecl: declname='time', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_6_Capture_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_6_Capture_default_captured'
        ExprList: 
          ID: name='time'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_6_int2CC', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='x', quals=[], storage=[]
            TypeDecl: declname='x', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_6_int2CC', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_6_cc_t']
    Compound: 
      Decl: name='c', quals=[], storage=[]
        TypeDecl: declname='c', quals=[]
          Union: name='Msp430TimerCapComP_6___nesc_unnamed4282', packed=False
            Decl: name='f', quals=[], storage=[]
              TypeDecl: declname='f', quals=[]
                IdentifierType: names=['uint16_t']
            Decl: name='t', quals=[], storage=[]
              TypeDecl: declname='t', quals=[]
                IdentifierType: names=['Msp430TimerCapComP_6_cc_t']
        ExprList: 
          Assignment: op='='
            StructRef: type='.'
              ID: name='f'
            ID: name='x'
      Return: 
        StructRef: type='.'
          ID: name='c'
          ID: name='t'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_6_Control_getControl', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_6_Control_getControl', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_6_cc_t']
    Compound: 
      Return: 
        FuncCall: 
          ID: name='Msp430TimerCapComP_6_int2CC'
          ExprList: 
            UnaryOp: op='*'
              Cast: 
                Typename: quals=['volatile']
                  PtrDecl: quals=[]
                    TypeDecl: declname=None, quals=['volatile']
                      IdentifierType: names=['uint16_t']
                Constant: type='int', value='392U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_6_Event_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_6_Event_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      If: 
        StructRef: type='.'
          FuncCall: 
            ID: name='Msp430TimerCapComP_6_Control_getControl'
          ID: name='cap'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_6_Capture_captured'
            ExprList: 
              FuncCall: 
                ID: name='Msp430TimerCapComP_6_Capture_getEvent'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_6_Compare_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_7_Compare_default_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_7_Compare_default_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_7_Compare_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_7_Compare_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_7_Compare_default_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_7_Capture_getEvent', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_7_Capture_getEvent', quals=[]
          IdentifierType: names=['uint16_t']
    Compound: 
      Return: 
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint16_t']
            Constant: type='int', value='410U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_7_Capture_default_captured', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='n', quals=[], storage=[]
            TypeDecl: declname='n', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_7_Capture_default_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_7_Capture_captured', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='time', quals=[], storage=[]
            TypeDecl: declname='time', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_7_Capture_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_7_Capture_default_captured'
        ExprList: 
          ID: name='time'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_7_int2CC', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='x', quals=[], storage=[]
            TypeDecl: declname='x', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_7_int2CC', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_7_cc_t']
    Compound: 
      Decl: name='c', quals=[], storage=[]
        TypeDecl: declname='c', quals=[]
          Union: name='Msp430TimerCapComP_7___nesc_unnamed4283', packed=False
            Decl: name='f', quals=[], storage=[]
              TypeDecl: declname='f', quals=[]
                IdentifierType: names=['uint16_t']
            Decl: name='t', quals=[], storage=[]
              TypeDecl: declname='t', quals=[]
                IdentifierType: names=['Msp430TimerCapComP_7_cc_t']
        ExprList: 
          Assignment: op='='
            StructRef: type='.'
              ID: name='f'
            ID: name='x'
      Return: 
        StructRef: type='.'
          ID: name='c'
          ID: name='t'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_7_Control_getControl', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_7_Control_getControl', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_7_cc_t']
    Compound: 
      Return: 
        FuncCall: 
          ID: name='Msp430TimerCapComP_7_int2CC'
          ExprList: 
            UnaryOp: op='*'
              Cast: 
                Typename: quals=['volatile']
                  PtrDecl: quals=[]
                    TypeDecl: declname=None, quals=['volatile']
                      IdentifierType: names=['uint16_t']
                Constant: type='int', value='394U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_7_Event_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_7_Event_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      If: 
        StructRef: type='.'
          FuncCall: 
            ID: name='Msp430TimerCapComP_7_Control_getControl'
          ID: name='cap'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_7_Capture_captured'
            ExprList: 
              FuncCall: 
                ID: name='Msp430TimerCapComP_7_Capture_getEvent'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_7_Compare_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_8_Compare_default_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_8_Compare_default_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_8_Compare_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_8_Compare_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_8_Compare_default_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_8_Capture_getEvent', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_8_Capture_getEvent', quals=[]
          IdentifierType: names=['uint16_t']
    Compound: 
      Return: 
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint16_t']
            Constant: type='int', value='412U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_8_Capture_default_captured', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='n', quals=[], storage=[]
            TypeDecl: declname='n', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_8_Capture_default_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_8_Capture_captured', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='time', quals=[], storage=[]
            TypeDecl: declname='time', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_8_Capture_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_8_Capture_default_captured'
        ExprList: 
          ID: name='time'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_8_int2CC', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='x', quals=[], storage=[]
            TypeDecl: declname='x', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_8_int2CC', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_8_cc_t']
    Compound: 
      Decl: name='c', quals=[], storage=[]
        TypeDecl: declname='c', quals=[]
          Union: name='Msp430TimerCapComP_8___nesc_unnamed4284', packed=False
            Decl: name='f', quals=[], storage=[]
              TypeDecl: declname='f', quals=[]
                IdentifierType: names=['uint16_t']
            Decl: name='t', quals=[], storage=[]
              TypeDecl: declname='t', quals=[]
                IdentifierType: names=['Msp430TimerCapComP_8_cc_t']
        ExprList: 
          Assignment: op='='
            StructRef: type='.'
              ID: name='f'
            ID: name='x'
      Return: 
        StructRef: type='.'
          ID: name='c'
          ID: name='t'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_8_Control_getControl', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_8_Control_getControl', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_8_cc_t']
    Compound: 
      Return: 
        FuncCall: 
          ID: name='Msp430TimerCapComP_8_int2CC'
          ExprList: 
            UnaryOp: op='*'
              Cast: 
                Typename: quals=['volatile']
                  PtrDecl: quals=[]
                    TypeDecl: declname=None, quals=['volatile']
                      IdentifierType: names=['uint16_t']
                Constant: type='int', value='396U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_8_Event_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_8_Event_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      If: 
        StructRef: type='.'
          FuncCall: 
            ID: name='Msp430TimerCapComP_8_Control_getControl'
          ID: name='cap'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_8_Capture_captured'
            ExprList: 
              FuncCall: 
                ID: name='Msp430TimerCapComP_8_Capture_getEvent'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_8_Compare_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_9_Compare_default_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_9_Compare_default_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_9_Compare_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_9_Compare_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_9_Compare_default_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_9_Capture_getEvent', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_9_Capture_getEvent', quals=[]
          IdentifierType: names=['uint16_t']
    Compound: 
      Return: 
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint16_t']
            Constant: type='int', value='414U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_9_Capture_default_captured', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='n', quals=[], storage=[]
            TypeDecl: declname='n', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_9_Capture_default_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerCapComP_9_Capture_captured', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='time', quals=[], storage=[]
            TypeDecl: declname='time', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_9_Capture_captured', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_9_Capture_default_captured'
        ExprList: 
          ID: name='time'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_9_int2CC', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='x', quals=[], storage=[]
            TypeDecl: declname='x', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='Msp430TimerCapComP_9_int2CC', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_9_cc_t']
    Compound: 
      Decl: name='c', quals=[], storage=[]
        TypeDecl: declname='c', quals=[]
          Union: name='Msp430TimerCapComP_9___nesc_unnamed4285', packed=False
            Decl: name='f', quals=[], storage=[]
              TypeDecl: declname='f', quals=[]
                IdentifierType: names=['uint16_t']
            Decl: name='t', quals=[], storage=[]
              TypeDecl: declname='t', quals=[]
                IdentifierType: names=['Msp430TimerCapComP_9_cc_t']
        ExprList: 
          Assignment: op='='
            StructRef: type='.'
              ID: name='f'
            ID: name='x'
      Return: 
        StructRef: type='.'
          ID: name='c'
          ID: name='t'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_9_Control_getControl', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_9_Control_getControl', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_9_cc_t']
    Compound: 
      Return: 
        FuncCall: 
          ID: name='Msp430TimerCapComP_9_int2CC'
          ExprList: 
            UnaryOp: op='*'
              Cast: 
                Typename: quals=['volatile']
                  PtrDecl: quals=[]
                    TypeDecl: declname=None, quals=['volatile']
                      IdentifierType: names=['uint16_t']
                Constant: type='int', value='398U'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_9_Event_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_9_Event_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      If: 
        StructRef: type='.'
          FuncCall: 
            ID: name='Msp430TimerCapComP_9_Control_getControl'
          ID: name='cap'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_9_Capture_captured'
            ExprList: 
              FuncCall: 
                ID: name='Msp430TimerCapComP_9_Capture_getEvent'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_9_Compare_fired'
  FuncDef: 
    Decl: name='Msp430TimerP_1_VectorTimerX1_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerP_1_VectorTimerX1_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='n', quals=[], storage=[]
        TypeDecl: declname='n', quals=[]
          IdentifierType: names=['uint8_t']
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint16_t']
            Constant: type='int', value='286U'
      FuncCall: 
        ID: name='Msp430TimerP_1_Event_fired'
        ExprList: 
          BinaryOp: op='>>'
            ID: name='n'
            Constant: type='int', value='1'
  FuncDef: 
    Decl: name='Msp430TimerCommonP_VectorTimerB1_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCommonP_VectorTimerB1_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerP_1_VectorTimerX1_fired'
  FuncDef: 
    Decl: name='SchedulerBasicP_Scheduler_init', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='SchedulerBasicP_Scheduler_init', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Compound: 
        FuncCall: 
          ID: name='memset'
          ExprList: 
            Cast: 
              Typename: quals=[]
                PtrDecl: quals=[]
                  TypeDecl: declname=None, quals=[]
                    IdentifierType: names=['void']
              ID: name='SchedulerBasicP_m_next'
            ID: name='SchedulerBasicP_NO_TASK'
            UnaryOp: op='sizeof'
              ID: name='SchedulerBasicP_m_next'
        Assignment: op='='
          ID: name='SchedulerBasicP_m_head'
          ID: name='SchedulerBasicP_NO_TASK'
        Assignment: op='='
          ID: name='SchedulerBasicP_m_tail'
          ID: name='SchedulerBasicP_NO_TASK'
  FuncDef: 
    Decl: name='RealMainP_Scheduler_init', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='RealMainP_Scheduler_init', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='SchedulerBasicP_Scheduler_init'
  FuncDef: 
    Decl: name='HplMsp430GeneralIOP_38_IO_set', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='HplMsp430GeneralIOP_38_IO_set', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='|='
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint8_t']
            Constant: type='int', value='49U'
        BinaryOp: op='<<'
          Constant: type='int', value='0x01'
          Constant: type='int', value='6'
  FuncDef: 
    Decl: name='Msp430GpioC_2_HplGeneralIO_set', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430GpioC_2_HplGeneralIO_set', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='HplMsp430GeneralIOP_38_IO_set'
  FuncDef: 
    Decl: name='Msp430GpioC_2_GeneralIO_set', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430GpioC_2_GeneralIO_set', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430GpioC_2_HplGeneralIO_set'
  FuncDef: 
    Decl: name='LedsP_Led2_set', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='LedsP_Led2_set', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430GpioC_2_GeneralIO_set'
  FuncDef: 
    Decl: name='HplMsp430GeneralIOP_37_IO_set', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='HplMsp430GeneralIOP_37_IO_set', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='|='
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint8_t']
            Constant: type='int', value='49U'
        BinaryOp: op='<<'
          Constant: type='int', value='0x01'
          Constant: type='int', value='5'
  FuncDef: 
    Decl: name='Msp430GpioC_1_HplGeneralIO_set', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430GpioC_1_HplGeneralIO_set', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='HplMsp430GeneralIOP_37_IO_set'
  FuncDef: 
    Decl: name='Msp430GpioC_1_GeneralIO_set', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430GpioC_1_GeneralIO_set', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430GpioC_1_HplGeneralIO_set'
  FuncDef: 
    Decl: name='LedsP_Led1_set', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='LedsP_Led1_set', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430GpioC_1_GeneralIO_set'
  FuncDef: 
    Decl: name='HplMsp430GeneralIOP_36_IO_set', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='HplMsp430GeneralIOP_36_IO_set', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='|='
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint8_t']
            Constant: type='int', value='49U'
        BinaryOp: op='<<'
          Constant: type='int', value='0x01'
          Constant: type='int', value='4'
  FuncDef: 
    Decl: name='Msp430GpioC_0_HplGeneralIO_set', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430GpioC_0_HplGeneralIO_set', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='HplMsp430GeneralIOP_36_IO_set'
  FuncDef: 
    Decl: name='Msp430GpioC_0_GeneralIO_set', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430GpioC_0_GeneralIO_set', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430GpioC_0_HplGeneralIO_set'
  FuncDef: 
    Decl: name='LedsP_Led0_set', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='LedsP_Led0_set', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430GpioC_0_GeneralIO_set'
  FuncDef: 
    Decl: name='HplMsp430GeneralIOP_38_IO_makeOutput', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='HplMsp430GeneralIOP_38_IO_makeOutput', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='|='
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint8_t']
            Constant: type='int', value='50U'
        BinaryOp: op='<<'
          Constant: type='int', value='0x01'
          Constant: type='int', value='6'
  FuncDef: 
    Decl: name='Msp430GpioC_2_HplGeneralIO_makeOutput', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430GpioC_2_HplGeneralIO_makeOutput', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='HplMsp430GeneralIOP_38_IO_makeOutput'
  FuncDef: 
    Decl: name='Msp430GpioC_2_GeneralIO_makeOutput', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430GpioC_2_GeneralIO_makeOutput', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430GpioC_2_HplGeneralIO_makeOutput'
  FuncDef: 
    Decl: name='LedsP_Led2_makeOutput', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='LedsP_Led2_makeOutput', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430GpioC_2_GeneralIO_makeOutput'
  FuncDef: 
    Decl: name='HplMsp430GeneralIOP_37_IO_makeOutput', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='HplMsp430GeneralIOP_37_IO_makeOutput', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='|='
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint8_t']
            Constant: type='int', value='50U'
        BinaryOp: op='<<'
          Constant: type='int', value='0x01'
          Constant: type='int', value='5'
  FuncDef: 
    Decl: name='Msp430GpioC_1_HplGeneralIO_makeOutput', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430GpioC_1_HplGeneralIO_makeOutput', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='HplMsp430GeneralIOP_37_IO_makeOutput'
  FuncDef: 
    Decl: name='Msp430GpioC_1_GeneralIO_makeOutput', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430GpioC_1_GeneralIO_makeOutput', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430GpioC_1_HplGeneralIO_makeOutput'
  FuncDef: 
    Decl: name='LedsP_Led1_makeOutput', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='LedsP_Led1_makeOutput', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430GpioC_1_GeneralIO_makeOutput'
  FuncDef: 
    Decl: name='HplMsp430GeneralIOP_36_IO_makeOutput', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='HplMsp430GeneralIOP_36_IO_makeOutput', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='|='
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint8_t']
            Constant: type='int', value='50U'
        BinaryOp: op='<<'
          Constant: type='int', value='0x01'
          Constant: type='int', value='4'
  FuncDef: 
    Decl: name='Msp430GpioC_0_HplGeneralIO_makeOutput', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430GpioC_0_HplGeneralIO_makeOutput', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='HplMsp430GeneralIOP_36_IO_makeOutput'
  FuncDef: 
    Decl: name='Msp430GpioC_0_GeneralIO_makeOutput', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430GpioC_0_GeneralIO_makeOutput', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430GpioC_0_HplGeneralIO_makeOutput'
  FuncDef: 
    Decl: name='LedsP_Led0_makeOutput', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='LedsP_Led0_makeOutput', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430GpioC_0_GeneralIO_makeOutput'
  FuncDef: 
    Decl: name='LedsP_Init_init', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='LedsP_Init_init', quals=[]
          IdentifierType: names=['error_t']
    Compound: 
      Compound: 
        FuncCall: 
          ID: name='LedsP_Led0_makeOutput'
        FuncCall: 
          ID: name='LedsP_Led1_makeOutput'
        FuncCall: 
          ID: name='LedsP_Led2_makeOutput'
        FuncCall: 
          ID: name='LedsP_Led0_set'
        FuncCall: 
          ID: name='LedsP_Led1_set'
        FuncCall: 
          ID: name='LedsP_Led2_set'
      Return: 
        ID: name='SUCCESS'
  FuncDef: 
    Decl: name='PlatformP_LedsInit_init', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='PlatformP_LedsInit_init', quals=[]
          IdentifierType: names=['error_t']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['char', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='LedsP_Init_init'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='TOSH_SET_SIMO0_PIN', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        TypeDecl: declname='TOSH_SET_SIMO0_PIN', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='r@"0x0019"', quals=['volatile'], storage=['static']
        TypeDecl: declname='r@"0x0019"', quals=['volatile']
          IdentifierType: names=['uint8_t']
      Assignment: op='|='
        ID: name='r'
        BinaryOp: op='<<'
          Constant: type='int', value='1'
          Constant: type='int', value='1'
  FuncDef: 
    Decl: name='TOSH_SET_UCLK0_PIN', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        TypeDecl: declname='TOSH_SET_UCLK0_PIN', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='r@"0x0019"', quals=['volatile'], storage=['static']
        TypeDecl: declname='r@"0x0019"', quals=['volatile']
          IdentifierType: names=['uint8_t']
      Assignment: op='|='
        ID: name='r'
        BinaryOp: op='<<'
          Constant: type='int', value='1'
          Constant: type='int', value='3'
  FuncDef: 
    Decl: name='TOSH_SET_FLASH_CS_PIN', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        TypeDecl: declname='TOSH_SET_FLASH_CS_PIN', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='r@"0x001D"', quals=['volatile'], storage=['static']
        TypeDecl: declname='r@"0x001D"', quals=['volatile']
          IdentifierType: names=['uint8_t']
      Assignment: op='|='
        ID: name='r'
        BinaryOp: op='<<'
          Constant: type='int', value='1'
          Constant: type='int', value='4'
  FuncDef: 
    Decl: name='TOSH_CLR_UCLK0_PIN', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        TypeDecl: declname='TOSH_CLR_UCLK0_PIN', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='r@"0x0019"', quals=['volatile'], storage=['static']
        TypeDecl: declname='r@"0x0019"', quals=['volatile']
          IdentifierType: names=['uint8_t']
      Assignment: op='&='
        ID: name='r'
        UnaryOp: op='~'
          BinaryOp: op='<<'
            Constant: type='int', value='1'
            Constant: type='int', value='3'
  FuncDef: 
    Decl: name='TOSH_CLR_FLASH_CS_PIN', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        TypeDecl: declname='TOSH_CLR_FLASH_CS_PIN', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='r@"0x001D"', quals=['volatile'], storage=['static']
        TypeDecl: declname='r@"0x001D"', quals=['volatile']
          IdentifierType: names=['uint8_t']
      Assignment: op='&='
        ID: name='r'
        UnaryOp: op='~'
          BinaryOp: op='<<'
            Constant: type='int', value='1'
            Constant: type='int', value='4'
  FuncDef: 
    Decl: name='MotePlatformC_TOSH_wait', quals=[], storage=['__inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='MotePlatformC_TOSH_wait', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='TOSH_SET_FLASH_HOLD_PIN', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        TypeDecl: declname='TOSH_SET_FLASH_HOLD_PIN', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='r@"0x001D"', quals=['volatile'], storage=['static']
        TypeDecl: declname='r@"0x001D"', quals=['volatile']
          IdentifierType: names=['uint8_t']
      Assignment: op='|='
        ID: name='r'
        BinaryOp: op='<<'
          Constant: type='int', value='1'
          Constant: type='int', value='7'
  FuncDef: 
    Decl: name='TOSH_MAKE_FLASH_CS_OUTPUT', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        TypeDecl: declname='TOSH_MAKE_FLASH_CS_OUTPUT', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='r@"0x001E"', quals=['volatile'], storage=['static']
        TypeDecl: declname='r@"0x001E"', quals=['volatile']
          IdentifierType: names=['uint8_t']
      Assignment: op='|='
        ID: name='r'
        BinaryOp: op='<<'
          Constant: type='int', value='1'
          Constant: type='int', value='4'
  FuncDef: 
    Decl: name='TOSH_MAKE_FLASH_HOLD_OUTPUT', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        TypeDecl: declname='TOSH_MAKE_FLASH_HOLD_OUTPUT', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='r@"0x001E"', quals=['volatile'], storage=['static']
        TypeDecl: declname='r@"0x001E"', quals=['volatile']
          IdentifierType: names=['uint8_t']
      Assignment: op='|='
        ID: name='r'
        BinaryOp: op='<<'
          Constant: type='int', value='1'
          Constant: type='int', value='7'
  FuncDef: 
    Decl: name='TOSH_MAKE_UCLK0_OUTPUT', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        TypeDecl: declname='TOSH_MAKE_UCLK0_OUTPUT', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='r@"0x001A"', quals=['volatile'], storage=['static']
        TypeDecl: declname='r@"0x001A"', quals=['volatile']
          IdentifierType: names=['uint8_t']
      Assignment: op='|='
        ID: name='r'
        BinaryOp: op='<<'
          Constant: type='int', value='1'
          Constant: type='int', value='3'
  FuncDef: 
    Decl: name='TOSH_MAKE_SIMO0_OUTPUT', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        TypeDecl: declname='TOSH_MAKE_SIMO0_OUTPUT', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='r@"0x001A"', quals=['volatile'], storage=['static']
        TypeDecl: declname='r@"0x001A"', quals=['volatile']
          IdentifierType: names=['uint8_t']
      Assignment: op='|='
        ID: name='r'
        BinaryOp: op='<<'
          Constant: type='int', value='1'
          Constant: type='int', value='1'
  FuncDef: 
    Decl: name='MotePlatformC_TOSH_FLASH_M25P_DP', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='MotePlatformC_TOSH_FLASH_M25P_DP', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='TOSH_MAKE_SIMO0_OUTPUT'
      FuncCall: 
        ID: name='TOSH_MAKE_UCLK0_OUTPUT'
      FuncCall: 
        ID: name='TOSH_MAKE_FLASH_HOLD_OUTPUT'
      FuncCall: 
        ID: name='TOSH_MAKE_FLASH_CS_OUTPUT'
      FuncCall: 
        ID: name='TOSH_SET_FLASH_HOLD_PIN'
      FuncCall: 
        ID: name='TOSH_SET_FLASH_CS_PIN'
      FuncCall: 
        ID: name='MotePlatformC_TOSH_wait'
      FuncCall: 
        ID: name='TOSH_CLR_FLASH_CS_PIN'
      FuncCall: 
        ID: name='TOSH_CLR_UCLK0_PIN'
      FuncCall: 
        ID: name='MotePlatformC_TOSH_FLASH_M25P_DP_bit'
        ExprList: 
          ID: name='TRUE'
      FuncCall: 
        ID: name='MotePlatformC_TOSH_FLASH_M25P_DP_bit'
        ExprList: 
          ID: name='FALSE'
      FuncCall: 
        ID: name='MotePlatformC_TOSH_FLASH_M25P_DP_bit'
        ExprList: 
          ID: name='TRUE'
      FuncCall: 
        ID: name='MotePlatformC_TOSH_FLASH_M25P_DP_bit'
        ExprList: 
          ID: name='TRUE'
      FuncCall: 
        ID: name='MotePlatformC_TOSH_FLASH_M25P_DP_bit'
        ExprList: 
          ID: name='TRUE'
      FuncCall: 
        ID: name='MotePlatformC_TOSH_FLASH_M25P_DP_bit'
        ExprList: 
          ID: name='FALSE'
      FuncCall: 
        ID: name='MotePlatformC_TOSH_FLASH_M25P_DP_bit'
        ExprList: 
          ID: name='FALSE'
      FuncCall: 
        ID: name='MotePlatformC_TOSH_FLASH_M25P_DP_bit'
        ExprList: 
          ID: name='TRUE'
      FuncCall: 
        ID: name='TOSH_SET_FLASH_CS_PIN'
      FuncCall: 
        ID: name='TOSH_SET_UCLK0_PIN'
      FuncCall: 
        ID: name='TOSH_SET_SIMO0_PIN'
  FuncDef: 
    Decl: name='MotePlatformC_uwait', quals=[], storage=['__inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='u', quals=[], storage=[]
            TypeDecl: declname='u', quals=[]
              IdentifierType: names=['uint16_t']
        TypeDecl: declname='MotePlatformC_uwait', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='t0', quals=[], storage=[]
        TypeDecl: declname='t0', quals=[]
          IdentifierType: names=['uint16_t']
        ID: name='TA0R'
      While: 
        BinaryOp: op='<='
          BinaryOp: op='-'
            ID: name='TA0R'
            ID: name='t0'
          ID: name='u'
  FuncDef: 
    Decl: name='MotePlatformC_Init_init', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='MotePlatformC_Init_init', quals=[]
          IdentifierType: names=['error_t']
    Compound: 
      Compound: 
        Assignment: op='='
          ID: name='P1SEL'
          Constant: type='int', value='0'
        Assignment: op='='
          ID: name='P2SEL'
          Constant: type='int', value='0'
        Assignment: op='='
          ID: name='P3SEL'
          Constant: type='int', value='0'
        Assignment: op='='
          ID: name='P4SEL'
          Constant: type='int', value='0'
        Assignment: op='='
          ID: name='P5SEL'
          Constant: type='int', value='0'
        Assignment: op='='
          ID: name='P6SEL'
          Constant: type='int', value='0'
        Assignment: op='='
          ID: name='P1OUT'
          Constant: type='int', value='0x00'
        Assignment: op='='
          ID: name='P1DIR'
          Constant: type='int', value='0xe0'
        Assignment: op='='
          ID: name='P2OUT'
          Constant: type='int', value='0x30'
        Assignment: op='='
          ID: name='P2DIR'
          Constant: type='int', value='0x7b'
        Assignment: op='='
          ID: name='P3OUT'
          Constant: type='int', value='0x00'
        Assignment: op='='
          ID: name='P3DIR'
          Constant: type='int', value='0xf1'
        Assignment: op='='
          ID: name='P4OUT'
          Constant: type='int', value='0xdd'
        Assignment: op='='
          ID: name='P4DIR'
          Constant: type='int', value='0xfd'
        Assignment: op='='
          ID: name='P5OUT'
          Constant: type='int', value='0xff'
        Assignment: op='='
          ID: name='P5DIR'
          Constant: type='int', value='0xff'
        Assignment: op='='
          ID: name='P6OUT'
          Constant: type='int', value='0x00'
        Assignment: op='='
          ID: name='P6DIR'
          Constant: type='int', value='0xff'
        Assignment: op='='
          ID: name='P1IE'
          Constant: type='int', value='0'
        Assignment: op='='
          ID: name='P2IE'
          Constant: type='int', value='0'
        FuncCall: 
          ID: name='MotePlatformC_uwait'
          ExprList: 
            BinaryOp: op='*'
              Constant: type='int', value='1024'
              Constant: type='int', value='10'
        FuncCall: 
          ID: name='MotePlatformC_TOSH_FLASH_M25P_DP'
      Return: 
        ID: name='SUCCESS'
  FuncDef: 
    Decl: name='PlatformP_MoteInit_init', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='PlatformP_MoteInit_init', quals=[]
          IdentifierType: names=['error_t']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['char', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='MotePlatformC_Init_init'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='Msp430ClockP_startTimerB', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430ClockP_startTimerB', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='='
        ID: name='Msp430ClockP_TBCTL'
        BinaryOp: op='|'
          Constant: type='int', value='0x0020'
          BinaryOp: op='&'
            ID: name='Msp430ClockP_TBCTL'
            UnaryOp: op='~'
              BinaryOp: op='|'
                Constant: type='int', value='0x0020'
                Constant: type='int', value='0x0010'
  FuncDef: 
    Decl: name='Msp430ClockP_startTimerA', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430ClockP_startTimerA', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='='
        ID: name='Msp430ClockP_TA0CTL'
        BinaryOp: op='|'
          Constant: type='int', value='0x0020'
          BinaryOp: op='&'
            ID: name='Msp430ClockP_TA0CTL'
            UnaryOp: op='~'
              BinaryOp: op='|'
                Constant: type='int', value='0x0020'
                Constant: type='int', value='0x0010'
  FuncDef: 
    Decl: name='Msp430ClockP_Msp430ClockInit_defaultInitTimerB', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430ClockP_Msp430ClockInit_defaultInitTimerB', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='='
        ID: name='TBR'
        Constant: type='int', value='0'
      Assignment: op='='
        ID: name='Msp430ClockP_TBCTL'
        BinaryOp: op='|'
          Constant: type='int', value='0x0100'
          Constant: type='int', value='0x0002'
  FuncDef: 
    Decl: name='Msp430ClockP_Msp430ClockInit_default_initTimerB', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430ClockP_Msp430ClockInit_default_initTimerB', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430ClockP_Msp430ClockInit_defaultInitTimerB'
  FuncDef: 
    Decl: name='Msp430ClockP_Msp430ClockInit_initTimerB', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430ClockP_Msp430ClockInit_initTimerB', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430ClockP_Msp430ClockInit_default_initTimerB'
  FuncDef: 
    Decl: name='Msp430ClockP_Msp430ClockInit_defaultInitTimerA', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430ClockP_Msp430ClockInit_defaultInitTimerA', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='='
        ID: name='TA0R'
        Constant: type='int', value='0'
      Assignment: op='='
        ID: name='Msp430ClockP_TA0CTL'
        BinaryOp: op='|'
          Constant: type='int', value='0x0200'
          Constant: type='int', value='0x0002'
  FuncDef: 
    Decl: name='Msp430ClockP_Msp430ClockInit_default_initTimerA', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430ClockP_Msp430ClockInit_default_initTimerA', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430ClockP_Msp430ClockInit_defaultInitTimerA'
  FuncDef: 
    Decl: name='Msp430ClockP_Msp430ClockInit_initTimerA', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430ClockP_Msp430ClockInit_initTimerA', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430ClockP_Msp430ClockInit_default_initTimerA'
  FuncDef: 
    Decl: name='Msp430ClockP_Msp430ClockInit_defaultInitClocks', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430ClockP_Msp430ClockInit_defaultInitClocks', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='='
        ID: name='BCSCTL1'
        BinaryOp: op='|'
          Constant: type='int', value='0x80'
          BinaryOp: op='&'
            ID: name='BCSCTL1'
            BinaryOp: op='|'
              BinaryOp: op='|'
                Constant: type='int', value='0x04'
                Constant: type='int', value='0x02'
              Constant: type='int', value='0x01'
      Assignment: op='='
        ID: name='BCSCTL2'
        Constant: type='int', value='0x04'
      Assignment: op='&='
        ID: name='Msp430ClockP_IE1'
        UnaryOp: op='~'
          BinaryOp: op='<<'
            Constant: type='int', value='1'
            Constant: type='int', value='1'
  FuncDef: 
    Decl: name='Msp430ClockP_Msp430ClockInit_default_initClocks', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430ClockP_Msp430ClockInit_default_initClocks', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430ClockP_Msp430ClockInit_defaultInitClocks'
  FuncDef: 
    Decl: name='Msp430ClockP_Msp430ClockInit_initClocks', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430ClockP_Msp430ClockInit_initClocks', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430ClockP_Msp430ClockInit_default_initClocks'
  FuncDef: 
    Decl: name='Msp430ClockP_test_calib_busywait_delta', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='calib', quals=[], storage=[]
            TypeDecl: declname='calib', quals=[]
              IdentifierType: names=['int']
        TypeDecl: declname='Msp430ClockP_test_calib_busywait_delta', quals=[]
          IdentifierType: names=['uint16_t']
    Compound: 
      Decl: name='aclk_count', quals=[], storage=[]
        TypeDecl: declname='aclk_count', quals=[]
          IdentifierType: names=['int8_t']
        Constant: type='int', value='2'
      Decl: name='dco_prev', quals=[], storage=[]
        TypeDecl: declname='dco_prev', quals=[]
          IdentifierType: names=['uint16_t']
        Constant: type='int', value='0'
      Decl: name='dco_curr', quals=[], storage=[]
        TypeDecl: declname='dco_curr', quals=[]
          IdentifierType: names=['uint16_t']
        Constant: type='int', value='0'
      FuncCall: 
        ID: name='Msp430ClockP_set_dco_calib'
        ExprList: 
          ID: name='calib'
      While: 
        BinaryOp: op='>'
          UnaryOp: op='p--'
            ID: name='aclk_count'
          Constant: type='int', value='0'
        Compound: 
          Assignment: op='='
            ID: name='TBCCR0'
            BinaryOp: op='+'
              ID: name='TBR'
              ID: name='Msp430ClockP_ACLK_CALIB_PERIOD'
          Assignment: op='&='
            ID: name='TBCCTL0'
            UnaryOp: op='~'
              Constant: type='int', value='0x0001'
          While: 
            BinaryOp: op='=='
              BinaryOp: op='&'
                ID: name='TBCCTL0'
                Constant: type='int', value='0x0001'
              Constant: type='int', value='0'
          Assignment: op='='
            ID: name='dco_prev'
            ID: name='dco_curr'
          Assignment: op='='
            ID: name='dco_curr'
            ID: name='TA0R'
      Return: 
        BinaryOp: op='-'
          ID: name='dco_curr'
          ID: name='dco_prev'
  FuncDef: 
    Decl: name='Msp430ClockP_busyCalibrateDco', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430ClockP_busyCalibrateDco', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='calib', quals=[], storage=[]
        TypeDecl: declname='calib', quals=[]
          IdentifierType: names=['int']
      Decl: name='step', quals=[], storage=[]
        TypeDecl: declname='step', quals=[]
          IdentifierType: names=['int']
      For: 
        ExprList: 
          Assignment: op='='
            ID: name='calib'
            Constant: type='int', value='0'
          Assignment: op='='
            ID: name='step'
            Constant: type='int', value='0x800'
        BinaryOp: op='!='
          ID: name='step'
          Constant: type='int', value='0'
        Assignment: op='>>='
          ID: name='step'
          Constant: type='int', value='1'
        Compound: 
          If: 
            BinaryOp: op='<='
              FuncCall: 
                ID: name='Msp430ClockP_test_calib_busywait_delta'
                ExprList: 
                  BinaryOp: op='|'
                    ID: name='calib'
                    ID: name='step'
              ID: name='Msp430ClockP_TARGET_DCO_DELTA'
            Compound: 
              Assignment: op='|='
                ID: name='calib'
                ID: name='step'
      If: 
        BinaryOp: op='=='
          BinaryOp: op='&'
            ID: name='calib'
            Constant: type='int', value='0x0e0'
          Constant: type='int', value='0x0e0'
        Compound: 
          Assignment: op='&='
            ID: name='calib'
            UnaryOp: op='~'
              Constant: type='int', value='0x01f'
      FuncCall: 
        ID: name='Msp430ClockP_set_dco_calib'
        ExprList: 
          ID: name='calib'
  FuncDef: 
    Decl: name='Msp430ClockP_Msp430ClockInit_defaultSetupDcoCalibrate', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430ClockP_Msp430ClockInit_defaultSetupDcoCalibrate', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='='
        ID: name='Msp430ClockP_TA0CTL'
        BinaryOp: op='|'
          Constant: type='int', value='0x0200'
          Constant: type='int', value='0x0020'
      Assignment: op='='
        ID: name='Msp430ClockP_TBCTL'
        BinaryOp: op='|'
          Constant: type='int', value='0x0100'
          Constant: type='int', value='0x0020'
      Assignment: op='='
        ID: name='BCSCTL1'
        BinaryOp: op='|'
          Constant: type='int', value='0x80'
          Constant: type='int', value='0x04'
      Assignment: op='='
        ID: name='BCSCTL2'
        Constant: type='int', value='0'
      Assignment: op='='
        ID: name='TBCCTL0'
        Constant: type='int', value='0x4000'
  FuncDef: 
    Decl: name='Msp430ClockP_Msp430ClockInit_default_setupDcoCalibrate', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430ClockP_Msp430ClockInit_default_setupDcoCalibrate', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430ClockP_Msp430ClockInit_defaultSetupDcoCalibrate'
  FuncDef: 
    Decl: name='Msp430ClockP_Msp430ClockInit_setupDcoCalibrate', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430ClockP_Msp430ClockInit_setupDcoCalibrate', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430ClockP_Msp430ClockInit_default_setupDcoCalibrate'
  FuncDef: 
    Decl: name='Msp430ClockP_Init_init', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430ClockP_Init_init', quals=[]
          IdentifierType: names=['error_t']
    Compound: 
      Assignment: op='='
        ID: name='Msp430ClockP_TA0CTL'
        Constant: type='int', value='0x0004'
      Assignment: op='='
        ID: name='Msp430ClockP_TA0IV'
        Constant: type='int', value='0'
      Assignment: op='='
        ID: name='Msp430ClockP_TBCTL'
        Constant: type='int', value='0x0004'
      Assignment: op='='
        ID: name='Msp430ClockP_TBIV'
        Constant: type='int', value='0'
      Compound: 
        FuncCall: 
          ID: name='Msp430ClockP_Msp430ClockInit_setupDcoCalibrate'
        FuncCall: 
          ID: name='Msp430ClockP_busyCalibrateDco'
        FuncCall: 
          ID: name='Msp430ClockP_Msp430ClockInit_initClocks'
        FuncCall: 
          ID: name='Msp430ClockP_Msp430ClockInit_initTimerA'
        FuncCall: 
          ID: name='Msp430ClockP_Msp430ClockInit_initTimerB'
        FuncCall: 
          ID: name='Msp430ClockP_startTimerA'
        FuncCall: 
          ID: name='Msp430ClockP_startTimerB'
      Return: 
        ID: name='SUCCESS'
  FuncDef: 
    Decl: name='PlatformP_MoteClockInit_init', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='PlatformP_MoteClockInit_init', quals=[]
          IdentifierType: names=['error_t']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['char', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='Msp430ClockP_Init_init'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='PlatformP_Init_init', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='PlatformP_Init_init', quals=[]
          IdentifierType: names=['error_t']
    Compound: 
      FuncCall: 
        ID: name='PlatformP_MoteClockInit_init'
      FuncCall: 
        ID: name='PlatformP_MoteInit_init'
      FuncCall: 
        ID: name='PlatformP_LedsInit_init'
      Return: 
        ID: name='SUCCESS'
  FuncDef: 
    Decl: name='RealMainP_PlatformInit_init', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='RealMainP_PlatformInit_init', quals=[]
          IdentifierType: names=['error_t']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['char', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='PlatformP_Init_init'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='TOSH_CLR_SIMO0_PIN', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        TypeDecl: declname='TOSH_CLR_SIMO0_PIN', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='r@"0x0019"', quals=['volatile'], storage=['static']
        TypeDecl: declname='r@"0x0019"', quals=['volatile']
          IdentifierType: names=['uint8_t']
      Assignment: op='&='
        ID: name='r'
        UnaryOp: op='~'
          BinaryOp: op='<<'
            Constant: type='int', value='1'
            Constant: type='int', value='1'
  FuncDef: 
    Decl: name='RealMainP_Scheduler_runNextTask', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='RealMainP_Scheduler_runNextTask', quals=[]
          IdentifierType: names=['bool']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['char', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='SchedulerBasicP_Scheduler_runNextTask'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='Msp430AlarmC_0_Alarm_stop', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430AlarmC_0_Alarm_stop', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430AlarmC_0_Msp430TimerControl_disableEvents'
  FuncDef: 
    Decl: name='TransformAlarmC_0_AlarmFrom_stop', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='TransformAlarmC_0_AlarmFrom_stop', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430AlarmC_0_Alarm_stop'
  FuncDef: 
    Decl: name='TransformAlarmC_0_Alarm_stop', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='TransformAlarmC_0_Alarm_stop', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='TransformAlarmC_0_AlarmFrom_stop'
  FuncDef: 
    Decl: name='AlarmToTimerC_0_Alarm_stop', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='AlarmToTimerC_0_Alarm_stop', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='TransformAlarmC_0_Alarm_stop'
  FuncDef: 
    Decl: name='AlarmToTimerC_0_Timer_stop', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='AlarmToTimerC_0_Timer_stop', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='AlarmToTimerC_0_Alarm_stop'
  FuncDef: 
    Decl: name='VirtualizeTimerC_0_TimerFrom_stop', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='VirtualizeTimerC_0_TimerFrom_stop', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='AlarmToTimerC_0_Timer_stop'
  FuncDef: 
    Decl: name='HplMsp430GeneralIOP_36_IO_toggle', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='HplMsp430GeneralIOP_36_IO_toggle', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Compound: 
        Decl: name='__nesc_atomic', quals=[], storage=[]
          TypeDecl: declname='__nesc_atomic', quals=[]
            IdentifierType: names=['__nesc_atomic_t']
          FuncCall: 
            ID: name='__nesc_atomic_start'
        Assignment: op='^='
          UnaryOp: op='*'
            Cast: 
              Typename: quals=['volatile']
                PtrDecl: quals=[]
                  TypeDecl: declname=None, quals=['volatile']
                    IdentifierType: names=['uint8_t']
              Constant: type='int', value='49U'
          BinaryOp: op='<<'
            Constant: type='int', value='0x01'
            Constant: type='int', value='4'
        FuncCall: 
          ID: name='__nesc_atomic_end'
          ExprList: 
            ID: name='__nesc_atomic'
  FuncDef: 
    Decl: name='Msp430GpioC_0_HplGeneralIO_toggle', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430GpioC_0_HplGeneralIO_toggle', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='HplMsp430GeneralIOP_36_IO_toggle'
  FuncDef: 
    Decl: name='Msp430GpioC_0_GeneralIO_toggle', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430GpioC_0_GeneralIO_toggle', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430GpioC_0_HplGeneralIO_toggle'
  FuncDef: 
    Decl: name='LedsP_Led0_toggle', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='LedsP_Led0_toggle', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430GpioC_0_GeneralIO_toggle'
  FuncDef: 
    Decl: name='LedsP_Leds_led0Toggle', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='LedsP_Leds_led0Toggle', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='LedsP_Led0_toggle'
  FuncDef: 
    Decl: name='BlinkC_Leds_led0Toggle', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='BlinkC_Leds_led0Toggle', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='LedsP_Leds_led0Toggle'
  FuncDef: 
    Decl: name='BlinkC_Timer0_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='BlinkC_Timer0_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='BlinkC_Leds_led0Toggle'
  FuncDef: 
    Decl: name='HplMsp430GeneralIOP_37_IO_toggle', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='HplMsp430GeneralIOP_37_IO_toggle', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Compound: 
        Decl: name='__nesc_atomic', quals=[], storage=[]
          TypeDecl: declname='__nesc_atomic', quals=[]
            IdentifierType: names=['__nesc_atomic_t']
          FuncCall: 
            ID: name='__nesc_atomic_start'
        Assignment: op='^='
          UnaryOp: op='*'
            Cast: 
              Typename: quals=['volatile']
                PtrDecl: quals=[]
                  TypeDecl: declname=None, quals=['volatile']
                    IdentifierType: names=['uint8_t']
              Constant: type='int', value='49U'
          BinaryOp: op='<<'
            Constant: type='int', value='0x01'
            Constant: type='int', value='5'
        FuncCall: 
          ID: name='__nesc_atomic_end'
          ExprList: 
            ID: name='__nesc_atomic'
  FuncDef: 
    Decl: name='Msp430GpioC_1_HplGeneralIO_toggle', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430GpioC_1_HplGeneralIO_toggle', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='HplMsp430GeneralIOP_37_IO_toggle'
  FuncDef: 
    Decl: name='Msp430GpioC_1_GeneralIO_toggle', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430GpioC_1_GeneralIO_toggle', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430GpioC_1_HplGeneralIO_toggle'
  FuncDef: 
    Decl: name='LedsP_Led1_toggle', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='LedsP_Led1_toggle', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430GpioC_1_GeneralIO_toggle'
  FuncDef: 
    Decl: name='LedsP_Leds_led1Toggle', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='LedsP_Leds_led1Toggle', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='LedsP_Led1_toggle'
  FuncDef: 
    Decl: name='BlinkC_Leds_led1Toggle', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='BlinkC_Leds_led1Toggle', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='LedsP_Leds_led1Toggle'
  FuncDef: 
    Decl: name='BlinkC_Timer1_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='BlinkC_Timer1_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='BlinkC_Leds_led1Toggle'
  FuncDef: 
    Decl: name='HplMsp430GeneralIOP_38_IO_toggle', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='HplMsp430GeneralIOP_38_IO_toggle', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Compound: 
        Decl: name='__nesc_atomic', quals=[], storage=[]
          TypeDecl: declname='__nesc_atomic', quals=[]
            IdentifierType: names=['__nesc_atomic_t']
          FuncCall: 
            ID: name='__nesc_atomic_start'
        Assignment: op='^='
          UnaryOp: op='*'
            Cast: 
              Typename: quals=['volatile']
                PtrDecl: quals=[]
                  TypeDecl: declname=None, quals=['volatile']
                    IdentifierType: names=['uint8_t']
              Constant: type='int', value='49U'
          BinaryOp: op='<<'
            Constant: type='int', value='0x01'
            Constant: type='int', value='6'
        FuncCall: 
          ID: name='__nesc_atomic_end'
          ExprList: 
            ID: name='__nesc_atomic'
  FuncDef: 
    Decl: name='Msp430GpioC_2_HplGeneralIO_toggle', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430GpioC_2_HplGeneralIO_toggle', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='HplMsp430GeneralIOP_38_IO_toggle'
  FuncDef: 
    Decl: name='Msp430GpioC_2_GeneralIO_toggle', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430GpioC_2_GeneralIO_toggle', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430GpioC_2_HplGeneralIO_toggle'
  FuncDef: 
    Decl: name='LedsP_Led2_toggle', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='LedsP_Led2_toggle', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430GpioC_2_GeneralIO_toggle'
  FuncDef: 
    Decl: name='LedsP_Leds_led2Toggle', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='LedsP_Leds_led2Toggle', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='LedsP_Led2_toggle'
  FuncDef: 
    Decl: name='BlinkC_Leds_led2Toggle', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='BlinkC_Leds_led2Toggle', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='LedsP_Leds_led2Toggle'
  FuncDef: 
    Decl: name='BlinkC_Timer2_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='BlinkC_Timer2_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='BlinkC_Leds_led2Toggle'
  FuncDef: 
    Decl: name='VirtualizeTimerC_0_Timer_default_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='num', quals=[], storage=[]
            TypeDecl: declname='num', quals=[]
              IdentifierType: names=['uint8_t']
        TypeDecl: declname='VirtualizeTimerC_0_Timer_default_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='VirtualizeTimerC_0_Timer_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='arg_0x18a3ea0', quals=[], storage=[]
            TypeDecl: declname='arg_0x18a3ea0', quals=[]
              IdentifierType: names=['uint8_t']
        TypeDecl: declname='VirtualizeTimerC_0_Timer_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Switch: 
        ID: name='arg_0x18a3ea0'
        Compound: 
          Case: 
            Constant: type='int', value='0U'
            FuncCall: 
              ID: name='BlinkC_Timer0_fired'
          Break: 
          Case: 
            Constant: type='int', value='1U'
            FuncCall: 
              ID: name='BlinkC_Timer1_fired'
          Break: 
          Case: 
            Constant: type='int', value='2U'
            FuncCall: 
              ID: name='BlinkC_Timer2_fired'
          Break: 
          Default: 
            FuncCall: 
              ID: name='VirtualizeTimerC_0_Timer_default_fired'
              ExprList: 
                ID: name='arg_0x18a3ea0'
          Break: 
  FuncDef: 
    Decl: name='AlarmToTimerC_0_Alarm_startAt', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='t0', quals=[], storage=[]
            TypeDecl: declname='t0', quals=[]
              IdentifierType: names=['AlarmToTimerC_0_Alarm_size_type']
          Decl: name='dt', quals=[], storage=[]
            TypeDecl: declname='dt', quals=[]
              IdentifierType: names=['AlarmToTimerC_0_Alarm_size_type']
        TypeDecl: declname='AlarmToTimerC_0_Alarm_startAt', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='TransformAlarmC_0_Alarm_startAt'
        ExprList: 
          ID: name='t0'
          ID: name='dt'
  FuncDef: 
    Decl: name='AlarmToTimerC_0_start', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='t0', quals=[], storage=[]
            TypeDecl: declname='t0', quals=[]
              IdentifierType: names=['uint32_t']
          Decl: name='dt', quals=[], storage=[]
            TypeDecl: declname='dt', quals=[]
              IdentifierType: names=['uint32_t']
          Decl: name='oneshot', quals=[], storage=[]
            TypeDecl: declname='oneshot', quals=[]
              IdentifierType: names=['bool']
        TypeDecl: declname='AlarmToTimerC_0_start', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='='
        ID: name='AlarmToTimerC_0_m_dt'
        ID: name='dt'
      Assignment: op='='
        ID: name='AlarmToTimerC_0_m_oneshot'
        ID: name='oneshot'
      FuncCall: 
        ID: name='AlarmToTimerC_0_Alarm_startAt'
        ExprList: 
          ID: name='t0'
          ID: name='dt'
  FuncDef: 
    Decl: name='AlarmToTimerC_0_Timer_startOneShotAt', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='t0', quals=[], storage=[]
            TypeDecl: declname='t0', quals=[]
              IdentifierType: names=['uint32_t']
          Decl: name='dt', quals=[], storage=[]
            TypeDecl: declname='dt', quals=[]
              IdentifierType: names=['uint32_t']
        TypeDecl: declname='AlarmToTimerC_0_Timer_startOneShotAt', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='AlarmToTimerC_0_start'
        ExprList: 
          ID: name='t0'
          ID: name='dt'
          ID: name='TRUE'
  FuncDef: 
    Decl: name='VirtualizeTimerC_0_TimerFrom_startOneShotAt', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='t0', quals=[], storage=[]
            TypeDecl: declname='t0', quals=[]
              IdentifierType: names=['uint32_t']
          Decl: name='dt', quals=[], storage=[]
            TypeDecl: declname='dt', quals=[]
              IdentifierType: names=['uint32_t']
        TypeDecl: declname='VirtualizeTimerC_0_TimerFrom_startOneShotAt', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='AlarmToTimerC_0_Timer_startOneShotAt'
        ExprList: 
          ID: name='t0'
          ID: name='dt'
  FuncDef: 
    Decl: name='TransformAlarmC_0_Alarm_getAlarm', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='TransformAlarmC_0_Alarm_getAlarm', quals=[]
          IdentifierType: names=['TransformAlarmC_0_to_size_type']
    Compound: 
      Compound: 
        Decl: name='__nesc_atomic', quals=[], storage=[]
          TypeDecl: declname='__nesc_atomic', quals=[]
            IdentifierType: names=['__nesc_atomic_t']
          FuncCall: 
            ID: name='__nesc_atomic_start'
        Compound: 
          Decl: name='__nesc_temp', quals=[], storage=[]
            TypeDecl: declname='__nesc_temp', quals=[]
              IdentifierType: names=['TransformAlarmC_0_to_size_type']
            BinaryOp: op='+'
              ID: name='TransformAlarmC_0_m_t0'
              ID: name='TransformAlarmC_0_m_dt'
          Compound: 
            FuncCall: 
              ID: name='__nesc_atomic_end'
              ExprList: 
                ID: name='__nesc_atomic'
            Return: 
              ID: name='__nesc_temp'
        FuncCall: 
          ID: name='__nesc_atomic_end'
          ExprList: 
            ID: name='__nesc_atomic'
  FuncDef: 
    Decl: name='AlarmToTimerC_0_Alarm_getAlarm', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='AlarmToTimerC_0_Alarm_getAlarm', quals=[]
          IdentifierType: names=['AlarmToTimerC_0_Alarm_size_type']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['long', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='TransformAlarmC_0_Alarm_getAlarm'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='TransformAlarmC_0_Counter_get', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='TransformAlarmC_0_Counter_get', quals=[]
          IdentifierType: names=['TransformAlarmC_0_Counter_size_type']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['long', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='TransformCounterC_0_Counter_get'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='TransformAlarmC_0_Alarm_getNow', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='TransformAlarmC_0_Alarm_getNow', quals=[]
          IdentifierType: names=['TransformAlarmC_0_to_size_type']
    Compound: 
      Return: 
        FuncCall: 
          ID: name='TransformAlarmC_0_Counter_get'
  FuncDef: 
    Decl: name='AlarmToTimerC_0_Alarm_getNow', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='AlarmToTimerC_0_Alarm_getNow', quals=[]
          IdentifierType: names=['AlarmToTimerC_0_Alarm_size_type']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['long', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='TransformAlarmC_0_Alarm_getNow'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='AlarmToTimerC_0_Timer_getNow', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='AlarmToTimerC_0_Timer_getNow', quals=[]
          IdentifierType: names=['uint32_t']
    Compound: 
      Return: 
        FuncCall: 
          ID: name='AlarmToTimerC_0_Alarm_getNow'
  FuncDef: 
    Decl: name='VirtualizeTimerC_0_TimerFrom_getNow', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='VirtualizeTimerC_0_TimerFrom_getNow', quals=[]
          IdentifierType: names=['uint32_t']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['long', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='AlarmToTimerC_0_Timer_getNow'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='VirtualizeTimerC_0_TimerFrom_fired', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='VirtualizeTimerC_0_TimerFrom_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='VirtualizeTimerC_0_fireTimers'
        ExprList: 
          FuncCall: 
            ID: name='VirtualizeTimerC_0_TimerFrom_getNow'
  FuncDef: 
    Decl: name='AlarmToTimerC_0_Timer_fired', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='AlarmToTimerC_0_Timer_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='VirtualizeTimerC_0_TimerFrom_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_3_CC2int', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='x', quals=[], storage=[]
            TypeDecl: declname='x', quals=[]
              IdentifierType: names=['Msp430TimerCapComP_3_cc_t']
        TypeDecl: declname='Msp430TimerCapComP_3_CC2int', quals=[]
          IdentifierType: names=['uint16_t']
    Compound: 
      Decl: name='c', quals=[], storage=[]
        TypeDecl: declname='c', quals=[]
          Union: name='Msp430TimerCapComP_3___nesc_unnamed4286', packed=False
            Decl: name='f', quals=[], storage=[]
              TypeDecl: declname='f', quals=[]
                IdentifierType: names=['Msp430TimerCapComP_3_cc_t']
            Decl: name='t', quals=[], storage=[]
              TypeDecl: declname='t', quals=[]
                IdentifierType: names=['uint16_t']
        ExprList: 
          Assignment: op='='
            StructRef: type='.'
              ID: name='f'
            ID: name='x'
      Return: 
        StructRef: type='.'
          ID: name='c'
          ID: name='t'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_3_compareControl', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_3_compareControl', quals=[]
          IdentifierType: names=['uint16_t']
    Compound: 
      Decl: name='x', quals=[], storage=[]
        TypeDecl: declname='x', quals=[]
          IdentifierType: names=['Msp430TimerCapComP_3_cc_t']
        ExprList: 
          Assignment: op='='
            StructRef: type='.'
              ID: name='cm'
            Constant: type='int', value='1'
          Assignment: op='='
            StructRef: type='.'
              ID: name='ccis'
            Constant: type='int', value='0'
          Assignment: op='='
            StructRef: type='.'
              ID: name='clld'
            Constant: type='int', value='0'
          Assignment: op='='
            StructRef: type='.'
              ID: name='cap'
            Constant: type='int', value='0'
          Assignment: op='='
            StructRef: type='.'
              ID: name='ccie'
            Constant: type='int', value='0'
      Return: 
        FuncCall: 
          ID: name='Msp430TimerCapComP_3_CC2int'
          ExprList: 
            ID: name='x'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_3_Control_setControlAsCompare', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_3_Control_setControlAsCompare', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='='
        UnaryOp: op='*'
          Cast: 
            Typename: quals=['volatile']
              PtrDecl: quals=[]
                TypeDecl: declname=None, quals=['volatile']
                  IdentifierType: names=['uint16_t']
            Constant: type='int', value='386U'
        FuncCall: 
          ID: name='Msp430TimerCapComP_3_compareControl'
  FuncDef: 
    Decl: name='Msp430AlarmC_0_Msp430TimerControl_setControlAsCompare', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430AlarmC_0_Msp430TimerControl_setControlAsCompare', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCapComP_3_Control_setControlAsCompare'
  FuncDef: 
    Decl: name='Msp430AlarmC_0_Init_init', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430AlarmC_0_Init_init', quals=[]
          IdentifierType: names=['error_t']
    Compound: 
      FuncCall: 
        ID: name='Msp430AlarmC_0_Msp430TimerControl_disableEvents'
      FuncCall: 
        ID: name='Msp430AlarmC_0_Msp430TimerControl_setControlAsCompare'
      Return: 
        ID: name='SUCCESS'
  FuncDef: 
    Decl: name='RealMainP_SoftwareInit_init', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='RealMainP_SoftwareInit_init', quals=[]
          IdentifierType: names=['error_t']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['char', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='Msp430AlarmC_0_Init_init'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='BlinkC_Timer2_startPeriodic', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='dt', quals=[], storage=[]
            TypeDecl: declname='dt', quals=[]
              IdentifierType: names=['uint32_t']
        TypeDecl: declname='BlinkC_Timer2_startPeriodic', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='VirtualizeTimerC_0_Timer_startPeriodic'
        ExprList: 
          Constant: type='int', value='2U'
          ID: name='dt'
  FuncDef: 
    Decl: name='BlinkC_Timer1_startPeriodic', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='dt', quals=[], storage=[]
            TypeDecl: declname='dt', quals=[]
              IdentifierType: names=['uint32_t']
        TypeDecl: declname='BlinkC_Timer1_startPeriodic', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='VirtualizeTimerC_0_Timer_startPeriodic'
        ExprList: 
          Constant: type='int', value='1U'
          ID: name='dt'
  FuncDef: 
    Decl: name='BlinkC_Timer0_startPeriodic', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='dt', quals=[], storage=[]
            TypeDecl: declname='dt', quals=[]
              IdentifierType: names=['uint32_t']
        TypeDecl: declname='BlinkC_Timer0_startPeriodic', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='VirtualizeTimerC_0_Timer_startPeriodic'
        ExprList: 
          Constant: type='int', value='0U'
          ID: name='dt'
  FuncDef: 
    Decl: name='BlinkC_Boot_booted', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='BlinkC_Boot_booted', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='BlinkC_Timer0_startPeriodic'
        ExprList: 
          Constant: type='int', value='250'
      FuncCall: 
        ID: name='BlinkC_Timer1_startPeriodic'
        ExprList: 
          Constant: type='int', value='500'
      FuncCall: 
        ID: name='BlinkC_Timer2_startPeriodic'
        ExprList: 
          Constant: type='int', value='1000'
  FuncDef: 
    Decl: name='RealMainP_Boot_booted', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='RealMainP_Boot_booted', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='BlinkC_Boot_booted'
  FuncDef: 
    Decl: name='VirtualizeTimerC_0_updateFromTimer_postTask', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='VirtualizeTimerC_0_updateFromTimer_postTask', quals=[]
          IdentifierType: names=['error_t']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['char', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='SchedulerBasicP_TaskBasic_postTask'
          ExprList: 
            ID: name='VirtualizeTimerC_0_updateFromTimer'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='VirtualizeTimerC_0_startTimer', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='num', quals=[], storage=[]
            TypeDecl: declname='num', quals=[]
              IdentifierType: names=['uint8_t']
          Decl: name='t0', quals=[], storage=[]
            TypeDecl: declname='t0', quals=[]
              IdentifierType: names=['uint32_t']
          Decl: name='dt', quals=[], storage=[]
            TypeDecl: declname='dt', quals=[]
              IdentifierType: names=['uint32_t']
          Decl: name='isoneshot', quals=[], storage=[]
            TypeDecl: declname='isoneshot', quals=[]
              IdentifierType: names=['bool']
        TypeDecl: declname='VirtualizeTimerC_0_startTimer', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='timer', quals=[], storage=[]
        PtrDecl: quals=[]
          TypeDecl: declname='timer', quals=[]
            IdentifierType: names=['VirtualizeTimerC_0_Timer_t']
        UnaryOp: op='&'
          ArrayRef: 
            ID: name='VirtualizeTimerC_0_m_timers'
            ID: name='num'
      Assignment: op='='
        StructRef: type='->'
          ID: name='timer'
          ID: name='t0'
        ID: name='t0'
      Assignment: op='='
        StructRef: type='->'
          ID: name='timer'
          ID: name='dt'
        ID: name='dt'
      Assignment: op='='
        StructRef: type='->'
          ID: name='timer'
          ID: name='isoneshot'
        ID: name='isoneshot'
      Assignment: op='='
        StructRef: type='->'
          ID: name='timer'
          ID: name='isrunning'
        ID: name='TRUE'
      FuncCall: 
        ID: name='VirtualizeTimerC_0_updateFromTimer_postTask'
  FuncDef: 
    Decl: name='SchedulerBasicP_TaskBasic_default_runTask', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='id', quals=[], storage=[]
            TypeDecl: declname='id', quals=[]
              IdentifierType: names=['uint8_t']
        TypeDecl: declname='SchedulerBasicP_TaskBasic_default_runTask', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='SchedulerBasicP_TaskBasic_runTask', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='arg_0x147bb38', quals=[], storage=[]
            TypeDecl: declname='arg_0x147bb38', quals=[]
              IdentifierType: names=['uint8_t']
        TypeDecl: declname='SchedulerBasicP_TaskBasic_runTask', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Switch: 
        ID: name='arg_0x147bb38'
        Compound: 
          Case: 
            ID: name='AlarmToTimerC_0_fired'
            FuncCall: 
              ID: name='AlarmToTimerC_0_fired_runTask'
          Break: 
          Case: 
            ID: name='VirtualizeTimerC_0_updateFromTimer'
            FuncCall: 
              ID: name='VirtualizeTimerC_0_updateFromTimer_runTask'
          Break: 
          Default: 
            FuncCall: 
              ID: name='SchedulerBasicP_TaskBasic_default_runTask'
              ExprList: 
                ID: name='arg_0x147bb38'
          Break: 
  FuncDef: 
    Decl: name='__nesc_disable_interrupt', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='__nesc_disable_interrupt', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='McuSleepC_McuPowerOverride_default_lowestState', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='McuSleepC_McuPowerOverride_default_lowestState', quals=[]
          IdentifierType: names=['mcu_power_t']
    Compound: 
      Return: 
        ID: name='MSP430_POWER_LPM4'
  FuncDef: 
    Decl: name='McuSleepC_McuPowerOverride_lowestState', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='McuSleepC_McuPowerOverride_lowestState', quals=[]
          IdentifierType: names=['mcu_power_t']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['char', 'unsigned']
      Assignment: op='='
        ID: name='result'
        FuncCall: 
          ID: name='McuSleepC_McuPowerOverride_default_lowestState'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='McuSleepC_getPowerState', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='McuSleepC_getPowerState', quals=[]
          IdentifierType: names=['mcu_power_t']
    Compound: 
      Decl: name='pState', quals=[], storage=[]
        TypeDecl: declname='pState', quals=[]
          IdentifierType: names=['mcu_power_t']
        ID: name='MSP430_POWER_LPM3'
      If: 
        BinaryOp: op='||'
          BinaryOp: op='||'
            BinaryOp: op='||'
              BinaryOp: op='&&'
                BinaryOp: op='||'
                  BinaryOp: op='||'
                    BinaryOp: op='&'
                      ID: name='TA0CCTL0'
                      Constant: type='int', value='0x0010'
                    BinaryOp: op='&'
                      ID: name='TA0CCTL1'
                      Constant: type='int', value='0x0010'
                  BinaryOp: op='&'
                    ID: name='TA0CCTL2'
                    Constant: type='int', value='0x0010'
                BinaryOp: op='=='
                  BinaryOp: op='&'
                    ID: name='TA0CTL'
                    BinaryOp: op='<<'
                      Constant: type='int', value='3'
                      Constant: type='int', value='8'
                  BinaryOp: op='<<'
                    Constant: type='int', value='2'
                    Constant: type='int', value='8'
              BinaryOp: op='&&'
                BinaryOp: op='&'
                  ID: name='ME1'
                  BinaryOp: op='|'
                    BinaryOp: op='<<'
                      Constant: type='int', value='1'
                      Constant: type='int', value='7'
                    BinaryOp: op='<<'
                      Constant: type='int', value='1'
                      Constant: type='int', value='6'
                BinaryOp: op='&'
                  ID: name='U0TCTL'
                  Constant: type='int', value='0x20'
            BinaryOp: op='&&'
              BinaryOp: op='&'
                ID: name='ME2'
                BinaryOp: op='|'
                  BinaryOp: op='<<'
                    Constant: type='int', value='1'
                    Constant: type='int', value='5'
                  BinaryOp: op='<<'
                    Constant: type='int', value='1'
                    Constant: type='int', value='4'
              BinaryOp: op='&'
                ID: name='U1TCTL'
                Constant: type='int', value='0x20'
          BinaryOp: op='&&'
            BinaryOp: op='&&'
              BinaryOp: op='&&'
                BinaryOp: op='&&'
                  BinaryOp: op='&'
                    ID: name='U0CTLnr'
                    Constant: type='int', value='0x01'
                  BinaryOp: op='&'
                    ID: name='I2CTCTLnr'
                    Constant: type='int', value='0x20'
                BinaryOp: op='&'
                  ID: name='I2CDCTLnr'
                  Constant: type='int', value='0x20'
              BinaryOp: op='&'
                ID: name='U0CTLnr'
                Constant: type='int', value='0x04'
            BinaryOp: op='&'
              ID: name='U0CTLnr'
              Constant: type='int', value='0x20'
        Compound: 
          Assignment: op='='
            ID: name='pState'
            ID: name='MSP430_POWER_LPM1'
      If: 
        BinaryOp: op='&'
          ID: name='ADC12CTL0'
          Constant: type='int', value='0x0010'
        Compound: 
          If: 
            BinaryOp: op='&'
              ID: name='ADC12CTL1'
              BinaryOp: op='<<'
                Constant: type='int', value='2'
                Constant: type='int', value='3'
            Compound: 
              If: 
                BinaryOp: op='&'
                  ID: name='ADC12CTL1'
                  BinaryOp: op='<<'
                    Constant: type='int', value='1'
                    Constant: type='int', value='3'
                Compound: 
                  Assignment: op='='
                    ID: name='pState'
                    ID: name='MSP430_POWER_LPM1'
                Compound: 
                  Assignment: op='='
                    ID: name='pState'
                    ID: name='MSP430_POWER_ACTIVE'
            Compound: 
              If: 
                BinaryOp: op='&&'
                  BinaryOp: op='&'
                    ID: name='ADC12CTL1'
                    Constant: type='int', value='0x0400'
                  BinaryOp: op='=='
                    BinaryOp: op='&'
                      ID: name='TA0CTL'
                      BinaryOp: op='<<'
                        Constant: type='int', value='3'
                        Constant: type='int', value='8'
                    BinaryOp: op='<<'
                      Constant: type='int', value='2'
                      Constant: type='int', value='8'
                Compound: 
                  Assignment: op='='
                    ID: name='pState'
                    ID: name='MSP430_POWER_LPM1'
      Return: 
        ID: name='pState'
  FuncDef: 
    Decl: name='mcombine', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='m1', quals=[], storage=[]
            TypeDecl: declname='m1', quals=[]
              IdentifierType: names=['mcu_power_t']
          Decl: name='m2', quals=[], storage=[]
            TypeDecl: declname='m2', quals=[]
              IdentifierType: names=['mcu_power_t']
        TypeDecl: declname='mcombine', quals=[]
          IdentifierType: names=['mcu_power_t']
    Compound: 
      Return: 
        TernaryOp: 
          BinaryOp: op='<'
            ID: name='m1'
            ID: name='m2'
          ID: name='m1'
          ID: name='m2'
  FuncDef: 
    Decl: name='McuSleepC_computePowerState', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='McuSleepC_computePowerState', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='='
        ID: name='McuSleepC_powerState'
        FuncCall: 
          ID: name='mcombine'
          ExprList: 
            FuncCall: 
              ID: name='McuSleepC_getPowerState'
            FuncCall: 
              ID: name='McuSleepC_McuPowerOverride_lowestState'
  FuncDef: 
    Decl: name='McuSleepC_McuSleep_sleep', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='McuSleepC_McuSleep_sleep', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='temp', quals=[], storage=[]
        TypeDecl: declname='temp', quals=[]
          IdentifierType: names=['uint16_t']
      If: 
        ID: name='McuSleepC_dirty'
        Compound: 
          FuncCall: 
            ID: name='McuSleepC_computePowerState'
      Assignment: op='='
        ID: name='temp'
        BinaryOp: op='|'
          ArrayRef: 
            ID: name='McuSleepC_msp430PowerBits'
            ID: name='McuSleepC_powerState'
          Constant: type='int', value='0x0008'
      Assignment: op='|='
        ID: name='_R2'
        ID: name='temp'
      FuncCall: 
        ID: name='__nesc_disable_interrupt'
  FuncDef: 
    Decl: name='SchedulerBasicP_McuSleep_sleep', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='SchedulerBasicP_McuSleep_sleep', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='McuSleepC_McuSleep_sleep'
  FuncDef: 
    Decl: name='SchedulerBasicP_popTask', quals=[], storage=['__inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='SchedulerBasicP_popTask', quals=[]
          IdentifierType: names=['uint8_t']
    Compound: 
      If: 
        BinaryOp: op='!='
          ID: name='SchedulerBasicP_m_head'
          ID: name='SchedulerBasicP_NO_TASK'
        Compound: 
          Decl: name='id', quals=[], storage=[]
            TypeDecl: declname='id', quals=[]
              IdentifierType: names=['uint8_t']
            ID: name='SchedulerBasicP_m_head'
          Assignment: op='='
            ID: name='SchedulerBasicP_m_head'
            ArrayRef: 
              ID: name='SchedulerBasicP_m_next'
              ID: name='SchedulerBasicP_m_head'
          If: 
            BinaryOp: op='=='
              ID: name='SchedulerBasicP_m_head'
              ID: name='SchedulerBasicP_NO_TASK'
            Compound: 
              Assignment: op='='
                ID: name='SchedulerBasicP_m_tail'
                ID: name='SchedulerBasicP_NO_TASK'
          Assignment: op='='
            ArrayRef: 
              ID: name='SchedulerBasicP_m_next'
              ID: name='id'
            ID: name='SchedulerBasicP_NO_TASK'
          Return: 
            ID: name='id'
        Compound: 
          Return: 
            ID: name='SchedulerBasicP_NO_TASK'
  FuncDef: 
    Decl: name='SchedulerBasicP_Scheduler_taskLoop', quals=[], storage=['inline', 'static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='SchedulerBasicP_Scheduler_taskLoop', quals=[]
          IdentifierType: names=['void']
    Compound: 
      For: 
        Compound: 
          Decl: name='nextTask', quals=[], storage=[]
            TypeDecl: declname='nextTask', quals=[]
              IdentifierType: names=['uint8_t']
          Compound: 
            Decl: name='__nesc_atomic', quals=[], storage=[]
              TypeDecl: declname='__nesc_atomic', quals=[]
                IdentifierType: names=['__nesc_atomic_t']
              FuncCall: 
                ID: name='__nesc_atomic_start'
            Compound: 
              While: 
                BinaryOp: op='=='
                  Assignment: op='='
                    ID: name='nextTask'
                    FuncCall: 
                      ID: name='SchedulerBasicP_popTask'
                  ID: name='SchedulerBasicP_NO_TASK'
                Compound: 
                  FuncCall: 
                    ID: name='SchedulerBasicP_McuSleep_sleep'
            FuncCall: 
              ID: name='__nesc_atomic_end'
              ExprList: 
                ID: name='__nesc_atomic'
          FuncCall: 
            ID: name='SchedulerBasicP_TaskBasic_runTask'
            ExprList: 
              ID: name='nextTask'
  FuncDef: 
    Decl: name='RealMainP_Scheduler_taskLoop', quals=[], storage=['static', 'inline']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='RealMainP_Scheduler_taskLoop', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='SchedulerBasicP_Scheduler_taskLoop'
  FuncDef: 
    Decl: name='__nesc_atomic_start', quals=[], storage=[]
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='__nesc_atomic_start', quals=[]
          IdentifierType: names=['__nesc_atomic_t']
    Compound: 
      Decl: name='result', quals=[], storage=[]
        TypeDecl: declname='result', quals=[]
          IdentifierType: names=['__nesc_atomic_t']
        BinaryOp: op='!='
          BinaryOp: op='&'
            Compound: 
              Decl: name='__x', quals=[], storage=[]
                TypeDecl: declname='__x', quals=[]
                  IdentifierType: names=['uint16_t']
              Assignment: op='='
                Cast: 
                  Typename: quals=[]
                    TypeDecl: declname=None, quals=[]
                      IdentifierType: names=['uint16_t']
                  ID: name='__x'
                ID: name='_R2'
              ID: name='__x'
            Constant: type='int', value='0x0008'
          Constant: type='int', value='0'
      FuncCall: 
        ID: name='__nesc_disable_interrupt'
      Return: 
        ID: name='result'
  FuncDef: 
    Decl: name='__nesc_atomic_end', quals=[], storage=[]
      FuncDecl: quals=None
        ParamList: 
          Decl: name='reenable_interrupts', quals=[], storage=[]
            TypeDecl: declname='reenable_interrupts', quals=[]
              IdentifierType: names=['__nesc_atomic_t']
        TypeDecl: declname='__nesc_atomic_end', quals=[]
          IdentifierType: names=['void']
    Compound: 
      If: 
        ID: name='reenable_interrupts'
        Compound: 
          FuncCall: 
            ID: name='__nesc_enable_interrupt'
  FuncDef: 
    Decl: name='sig_TIMERA0_VECTOR', quals=[], storage=[]
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='sig_TIMERA0_VECTOR', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCommonP_VectorTimerA0_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_0_Event_fired', quals=[], storage=['static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_0_Event_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      If: 
        StructRef: type='.'
          FuncCall: 
            ID: name='Msp430TimerCapComP_0_Control_getControl'
          ID: name='cap'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_0_Capture_captured'
            ExprList: 
              FuncCall: 
                ID: name='Msp430TimerCapComP_0_Capture_getEvent'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_0_Compare_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_1_Event_fired', quals=[], storage=['static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_1_Event_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      If: 
        StructRef: type='.'
          FuncCall: 
            ID: name='Msp430TimerCapComP_1_Control_getControl'
          ID: name='cap'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_1_Capture_captured'
            ExprList: 
              FuncCall: 
                ID: name='Msp430TimerCapComP_1_Capture_getEvent'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_1_Compare_fired'
  FuncDef: 
    Decl: name='Msp430TimerCapComP_2_Event_fired', quals=[], storage=['static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerCapComP_2_Event_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      If: 
        StructRef: type='.'
          FuncCall: 
            ID: name='Msp430TimerCapComP_2_Control_getControl'
          ID: name='cap'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_2_Capture_captured'
            ExprList: 
              FuncCall: 
                ID: name='Msp430TimerCapComP_2_Capture_getEvent'
        Compound: 
          FuncCall: 
            ID: name='Msp430TimerCapComP_2_Compare_fired'
  FuncDef: 
    Decl: name='sig_TIMERA1_VECTOR', quals=[], storage=[]
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='sig_TIMERA1_VECTOR', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCommonP_VectorTimerA1_fired'
  FuncDef: 
    Decl: name='sig_TIMERB0_VECTOR', quals=[], storage=[]
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='sig_TIMERB0_VECTOR', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCommonP_VectorTimerB0_fired'
  FuncDef: 
    Decl: name='Msp430TimerP_1_Event_default_fired', quals=[], storage=['static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='n', quals=[], storage=[]
            TypeDecl: declname='n', quals=[]
              IdentifierType: names=['uint8_t']
        TypeDecl: declname='Msp430TimerP_1_Event_default_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
  FuncDef: 
    Decl: name='Msp430TimerP_1_Event_fired', quals=[], storage=['static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='arg_0x1561800', quals=[], storage=[]
            TypeDecl: declname='arg_0x1561800', quals=[]
              IdentifierType: names=['uint8_t']
        TypeDecl: declname='Msp430TimerP_1_Event_fired', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Switch: 
        ID: name='arg_0x1561800'
        Compound: 
          Case: 
            Constant: type='int', value='0'
            FuncCall: 
              ID: name='Msp430TimerCapComP_3_Event_fired'
          Break: 
          Case: 
            Constant: type='int', value='1'
            FuncCall: 
              ID: name='Msp430TimerCapComP_4_Event_fired'
          Break: 
          Case: 
            Constant: type='int', value='2'
            FuncCall: 
              ID: name='Msp430TimerCapComP_5_Event_fired'
          Break: 
          Case: 
            Constant: type='int', value='3'
            FuncCall: 
              ID: name='Msp430TimerCapComP_6_Event_fired'
          Break: 
          Case: 
            Constant: type='int', value='4'
            FuncCall: 
              ID: name='Msp430TimerCapComP_7_Event_fired'
          Break: 
          Case: 
            Constant: type='int', value='5'
            FuncCall: 
              ID: name='Msp430TimerCapComP_8_Event_fired'
          Break: 
          Case: 
            Constant: type='int', value='6'
            FuncCall: 
              ID: name='Msp430TimerCapComP_9_Event_fired'
          Break: 
          Case: 
            Constant: type='int', value='7'
            FuncCall: 
              ID: name='Msp430TimerP_1_Overflow_fired'
          Break: 
          Default: 
            FuncCall: 
              ID: name='Msp430TimerP_1_Event_default_fired'
              ExprList: 
                ID: name='arg_0x1561800'
          Break: 
  FuncDef: 
    Decl: name='SchedulerBasicP_TaskBasic_postTask', quals=[], storage=['static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='id', quals=[], storage=[]
            TypeDecl: declname='id', quals=[]
              IdentifierType: names=['uint8_t']
        TypeDecl: declname='SchedulerBasicP_TaskBasic_postTask', quals=[]
          IdentifierType: names=['error_t']
    Compound: 
      Compound: 
        Decl: name='__nesc_atomic', quals=[], storage=[]
          TypeDecl: declname='__nesc_atomic', quals=[]
            IdentifierType: names=['__nesc_atomic_t']
          FuncCall: 
            ID: name='__nesc_atomic_start'
        Compound: 
          Compound: 
            Decl: name='__nesc_temp', quals=[], storage=[]
              TypeDecl: declname='__nesc_temp', quals=[]
                IdentifierType: names=['char', 'unsigned']
              TernaryOp: 
                FuncCall: 
                  ID: name='SchedulerBasicP_pushTask'
                  ExprList: 
                    ID: name='id'
                ID: name='SUCCESS'
                ID: name='EBUSY'
            Compound: 
              FuncCall: 
                ID: name='__nesc_atomic_end'
                ExprList: 
                  ID: name='__nesc_atomic'
              Return: 
                ID: name='__nesc_temp'
        FuncCall: 
          ID: name='__nesc_atomic_end'
          ExprList: 
            ID: name='__nesc_atomic'
  FuncDef: 
    Decl: name='TransformAlarmC_0_set_alarm', quals=[], storage=['static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='TransformAlarmC_0_set_alarm', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='now', quals=[], storage=[]
        TypeDecl: declname='now', quals=[]
          IdentifierType: names=['TransformAlarmC_0_to_size_type']
        FuncCall: 
          ID: name='TransformAlarmC_0_Counter_get'
      Decl: name='expires', quals=[], storage=[]
        TypeDecl: declname='expires', quals=[]
          IdentifierType: names=['TransformAlarmC_0_to_size_type']
      Decl: name='remaining', quals=[], storage=[]
        TypeDecl: declname='remaining', quals=[]
          IdentifierType: names=['TransformAlarmC_0_to_size_type']
      Assignment: op='='
        ID: name='expires'
        BinaryOp: op='+'
          ID: name='TransformAlarmC_0_m_t0'
          ID: name='TransformAlarmC_0_m_dt'
      Assignment: op='='
        ID: name='remaining'
        Cast: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['TransformAlarmC_0_to_size_type']
          BinaryOp: op='-'
            ID: name='expires'
            ID: name='now'
      If: 
        BinaryOp: op='<='
          ID: name='TransformAlarmC_0_m_t0'
          ID: name='now'
        Compound: 
          If: 
            BinaryOp: op='&&'
              BinaryOp: op='>='
                ID: name='expires'
                ID: name='TransformAlarmC_0_m_t0'
              BinaryOp: op='<='
                ID: name='expires'
                ID: name='now'
            Compound: 
              Assignment: op='='
                ID: name='remaining'
                Constant: type='int', value='0'
        Compound: 
          If: 
            BinaryOp: op='||'
              BinaryOp: op='>='
                ID: name='expires'
                ID: name='TransformAlarmC_0_m_t0'
              BinaryOp: op='<='
                ID: name='expires'
                ID: name='now'
            Compound: 
              Assignment: op='='
                ID: name='remaining'
                Constant: type='int', value='0'
      If: 
        BinaryOp: op='>'
          ID: name='remaining'
          ID: name='TransformAlarmC_0_MAX_DELAY'
        Compound: 
          Assignment: op='='
            ID: name='TransformAlarmC_0_m_t0'
            BinaryOp: op='+'
              ID: name='now'
              ID: name='TransformAlarmC_0_MAX_DELAY'
          Assignment: op='='
            ID: name='TransformAlarmC_0_m_dt'
            BinaryOp: op='-'
              ID: name='remaining'
              ID: name='TransformAlarmC_0_MAX_DELAY'
          Assignment: op='='
            ID: name='remaining'
            ID: name='TransformAlarmC_0_MAX_DELAY'
        Compound: 
          Assignment: op='+='
            ID: name='TransformAlarmC_0_m_t0'
            ID: name='TransformAlarmC_0_m_dt'
          Assignment: op='='
            ID: name='TransformAlarmC_0_m_dt'
            Constant: type='int', value='0'
      FuncCall: 
        ID: name='TransformAlarmC_0_AlarmFrom_startAt'
        ExprList: 
          BinaryOp: op='<<'
            Cast: 
              Typename: quals=[]
                TypeDecl: declname=None, quals=[]
                  IdentifierType: names=['TransformAlarmC_0_from_size_type']
              ID: name='now'
            Constant: type='int', value='5'
          BinaryOp: op='<<'
            Cast: 
              Typename: quals=[]
                TypeDecl: declname=None, quals=[]
                  IdentifierType: names=['TransformAlarmC_0_from_size_type']
              ID: name='remaining'
            Constant: type='int', value='5'
  FuncDef: 
    Decl: name='TransformCounterC_0_Counter_get', quals=[], storage=['static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='TransformCounterC_0_Counter_get', quals=[]
          IdentifierType: names=['TransformCounterC_0_to_size_type']
    Compound: 
      Decl: name='rv', quals=[], storage=[]
        TypeDecl: declname='rv', quals=[]
          IdentifierType: names=['TransformCounterC_0_to_size_type']
        Constant: type='int', value='0'
      Compound: 
        Decl: name='__nesc_atomic', quals=[], storage=[]
          TypeDecl: declname='__nesc_atomic', quals=[]
            IdentifierType: names=['__nesc_atomic_t']
          FuncCall: 
            ID: name='__nesc_atomic_start'
        Compound: 
          Decl: name='high', quals=[], storage=[]
            TypeDecl: declname='high', quals=[]
              IdentifierType: names=['TransformCounterC_0_upper_count_type']
            ID: name='TransformCounterC_0_m_upper'
          Decl: name='low', quals=[], storage=[]
            TypeDecl: declname='low', quals=[]
              IdentifierType: names=['TransformCounterC_0_from_size_type']
            FuncCall: 
              ID: name='TransformCounterC_0_CounterFrom_get'
          If: 
            FuncCall: 
              ID: name='TransformCounterC_0_CounterFrom_isOverflowPending'
            Compound: 
              UnaryOp: op='p++'
                ID: name='high'
              Assignment: op='='
                ID: name='low'
                FuncCall: 
                  ID: name='TransformCounterC_0_CounterFrom_get'
          Compound: 
            Decl: name='high_to', quals=[], storage=[]
              TypeDecl: declname='high_to', quals=[]
                IdentifierType: names=['TransformCounterC_0_to_size_type']
              ID: name='high'
            Decl: name='low_to', quals=[], storage=[]
              TypeDecl: declname='low_to', quals=[]
                IdentifierType: names=['TransformCounterC_0_to_size_type']
              BinaryOp: op='>>'
                ID: name='low'
                ID: name='TransformCounterC_0_LOW_SHIFT_RIGHT'
            Assignment: op='='
              ID: name='rv'
              BinaryOp: op='|'
                BinaryOp: op='<<'
                  ID: name='high_to'
                  ID: name='TransformCounterC_0_HIGH_SHIFT_LEFT'
                ID: name='low_to'
        FuncCall: 
          ID: name='__nesc_atomic_end'
          ExprList: 
            ID: name='__nesc_atomic'
      Return: 
        ID: name='rv'
  FuncDef: 
    Decl: name='Msp430TimerP_1_Timer_get', quals=[], storage=['static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='Msp430TimerP_1_Timer_get', quals=[]
          IdentifierType: names=['uint16_t']
    Compound: 
      If: 
        Constant: type='int', value='1'
        Compound: 
          Compound: 
            Decl: name='t0', quals=[], storage=[]
              TypeDecl: declname='t0', quals=[]
                IdentifierType: names=['uint16_t']
            Decl: name='t1', quals=[], storage=[]
              TypeDecl: declname='t1', quals=[]
                IdentifierType: names=['uint16_t']
              UnaryOp: op='*'
                Cast: 
                  Typename: quals=['volatile']
                    PtrDecl: quals=[]
                      TypeDecl: declname=None, quals=['volatile']
                        IdentifierType: names=['uint16_t']
                  Constant: type='int', value='400U'
            DoWhile: 
              BinaryOp: op='!='
                ID: name='t0'
                ID: name='t1'
              Compound: 
                Assignment: op='='
                  ID: name='t0'
                  ID: name='t1'
                Assignment: op='='
                  ID: name='t1'
                  UnaryOp: op='*'
                    Cast: 
                      Typename: quals=['volatile']
                        PtrDecl: quals=[]
                          TypeDecl: declname=None, quals=['volatile']
                            IdentifierType: names=['uint16_t']
                      Constant: type='int', value='400U'
            Compound: 
              Decl: name='__nesc_temp', quals=[], storage=[]
                TypeDecl: declname='__nesc_temp', quals=[]
                  IdentifierType: names=['int', 'unsigned']
                ID: name='t1'
              Return: 
                ID: name='__nesc_temp'
        Compound: 
          Return: 
            UnaryOp: op='*'
              Cast: 
                Typename: quals=['volatile']
                  PtrDecl: quals=[]
                    TypeDecl: declname=None, quals=['volatile']
                      IdentifierType: names=['uint16_t']
                Constant: type='int', value='400U'
  FuncDef: 
    Decl: name='sig_TIMERB1_VECTOR', quals=[], storage=[]
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='sig_TIMERB1_VECTOR', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='Msp430TimerCommonP_VectorTimerB1_fired'
  FuncDef: 
    Decl: name='main', quals=[], storage=[]
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='main', quals=[]
          IdentifierType: names=['int']
    Compound: 
      Compound: 
        Decl: name='__nesc_atomic', quals=[], storage=[]
          TypeDecl: declname='__nesc_atomic', quals=[]
            IdentifierType: names=['__nesc_atomic_t']
          FuncCall: 
            ID: name='__nesc_atomic_start'
        Compound: 
          Compound: 
          FuncCall: 
            ID: name='RealMainP_Scheduler_init'
          FuncCall: 
            ID: name='RealMainP_PlatformInit_init'
          While: 
            FuncCall: 
              ID: name='RealMainP_Scheduler_runNextTask'
          FuncCall: 
            ID: name='RealMainP_SoftwareInit_init'
          While: 
            FuncCall: 
              ID: name='RealMainP_Scheduler_runNextTask'
        FuncCall: 
          ID: name='__nesc_atomic_end'
          ExprList: 
            ID: name='__nesc_atomic'
      FuncCall: 
        ID: name='__nesc_enable_interrupt'
      FuncCall: 
        ID: name='RealMainP_Boot_booted'
      FuncCall: 
        ID: name='RealMainP_Scheduler_taskLoop'
      Return: 
        UnaryOp: op='-'
          Constant: type='int', value='1'
  FuncDef: 
    Decl: name='Msp430ClockP_set_dco_calib', quals=[], storage=['static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='calib', quals=[], storage=[]
            TypeDecl: declname='calib', quals=[]
              IdentifierType: names=['int']
        TypeDecl: declname='Msp430ClockP_set_dco_calib', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Assignment: op='='
        ID: name='BCSCTL1'
        BinaryOp: op='|'
          BinaryOp: op='&'
            ID: name='BCSCTL1'
            UnaryOp: op='~'
              Constant: type='int', value='0x07'
          BinaryOp: op='&'
            BinaryOp: op='>>'
              ID: name='calib'
              Constant: type='int', value='8'
            Constant: type='int', value='0x07'
      Assignment: op='='
        ID: name='DCOCTL'
        BinaryOp: op='&'
          ID: name='calib'
          Constant: type='int', value='0xff'
  FuncDef: 
    Decl: name='MotePlatformC_TOSH_FLASH_M25P_DP_bit', quals=[], storage=['static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='set', quals=[], storage=[]
            TypeDecl: declname='set', quals=[]
              IdentifierType: names=['bool']
        TypeDecl: declname='MotePlatformC_TOSH_FLASH_M25P_DP_bit', quals=[]
          IdentifierType: names=['void']
    Compound: 
      If: 
        ID: name='set'
        Compound: 
          FuncCall: 
            ID: name='TOSH_SET_SIMO0_PIN'
        Compound: 
          FuncCall: 
            ID: name='TOSH_CLR_SIMO0_PIN'
      FuncCall: 
        ID: name='TOSH_SET_UCLK0_PIN'
      FuncCall: 
        ID: name='TOSH_CLR_UCLK0_PIN'
  FuncDef: 
    Decl: name='SchedulerBasicP_Scheduler_runNextTask', quals=[], storage=['static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='SchedulerBasicP_Scheduler_runNextTask', quals=[]
          IdentifierType: names=['bool']
    Compound: 
      Decl: name='nextTask', quals=[], storage=[]
        TypeDecl: declname='nextTask', quals=[]
          IdentifierType: names=['uint8_t']
      Compound: 
        Assignment: op='='
          ID: name='nextTask'
          FuncCall: 
            ID: name='SchedulerBasicP_popTask'
        If: 
          BinaryOp: op='=='
            ID: name='nextTask'
            ID: name='SchedulerBasicP_NO_TASK'
          Compound: 
            Compound: 
              Decl: name='__nesc_temp', quals=[], storage=[]
                TypeDecl: declname='__nesc_temp', quals=[]
                  IdentifierType: names=['char', 'unsigned']
                ID: name='FALSE'
              Return: 
                ID: name='__nesc_temp'
      FuncCall: 
        ID: name='SchedulerBasicP_TaskBasic_runTask'
        ExprList: 
          ID: name='nextTask'
      Return: 
        ID: name='TRUE'
  FuncDef: 
    Decl: name='VirtualizeTimerC_0_updateFromTimer_runTask', quals=[], storage=['static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='VirtualizeTimerC_0_updateFromTimer_runTask', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='now', quals=[], storage=[]
        TypeDecl: declname='now', quals=[]
          IdentifierType: names=['uint32_t']
        FuncCall: 
          ID: name='VirtualizeTimerC_0_TimerFrom_getNow'
      Decl: name='min_remaining', quals=[], storage=[]
        TypeDecl: declname='min_remaining', quals=[]
          IdentifierType: names=['int32_t']
        BinaryOp: op='-'
          BinaryOp: op='<<'
            Constant: type='int', value='1UL'
            Constant: type='int', value='31'
          Constant: type='int', value='1'
      Decl: name='min_remaining_isset', quals=[], storage=[]
        TypeDecl: declname='min_remaining_isset', quals=[]
          IdentifierType: names=['bool']
        ID: name='FALSE'
      Decl: name='num', quals=[], storage=[]
        TypeDecl: declname='num', quals=[]
          IdentifierType: names=['uint8_t']
      FuncCall: 
        ID: name='VirtualizeTimerC_0_TimerFrom_stop'
      For: 
        Assignment: op='='
          ID: name='num'
          Constant: type='int', value='0'
        BinaryOp: op='<'
          ID: name='num'
          ID: name='VirtualizeTimerC_0_NUM_TIMERS'
        UnaryOp: op='p++'
          ID: name='num'
        Compound: 
          Decl: name='timer', quals=[], storage=[]
            PtrDecl: quals=[]
              TypeDecl: declname='timer', quals=[]
                IdentifierType: names=['VirtualizeTimerC_0_Timer_t']
            UnaryOp: op='&'
              ArrayRef: 
                ID: name='VirtualizeTimerC_0_m_timers'
                ID: name='num'
          If: 
            StructRef: type='->'
              ID: name='timer'
              ID: name='isrunning'
            Compound: 
              Decl: name='elapsed', quals=[], storage=[]
                TypeDecl: declname='elapsed', quals=[]
                  IdentifierType: names=['uint32_t']
                BinaryOp: op='-'
                  ID: name='now'
                  StructRef: type='->'
                    ID: name='timer'
                    ID: name='t0'
              Decl: name='remaining', quals=[], storage=[]
                TypeDecl: declname='remaining', quals=[]
                  IdentifierType: names=['int32_t']
                BinaryOp: op='-'
                  StructRef: type='->'
                    ID: name='timer'
                    ID: name='dt'
                  ID: name='elapsed'
              If: 
                BinaryOp: op='<'
                  ID: name='remaining'
                  ID: name='min_remaining'
                Compound: 
                  Assignment: op='='
                    ID: name='min_remaining'
                    ID: name='remaining'
                  Assignment: op='='
                    ID: name='min_remaining_isset'
                    ID: name='TRUE'
      If: 
        ID: name='min_remaining_isset'
        Compound: 
          If: 
            BinaryOp: op='<='
              ID: name='min_remaining'
              Constant: type='int', value='0'
            Compound: 
              FuncCall: 
                ID: name='VirtualizeTimerC_0_fireTimers'
                ExprList: 
                  ID: name='now'
            Compound: 
              FuncCall: 
                ID: name='VirtualizeTimerC_0_TimerFrom_startOneShotAt'
                ExprList: 
                  ID: name='now'
                  ID: name='min_remaining'
  FuncDef: 
    Decl: name='VirtualizeTimerC_0_fireTimers', quals=[], storage=['static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='now', quals=[], storage=[]
            TypeDecl: declname='now', quals=[]
              IdentifierType: names=['uint32_t']
        TypeDecl: declname='VirtualizeTimerC_0_fireTimers', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Decl: name='num', quals=[], storage=[]
        TypeDecl: declname='num', quals=[]
          IdentifierType: names=['uint8_t']
      For: 
        Assignment: op='='
          ID: name='num'
          Constant: type='int', value='0'
        BinaryOp: op='<'
          ID: name='num'
          ID: name='VirtualizeTimerC_0_NUM_TIMERS'
        UnaryOp: op='p++'
          ID: name='num'
        Compound: 
          Decl: name='timer', quals=[], storage=[]
            PtrDecl: quals=[]
              TypeDecl: declname='timer', quals=[]
                IdentifierType: names=['VirtualizeTimerC_0_Timer_t']
            UnaryOp: op='&'
              ArrayRef: 
                ID: name='VirtualizeTimerC_0_m_timers'
                ID: name='num'
          If: 
            StructRef: type='->'
              ID: name='timer'
              ID: name='isrunning'
            Compound: 
              Decl: name='elapsed', quals=[], storage=[]
                TypeDecl: declname='elapsed', quals=[]
                  IdentifierType: names=['uint32_t']
                BinaryOp: op='-'
                  ID: name='now'
                  StructRef: type='->'
                    ID: name='timer'
                    ID: name='t0'
              If: 
                BinaryOp: op='>='
                  ID: name='elapsed'
                  StructRef: type='->'
                    ID: name='timer'
                    ID: name='dt'
                Compound: 
                  If: 
                    StructRef: type='->'
                      ID: name='timer'
                      ID: name='isoneshot'
                    Compound: 
                      Assignment: op='='
                        StructRef: type='->'
                          ID: name='timer'
                          ID: name='isrunning'
                        ID: name='FALSE'
                    Compound: 
                      Assignment: op='+='
                        StructRef: type='->'
                          ID: name='timer'
                          ID: name='t0'
                        StructRef: type='->'
                          ID: name='timer'
                          ID: name='dt'
                  FuncCall: 
                    ID: name='VirtualizeTimerC_0_Timer_fired'
                    ExprList: 
                      ID: name='num'
                  Break: 
      FuncCall: 
        ID: name='VirtualizeTimerC_0_updateFromTimer_postTask'
  FuncDef: 
    Decl: name='TransformAlarmC_0_Alarm_startAt', quals=[], storage=['static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='t0', quals=[], storage=[]
            TypeDecl: declname='t0', quals=[]
              IdentifierType: names=['TransformAlarmC_0_to_size_type']
          Decl: name='dt', quals=[], storage=[]
            TypeDecl: declname='dt', quals=[]
              IdentifierType: names=['TransformAlarmC_0_to_size_type']
        TypeDecl: declname='TransformAlarmC_0_Alarm_startAt', quals=[]
          IdentifierType: names=['void']
    Compound: 
      Compound: 
        Decl: name='__nesc_atomic', quals=[], storage=[]
          TypeDecl: declname='__nesc_atomic', quals=[]
            IdentifierType: names=['__nesc_atomic_t']
          FuncCall: 
            ID: name='__nesc_atomic_start'
        Compound: 
          Assignment: op='='
            ID: name='TransformAlarmC_0_m_t0'
            ID: name='t0'
          Assignment: op='='
            ID: name='TransformAlarmC_0_m_dt'
            ID: name='dt'
          FuncCall: 
            ID: name='TransformAlarmC_0_set_alarm'
        FuncCall: 
          ID: name='__nesc_atomic_end'
          ExprList: 
            ID: name='__nesc_atomic'
  FuncDef: 
    Decl: name='AlarmToTimerC_0_fired_runTask', quals=[], storage=['static']
      FuncDecl: quals=None
        ParamList: 
          Typename: quals=[]
            TypeDecl: declname=None, quals=[]
              IdentifierType: names=['void']
        TypeDecl: declname='AlarmToTimerC_0_fired_runTask', quals=[]
          IdentifierType: names=['void']
    Compound: 
      If: 
        BinaryOp: op='=='
          ID: name='AlarmToTimerC_0_m_oneshot'
          ID: name='FALSE'
        Compound: 
          FuncCall: 
            ID: name='AlarmToTimerC_0_start'
            ExprList: 
              FuncCall: 
                ID: name='AlarmToTimerC_0_Alarm_getAlarm'
              ID: name='AlarmToTimerC_0_m_dt'
              ID: name='FALSE'
      FuncCall: 
        ID: name='AlarmToTimerC_0_Timer_fired'
  FuncDef: 
    Decl: name='VirtualizeTimerC_0_Timer_startPeriodic', quals=[], storage=['static']
      FuncDecl: quals=None
        ParamList: 
          Decl: name='num', quals=[], storage=[]
            TypeDecl: declname='num', quals=[]
              IdentifierType: names=['uint8_t']
          Decl: name='dt', quals=[], storage=[]
            TypeDecl: declname='dt', quals=[]
              IdentifierType: names=['uint32_t']
        TypeDecl: declname='VirtualizeTimerC_0_Timer_startPeriodic', quals=[]
          IdentifierType: names=['void']
    Compound: 
      FuncCall: 
        ID: name='VirtualizeTimerC_0_startTimer'
        ExprList: 
          ID: name='num'
          FuncCall: 
            ID: name='VirtualizeTimerC_0_TimerFrom_getNow'
          ID: name='dt'
          ID: name='FALSE'
--------------------------------------------------------------------------------
DEREF at 354/0x162	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(354U)
DEREF at 370/0x172	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(370U)
DEREF at 356/0x164	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(356U)
DEREF at 372/0x174	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(372U)
DEREF at 358/0x166	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(358U)
DEREF at 374/0x176	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(374U)
DEREF at 302/0x12e	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(302U)
DEREF at 386/0x182	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(386U)
DEREF at 402/0x192	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(402U)
DEREF at 386/0x182	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(386U)
DEREF at 384/0x180	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(384U)
DEREF at 386/0x182	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(386U)
DEREF at 386/0x182	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(386U)
DEREF at 402/0x192	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(402U)
DEREF at 402/0x192	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(402U)
DEREF at 404/0x194	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(404U)
DEREF at 388/0x184	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(388U)
DEREF at 406/0x196	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(406U)
DEREF at 390/0x186	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(390U)
DEREF at 408/0x198	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(408U)
DEREF at 392/0x188	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(392U)
DEREF at 410/0x19a	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(410U)
DEREF at 394/0x18a	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(394U)
DEREF at 412/0x19c	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(412U)
DEREF at 396/0x18c	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(396U)
DEREF at 414/0x19e	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(414U)
DEREF at 398/0x18e	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(398U)
DEREF at 286/0x11e	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(286U)
DEREF at 49/0x31	 @ 8-bit Peripheral Module	 in line *(volatile uint8_t )(49U)
DEREF at 49/0x31	 @ 8-bit Peripheral Module	 in line *(volatile uint8_t )(49U)
DEREF at 49/0x31	 @ 8-bit Peripheral Module	 in line *(volatile uint8_t )(49U)
DEREF at 50/0x32	 @ 8-bit Peripheral Module	 in line *(volatile uint8_t )(50U)
DEREF at 50/0x32	 @ 8-bit Peripheral Module	 in line *(volatile uint8_t )(50U)
DEREF at 50/0x32	 @ 8-bit Peripheral Module	 in line *(volatile uint8_t )(50U)
DEREF at 25/0x0019	 @8-bit Peripheral Module	 with fixed-address variable r
DEREF at 25/0x0019	 @8-bit Peripheral Module	 with fixed-address variable r
DEREF at 29/0x001D	 @8-bit Peripheral Module	 with fixed-address variable r
DEREF at 25/0x0019	 @8-bit Peripheral Module	 with fixed-address variable r
DEREF at 29/0x001D	 @8-bit Peripheral Module	 with fixed-address variable r
DEREF at 29/0x001D	 @8-bit Peripheral Module	 with fixed-address variable r
DEREF at 30/0x001E	 @8-bit Peripheral Module	 with fixed-address variable r
DEREF at 30/0x001E	 @8-bit Peripheral Module	 with fixed-address variable r
DEREF at 26/0x001A	 @8-bit Peripheral Module	 with fixed-address variable r
DEREF at 26/0x001A	 @8-bit Peripheral Module	 with fixed-address variable r
DEREF at 368/0x0170	 @16-bit Peripheral Module	 with fixed-address variable TA0R
DEREF at 368/0x0170	 @16-bit Peripheral Module	 with fixed-address variable TA0R
DEREF at 38/0x0026	 @8-bit Peripheral Module	 with fixed-address variable P1SEL
DEREF at 46/0x002E	 @8-bit Peripheral Module	 with fixed-address variable P2SEL
DEREF at 27/0x001B	 @8-bit Peripheral Module	 with fixed-address variable P3SEL
DEREF at 31/0x001F	 @8-bit Peripheral Module	 with fixed-address variable P4SEL
DEREF at 51/0x0033	 @8-bit Peripheral Module	 with fixed-address variable P5SEL
DEREF at 55/0x0037	 @8-bit Peripheral Module	 with fixed-address variable P6SEL
DEREF at 33/0x0021	 @8-bit Peripheral Module	 with fixed-address variable P1OUT
DEREF at 34/0x0022	 @8-bit Peripheral Module	 with fixed-address variable P1DIR
DEREF at 41/0x0029	 @8-bit Peripheral Module	 with fixed-address variable P2OUT
DEREF at 42/0x002A	 @8-bit Peripheral Module	 with fixed-address variable P2DIR
DEREF at 25/0x0019	 @8-bit Peripheral Module	 with fixed-address variable P3OUT
DEREF at 26/0x001A	 @8-bit Peripheral Module	 with fixed-address variable P3DIR
DEREF at 29/0x001D	 @8-bit Peripheral Module	 with fixed-address variable P4OUT
DEREF at 30/0x001E	 @8-bit Peripheral Module	 with fixed-address variable P4DIR
DEREF at 49/0x0031	 @8-bit Peripheral Module	 with fixed-address variable P5OUT
DEREF at 50/0x0032	 @8-bit Peripheral Module	 with fixed-address variable P5DIR
DEREF at 53/0x0035	 @8-bit Peripheral Module	 with fixed-address variable P6OUT
DEREF at 54/0x0036	 @8-bit Peripheral Module	 with fixed-address variable P6DIR
DEREF at 37/0x0025	 @8-bit Peripheral Module	 with fixed-address variable P1IE
DEREF at 45/0x002D	 @8-bit Peripheral Module	 with fixed-address variable P2IE
DEREF at 384/0x0180	 @16-bit Peripheral Module	 with fixed-address variable Msp430ClockP_TBCTL
DEREF at 384/0x0180	 @16-bit Peripheral Module	 with fixed-address variable Msp430ClockP_TBCTL
DEREF at 352/0x0160	 @16-bit Peripheral Module	 with fixed-address variable Msp430ClockP_TA0CTL
DEREF at 352/0x0160	 @16-bit Peripheral Module	 with fixed-address variable Msp430ClockP_TA0CTL
DEREF at 400/0x0190	 @16-bit Peripheral Module	 with fixed-address variable TBR
DEREF at 384/0x0180	 @16-bit Peripheral Module	 with fixed-address variable Msp430ClockP_TBCTL
DEREF at 368/0x0170	 @16-bit Peripheral Module	 with fixed-address variable TA0R
DEREF at 352/0x0160	 @16-bit Peripheral Module	 with fixed-address variable Msp430ClockP_TA0CTL
DEREF at 87/0x0057	 @8-bit Peripheral Module	 with fixed-address variable BCSCTL1
DEREF at 87/0x0057	 @8-bit Peripheral Module	 with fixed-address variable BCSCTL1
DEREF at 88/0x0058	 @8-bit Peripheral Module	 with fixed-address variable BCSCTL2
DEREF at 0/0x0000	 @Special Function Register	 with fixed-address variable Msp430ClockP_IE1
DEREF at 402/0x0192	 @16-bit Peripheral Module	 with fixed-address variable TBCCR0
DEREF at 400/0x0190	 @16-bit Peripheral Module	 with fixed-address variable TBR
DEREF at 386/0x0182	 @16-bit Peripheral Module	 with fixed-address variable TBCCTL0
DEREF at 386/0x0182	 @16-bit Peripheral Module	 with fixed-address variable TBCCTL0
DEREF at 368/0x0170	 @16-bit Peripheral Module	 with fixed-address variable TA0R
DEREF at 352/0x0160	 @16-bit Peripheral Module	 with fixed-address variable Msp430ClockP_TA0CTL
DEREF at 384/0x0180	 @16-bit Peripheral Module	 with fixed-address variable Msp430ClockP_TBCTL
DEREF at 87/0x0057	 @8-bit Peripheral Module	 with fixed-address variable BCSCTL1
DEREF at 88/0x0058	 @8-bit Peripheral Module	 with fixed-address variable BCSCTL2
DEREF at 386/0x0182	 @16-bit Peripheral Module	 with fixed-address variable TBCCTL0
DEREF at 352/0x0160	 @16-bit Peripheral Module	 with fixed-address variable Msp430ClockP_TA0CTL
DEREF at 302/0x012E	 @16-bit Peripheral Module	 with fixed-address variable Msp430ClockP_TA0IV
DEREF at 384/0x0180	 @16-bit Peripheral Module	 with fixed-address variable Msp430ClockP_TBCTL
DEREF at 286/0x011E	 @16-bit Peripheral Module	 with fixed-address variable Msp430ClockP_TBIV
DEREF at 25/0x0019	 @8-bit Peripheral Module	 with fixed-address variable r
DEREF at 49/0x31	 @ 8-bit Peripheral Module	 in line *(volatile uint8_t )(49U)
DEREF at 49/0x31	 @ 8-bit Peripheral Module	 in line *(volatile uint8_t )(49U)
DEREF at 49/0x31	 @ 8-bit Peripheral Module	 in line *(volatile uint8_t )(49U)
DEREF at 386/0x182	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(386U)
DEREF at 354/0x0162	 @16-bit Peripheral Module	 with fixed-address variable TA0CCTL0
DEREF at 356/0x0164	 @16-bit Peripheral Module	 with fixed-address variable TA0CCTL1
DEREF at 358/0x0166	 @16-bit Peripheral Module	 with fixed-address variable TA0CCTL2
DEREF at 352/0x0160	 @16-bit Peripheral Module	 with fixed-address variable TA0CTL
DEREF at 4/0x0004	 @Special Function Register	 with fixed-address variable ME1
DEREF at 113/0x0071	 @8-bit Peripheral Module	 with fixed-address variable U0TCTL
DEREF at 5/0x0005	 @Special Function Register	 with fixed-address variable ME2
DEREF at 121/0x0079	 @8-bit Peripheral Module	 with fixed-address variable U1TCTL
DEREF at 112/0x0070	 @8-bit Peripheral Module	 with fixed-address variable U0CTLnr
DEREF at 113/0x0071	 @8-bit Peripheral Module	 with fixed-address variable I2CTCTLnr
DEREF at 114/0x0072	 @8-bit Peripheral Module	 with fixed-address variable I2CDCTLnr
DEREF at 112/0x0070	 @8-bit Peripheral Module	 with fixed-address variable U0CTLnr
DEREF at 112/0x0070	 @8-bit Peripheral Module	 with fixed-address variable U0CTLnr
DEREF at 416/0x01A0	 @16-bit Peripheral Module	 with fixed-address variable ADC12CTL0
DEREF at 418/0x01A2	 @16-bit Peripheral Module	 with fixed-address variable ADC12CTL1
DEREF at 418/0x01A2	 @16-bit Peripheral Module	 with fixed-address variable ADC12CTL1
DEREF at 418/0x01A2	 @16-bit Peripheral Module	 with fixed-address variable ADC12CTL1
DEREF at 352/0x0160	 @16-bit Peripheral Module	 with fixed-address variable TA0CTL
DEREF at 400/0x190	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(400U)
DEREF at 400/0x190	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(400U)
DEREF at 400/0x190	 @ 16-bit Peripheral Module	 in line *(volatile uint16_t )(400U)
DEREF at 87/0x0057	 @8-bit Peripheral Module	 with fixed-address variable BCSCTL1
DEREF at 87/0x0057	 @8-bit Peripheral Module	 with fixed-address variable BCSCTL1
DEREF at 86/0x0056	 @8-bit Peripheral Module	 with fixed-address variable DCOCTL
typedef int ptrdiff_t;

typedef unsigned int size_t;

typedef int wchar_t;

struct __nesc_attr_nonnull ;

struct __nesc_attr_bnd {
  void *lo;
  void *hi;
};

struct __nesc_attr_bnd_nok {
  void *lo;
  void *hi;
};

struct __nesc_attr_count {
  int n;
};

struct __nesc_attr_count_nok {
  int n;
};

struct __nesc_attr_one ;

struct __nesc_attr_one_nok ;

struct __nesc_attr_dmemset {
  int a1;
  int a2;
  int a3;
};

struct __nesc_attr_dmemcpy {
  int a1;
  int a2;
  int a3;
};

struct __nesc_attr_nts ;

typedef signed char int8_t;

typedef unsigned char uint8_t;

typedef int int16_t;

typedef unsigned int uint16_t;

typedef long int32_t;

typedef unsigned long uint32_t;

typedef long long int64_t;

typedef unsigned long long uint64_t;

typedef int16_t intptr_t;

typedef uint16_t uintptr_t;

typedef struct {
  unsigned char (data[1]);
} __attribute((packed)) nx_int8_t;

typedef int8_t __nesc_nxbase_nx_int8_t;

typedef struct {
  unsigned char (data[2]);
} __attribute((packed)) nx_int16_t;

typedef int16_t __nesc_nxbase_nx_int16_t;

typedef struct {
  unsigned char (data[4]);
} __attribute((packed)) nx_int32_t;

typedef int32_t __nesc_nxbase_nx_int32_t;

typedef struct {
  unsigned char (data[8]);
} __attribute((packed)) nx_int64_t;

typedef int64_t __nesc_nxbase_nx_int64_t;

typedef struct {
  unsigned char (data[1]);
} __attribute((packed)) nx_uint8_t;

typedef uint8_t __nesc_nxbase_nx_uint8_t;

typedef struct {
  unsigned char (data[2]);
} __attribute((packed)) nx_uint16_t;

typedef uint16_t __nesc_nxbase_nx_uint16_t;

typedef struct {
  unsigned char (data[4]);
} __attribute((packed)) nx_uint32_t;

typedef uint32_t __nesc_nxbase_nx_uint32_t;

typedef struct {
  unsigned char (data[8]);
} __attribute((packed)) nx_uint64_t;

typedef uint64_t __nesc_nxbase_nx_uint64_t;

typedef struct {
  unsigned char (data[1]);
} __attribute((packed)) nxle_int8_t;

typedef int8_t __nesc_nxbase_nxle_int8_t;

typedef struct {
  unsigned char (data[2]);
} __attribute((packed)) nxle_int16_t;

typedef int16_t __nesc_nxbase_nxle_int16_t;

typedef struct {
  unsigned char (data[4]);
} __attribute((packed)) nxle_int32_t;

typedef int32_t __nesc_nxbase_nxle_int32_t;

typedef struct {
  unsigned char (data[8]);
} __attribute((packed)) nxle_int64_t;

typedef int64_t __nesc_nxbase_nxle_int64_t;

typedef struct {
  unsigned char (data[1]);
} __attribute((packed)) nxle_uint8_t;

typedef uint8_t __nesc_nxbase_nxle_uint8_t;

typedef struct {
  unsigned char (data[2]);
} __attribute((packed)) nxle_uint16_t;

typedef uint16_t __nesc_nxbase_nxle_uint16_t;

typedef struct {
  unsigned char (data[4]);
} __attribute((packed)) nxle_uint32_t;

typedef uint32_t __nesc_nxbase_nxle_uint32_t;

typedef struct {
  unsigned char (data[8]);
} __attribute((packed)) nxle_uint64_t;

typedef uint64_t __nesc_nxbase_nxle_uint64_t;

typedef unsigned char u_char;

typedef unsigned short u_short;

typedef unsigned int u_int;

typedef unsigned long u_long;

typedef unsigned short ushort;

typedef unsigned int uint;

typedef uint8_t u_int8_t;

typedef uint16_t u_int16_t;

typedef uint32_t u_int32_t;

typedef uint64_t u_int64_t;

typedef u_int64_t u_quad_t;

typedef int64_t quad_t;

typedef quad_t *qaddr_t;

typedef char *caddr_t;

typedef const char *c_caddr_t;

typedef volatile char *v_caddr_t;

typedef u_int32_t fixpt_t;

typedef u_int32_t gid_t;

typedef u_int32_t in_addr_t;

typedef u_int16_t in_port_t;

typedef u_int32_t ino_t;

typedef long key_t;

typedef u_int16_t mode_t;

typedef u_int16_t nlink_t;

typedef quad_t rlim_t;

typedef int32_t segsz_t;

typedef int32_t swblk_t;

typedef int32_t ufs_daddr_t;

typedef int32_t ufs_time_t;

typedef u_int32_t uid_t;

extern void *memset(void *arg_0x702690, int arg_0x7027e8, size_t arg_0x702980) ;

extern void *memset(void *arg_0x1045650, int arg_0x10457a8, size_t arg_0x1045940) ;

typedef struct __nesc_unnamed4242 {
  int quot;
  int rem;
} div_t;

typedef struct __nesc_unnamed4243 {
  long quot;
  long rem;
} ldiv_t;

typedef long int __int32_t;

typedef unsigned long int __uint32_t;

typedef long _off_t;

typedef long _ssize_t;

typedef __uint32_t __ULong;

struct _glue {
  struct _glue  *_next;
  int _niobs;
  struct __sFILE  *_iobs;
};

struct _Bigint {
  struct _Bigint  *_next;
  int _k;
  int _maxwds;
  int _sign;
  int _wds;
  __ULong (_x[1]);
};

struct __tm {
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};

struct _atexit {
  struct _atexit  *_next;
  int _ind;
  void (*_fns[32])( void ) ;
};

struct __sbuf {
  unsigned char *_base;
  int _size;
};

typedef long _fpos_t;

struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf  _bf;
  int _lbfsize;
  void *_cookie;
  int *_read(void *_cookie, char *_buf, int _n) ;
  int *_write(void *_cookie, const char *_buf, int _n) ;
  _fpos_t *_seek(void *_cookie, _fpos_t _offset, int _whence) ;
  int *_close(void *_cookie) ;
  struct __sbuf  _ub;
  unsigned char *_up;
  int _ur;
  unsigned char (_ubuf[3]);
  unsigned char (_nbuf[1]);
  struct __sbuf  _lb;
  int _blksize;
  int _offset;
  struct _reent  *_data;
};

struct _rand48 {
  unsigned short (_seed[3]);
  unsigned short (_mult[3]);
  unsigned short _add;
};

struct _reent {
  int _errno;
  struct __sFILE  *_stdin;
  struct __sFILE  *_stdout;
  struct __sFILE  *_stderr;
  int _inc;
  char (_emergency[25]);
  int _current_category;
  const char *_current_locale;
  int __sdidinit;
  void *__cleanup(struct _reent  *arg_0x1073ab8) ;
  struct _Bigint  *_result;
  int _result_k;
  struct _Bigint  *_p5s;
  struct _Bigint  *_freelist;
  int _cvtlen;
  char *_cvtbuf;
  union __nesc_unnamed4244  {
    struct __nesc_unnamed4245 {
      unsigned int _unused_rand;
      char *_strtok_last;
      char (_asctime_buf[26]);
      struct __tm  _localtime_buf;
      int _gamma_signgam;
      __extension__ unsigned long long _rand_next;
      struct _rand48  _r48;
    } _reent;
    struct __nesc_unnamed4246 {
      unsigned char (*_nextf[30]);
      unsigned int (_nmalloc[30]);
    } _unused;
  } _new;
  struct _atexit  *_atexit;
  struct _atexit  _atexit0;
  void *_sig_func(int arg_0x1077c98) ;
  struct _glue  __sglue;
  struct __sFILE  (__sf[3]);
};

struct _reent ;

union __dmath  {
  __uint32_t (i[2]);
  double d;
};

union __dmath ;

struct exception {
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
  int err;
};

enum __fdlibm_version { __fdlibm_ieee = -1, __fdlibm_svid, __fdlibm_xopen, __fdlibm_posix };

enum __fdlibm_version;

typedef uint8_t bool;

enum __nesc_unnamed4247 { FALSE = 0, TRUE = 1 };

typedef nx_int8_t nx_bool;

struct __nesc_attr_atmostonce ;

struct __nesc_attr_atleastonce ;

struct __nesc_attr_exactlyonce ;

enum __nesc_unnamed4248 { SUCCESS = 0, FAIL = 1, ESIZE = 2, ECANCEL = 3, EOFF = 4, EBUSY = 5, EINVAL = 6, ERETRY = 7, ERESERVE = 8, EALREADY = 9, ENOMEM = 10, ENOACK = 11, ELAST = 11 };

typedef uint8_t error_t;

typedef union port  {
  volatile unsigned char reg_p;
  volatile struct __nesc_unnamed4249 {
    unsigned char __p0 :1;
    char unsigned __p1 :1;
    unsigned char __p2 :1;
    char unsigned __p3 :1;
    unsigned char __p4 :1;
    char unsigned __p5 :1;
    unsigned char __p6 :1;
    char unsigned __p7 :1;
  } __pin;
} ioregister_t;

struct port_full_t {
  ioregister_t in;
  ioregister_t out;
  ioregister_t dir;
  ioregister_t ifg;
  ioregister_t ies;
  ioregister_t ie;
  ioregister_t sel;
};

struct port_simple_t {
  ioregister_t in;
  ioregister_t out;
  ioregister_t dir;
  ioregister_t sel;
};

struct port_full_t ;

struct port_full_t ;

struct port_simple_t ;

struct port_simple_t ;

struct port_simple_t ;

struct port_simple_t ;

typedef struct __nesc_unnamed4250 {
  volatile unsigned taifg :1;
  volatile unsigned taie :1;
  volatile unsigned taclr :1;
  volatile unsigned dummy :1;
  volatile unsigned tamc :2;
  volatile unsigned taid :2;
  volatile unsigned tassel :2;
} __attribute((packed)) tactl_t;

typedef struct __nesc_unnamed4251 {
  volatile unsigned ccifg :1;
  volatile unsigned cov :1;
  volatile unsigned out :1;
  volatile unsigned cci :1;
  volatile unsigned ccie :1;
  volatile unsigned outmod :3;
  volatile unsigned cap :1;
  volatile unsigned dummy :1;
  volatile unsigned scci :1;
  volatile unsigned scs :1;
  volatile unsigned ccis :2;
  volatile unsigned cm :2;
} __attribute((packed)) tacctl_t;

struct timera_t {
  tactl_t ctl;
  tacctl_t cctl0;
  tacctl_t cctl1;
  tacctl_t cctl2;
  volatile unsigned (dummy[4]);
  volatile unsigned tar;
  volatile unsigned taccr0;
  volatile unsigned taccr1;
  volatile unsigned taccr2;
};

struct timera_t ;

typedef struct __nesc_unnamed4252 {
  volatile unsigned tbifg :1;
  volatile unsigned tbie :1;
  volatile unsigned tbclr :1;
  volatile unsigned dummy1 :1;
  volatile unsigned tbmc :2;
  volatile unsigned tbid :2;
  volatile unsigned tbssel :2;
  volatile unsigned dummy2 :1;
  volatile unsigned tbcntl :2;
  volatile unsigned tbclgrp :2;
} __attribute((packed)) tbctl_t;

typedef struct __nesc_unnamed4253 {
  volatile unsigned ccifg :1;
  volatile unsigned cov :1;
  volatile unsigned out :1;
  volatile unsigned cci :1;
  volatile unsigned ccie :1;
  volatile unsigned outmod :3;
  volatile unsigned cap :1;
  volatile unsigned clld :2;
  volatile unsigned scs :1;
  volatile unsigned ccis :2;
  volatile unsigned cm :2;
} __attribute((packed)) tbcctl_t;

struct timerb_t {
  tbctl_t ctl;
  tbcctl_t cctl0;
  tbcctl_t cctl1;
  tbcctl_t cctl2;
  tbcctl_t cctl3;
  tbcctl_t cctl4;
  tbcctl_t cctl5;
  tbcctl_t cctl6;
  volatile unsigned tbr;
  volatile unsigned tbccr0;
  volatile unsigned tbccr1;
  volatile unsigned tbccr2;
  volatile unsigned tbccr3;
  volatile unsigned tbccr4;
  volatile unsigned tbccr5;
  volatile unsigned tbccr6;
};

struct timerb_t ;

typedef struct __nesc_unnamed4254 {
  volatile unsigned adc12sc :1;
  volatile unsigned enc :1;
  volatile unsigned adc12tovie :1;
  volatile unsigned adc12ovie :1;
  volatile unsigned adc12on :1;
  volatile unsigned refon :1;
  volatile unsigned r2_5v :1;
  volatile unsigned msc :1;
  volatile unsigned sht0 :4;
  volatile unsigned sht1 :4;
} __attribute((packed)) adc12ctl0_t;

typedef struct __nesc_unnamed4255 {
  volatile unsigned adc12busy :1;
  volatile unsigned conseq :2;
  volatile unsigned adc12ssel :2;
  volatile unsigned adc12div :3;
  volatile unsigned issh :1;
  volatile unsigned shp :1;
  volatile unsigned shs :2;
  volatile unsigned cstartadd :4;
} __attribute((packed)) adc12ctl1_t;

typedef struct __nesc_unnamed4256 {
  volatile unsigned bit0 :1;
  volatile unsigned bit1 :1;
  volatile unsigned bit2 :1;
  volatile unsigned bit3 :1;
  volatile unsigned bit4 :1;
  volatile unsigned bit5 :1;
  volatile unsigned bit6 :1;
  volatile unsigned bit7 :1;
  volatile unsigned bit8 :1;
  volatile unsigned bit9 :1;
  volatile unsigned bit10 :1;
  volatile unsigned bit11 :1;
  volatile unsigned bit12 :1;
  volatile unsigned bit13 :1;
  volatile unsigned bit14 :1;
  volatile unsigned bit15 :1;
} __attribute((packed)) adc12xflg_t;

struct adc12_t {
  adc12ctl0_t ctl0;
  adc12ctl1_t ctl1;
  adc12xflg_t ifg;
  adc12xflg_t ie;
  adc12xflg_t iv;
};

struct adc12_t ;

typedef uint8_t mcu_power_t;

inline static mcu_power_t mcombine(mcu_power_t m1, mcu_power_t m2) ;

enum __nesc_unnamed4257 { MSP430_POWER_ACTIVE = 0, MSP430_POWER_LPM0 = 1, MSP430_POWER_LPM1 = 2, MSP430_POWER_LPM2 = 3, MSP430_POWER_LPM3 = 4, MSP430_POWER_LPM4 = 5 };

inline static void __nesc_disable_interrupt( void ) ;

inline static void __nesc_enable_interrupt( void ) ;

typedef bool __nesc_atomic_t;

__nesc_atomic_t __nesc_atomic_start( void ) ;

void __nesc_atomic_end(__nesc_atomic_t reenable_interrupts) ;

__nesc_atomic_t __nesc_atomic_start( void ) ;

void __nesc_atomic_end(__nesc_atomic_t reenable_interrupts) ;

typedef struct {
  unsigned char (data[4]);
} __attribute((packed)) nx_float;

typedef float __nesc_nxbase_nx_float;

inline static void TOSH_SET_SIMO0_PIN() ;

inline static void TOSH_CLR_SIMO0_PIN() ;

inline static void TOSH_MAKE_SIMO0_OUTPUT() ;

inline static void TOSH_SET_UCLK0_PIN() ;

inline static void TOSH_CLR_UCLK0_PIN() ;

inline static void TOSH_MAKE_UCLK0_OUTPUT() ;

enum __nesc_unnamed4258 { TOSH_HUMIDITY_ADDR = 5, TOSH_HUMIDTEMP_ADDR = 3, TOSH_HUMIDITY_RESET = 0x1E };

inline static void TOSH_SET_FLASH_CS_PIN() ;

inline static void TOSH_CLR_FLASH_CS_PIN() ;

inline static void TOSH_MAKE_FLASH_CS_OUTPUT() ;

inline static void TOSH_SET_FLASH_HOLD_PIN() ;

inline static void TOSH_MAKE_FLASH_HOLD_OUTPUT() ;

enum __nesc_unnamed4259 { MSP430TIMER_CM_NONE = 0, MSP430TIMER_CM_RISING = 1, MSP430TIMER_CM_FALLING = 2, MSP430TIMER_CM_BOTH = 3, MSP430TIMER_STOP_MODE = 0, MSP430TIMER_UP_MODE = 1, MSP430TIMER_CONTINUOUS_MODE = 2, MSP430TIMER_UPDOWN_MODE = 3, MSP430TIMER_TACLK = 0, MSP430TIMER_TBCLK = 0, MSP430TIMER_ACLK = 1, MSP430TIMER_SMCLK = 2, MSP430TIMER_INCLK = 3, MSP430TIMER_CLOCKDIV_1 = 0, MSP430TIMER_CLOCKDIV_2 = 1, MSP430TIMER_CLOCKDIV_4 = 2, MSP430TIMER_CLOCKDIV_8 = 3 };

typedef struct __nesc_unnamed4260 {
  int ccifg :1;
  int cov :1;
  int out :1;
  int cci :1;
  int ccie :1;
  int outmod :3;
  int cap :1;
  int clld :2;
  int scs :1;
  int ccis :2;
  int cm :2;
} msp430_compare_control_t;

typedef struct __nesc_unnamed4261 {
  int taifg :1;
  int taie :1;
  int taclr :1;
  int _unused0 :1;
  int mc :2;
  int id :2;
  int tassel :2;
  int _unused1 :6;
} msp430_timer_a_control_t;

typedef struct __nesc_unnamed4262 {
  int tbifg :1;
  int tbie :1;
  int tbclr :1;
  int _unused0 :1;
  int mc :2;
  int id :2;
  int tbssel :2;
  int _unused1 :1;
  int cntl :2;
  int tbclgrp :2;
  int _unused2 :1;
} msp430_timer_b_control_t;

typedef struct __nesc_unnamed4263 {
  int notUsed;
} TMilli;

typedef struct __nesc_unnamed4264 {
  int notUsed;
} T32khz;

typedef struct __nesc_unnamed4265 {
  int notUsed;
} TMicro;

enum __nesc_unnamed4266 { LEDS_LED0 = 1 << 0, LEDS_LED1 = 1 << 1, LEDS_LED2 = 1 << 2, LEDS_LED3 = 1 << 3, LEDS_LED4 = 1 << 4, LEDS_LED5 = 1 << 5, LEDS_LED6 = 1 << 6, LEDS_LED7 = 1 << 7 };

typedef TMilli BlinkC_Timer0_precision_tag;

typedef TMilli BlinkC_Timer1_precision_tag;

typedef TMilli BlinkC_Timer2_precision_tag;

enum Msp430Timer32khzC_0___nesc_unnamed4267 { Msp430Timer32khzC_0_ALARM_ID = 0U };

typedef T32khz Msp430AlarmC_0_frequency_tag;

typedef Msp430AlarmC_0_frequency_tag Msp430AlarmC_0_Alarm_precision_tag;

typedef uint16_t Msp430AlarmC_0_Alarm_size_type;

typedef T32khz Msp430CounterC_0_frequency_tag;

typedef Msp430CounterC_0_frequency_tag Msp430CounterC_0_Counter_precision_tag;

typedef uint16_t Msp430CounterC_0_Counter_size_type;

typedef TMilli TransformCounterC_0_to_precision_tag;

typedef uint32_t TransformCounterC_0_to_size_type;

typedef T32khz TransformCounterC_0_from_precision_tag;

typedef uint16_t TransformCounterC_0_from_size_type;

typedef uint32_t TransformCounterC_0_upper_count_type;

typedef TransformCounterC_0_from_precision_tag TransformCounterC_0_CounterFrom_precision_tag;

typedef TransformCounterC_0_from_size_type TransformCounterC_0_CounterFrom_size_type;

typedef TransformCounterC_0_to_precision_tag TransformCounterC_0_Counter_precision_tag;

typedef TransformCounterC_0_to_size_type TransformCounterC_0_Counter_size_type;

typedef TMilli TransformAlarmC_0_to_precision_tag;

typedef uint32_t TransformAlarmC_0_to_size_type;

typedef T32khz TransformAlarmC_0_from_precision_tag;

typedef uint16_t TransformAlarmC_0_from_size_type;

typedef TransformAlarmC_0_to_precision_tag TransformAlarmC_0_Alarm_precision_tag;

typedef TransformAlarmC_0_to_size_type TransformAlarmC_0_Alarm_size_type;

typedef TransformAlarmC_0_from_precision_tag TransformAlarmC_0_AlarmFrom_precision_tag;

typedef TransformAlarmC_0_from_size_type TransformAlarmC_0_AlarmFrom_size_type;

typedef TransformAlarmC_0_to_precision_tag TransformAlarmC_0_Counter_precision_tag;

typedef TransformAlarmC_0_to_size_type TransformAlarmC_0_Counter_size_type;

typedef TMilli AlarmToTimerC_0_precision_tag;

typedef AlarmToTimerC_0_precision_tag AlarmToTimerC_0_Alarm_precision_tag;

typedef uint32_t AlarmToTimerC_0_Alarm_size_type;

typedef AlarmToTimerC_0_precision_tag AlarmToTimerC_0_Timer_precision_tag;

typedef TMilli VirtualizeTimerC_0_precision_tag;

typedef VirtualizeTimerC_0_precision_tag VirtualizeTimerC_0_TimerFrom_precision_tag;

typedef VirtualizeTimerC_0_precision_tag VirtualizeTimerC_0_Timer_precision_tag;

typedef TMilli CounterToLocalTimeC_0_precision_tag;

typedef CounterToLocalTimeC_0_precision_tag CounterToLocalTimeC_0_LocalTime_precision_tag;

typedef CounterToLocalTimeC_0_precision_tag CounterToLocalTimeC_0_Counter_precision_tag;

typedef uint32_t CounterToLocalTimeC_0_Counter_size_type;

static error_t PlatformP_Init_init( void ) ;

static error_t MotePlatformC_Init_init( void ) ;

static void Msp430ClockP_Msp430ClockInit_defaultInitClocks( void ) ;

static void Msp430ClockP_Msp430ClockInit_default_initTimerB( void ) ;

static void Msp430ClockP_Msp430ClockInit_defaultInitTimerA( void ) ;

static void Msp430ClockP_Msp430ClockInit_default_initTimerA( void ) ;

static void Msp430ClockP_Msp430ClockInit_defaultInitTimerB( void ) ;

static void Msp430ClockP_Msp430ClockInit_defaultSetupDcoCalibrate( void ) ;

static void Msp430ClockP_Msp430ClockInit_default_setupDcoCalibrate( void ) ;

static void Msp430ClockP_Msp430ClockInit_default_initClocks( void ) ;

static error_t Msp430ClockP_Init_init( void ) ;

static void Msp430TimerP_0_VectorTimerX0_fired( void ) ;

static void Msp430TimerP_0_Overflow_fired( void ) ;

static void Msp430TimerP_0_VectorTimerX1_fired( void ) ;

static void Msp430TimerP_0_Event_default_fired(uint8_t arg_0x1561800) ;

static void Msp430TimerP_1_VectorTimerX0_fired( void ) ;

static void Msp430TimerP_1_Overflow_fired( void ) ;

static void Msp430TimerP_1_VectorTimerX1_fired( void ) ;

static void Msp430TimerP_1_Event_default_fired(uint8_t arg_0x1561800) ;

static uint16_t Msp430TimerP_1_Timer_get( void ) ;

static bool Msp430TimerP_1_Timer_isOverflowPending( void ) ;

static uint16_t Msp430TimerCapComP_0_Capture_getEvent( void ) ;

static void Msp430TimerCapComP_0_Capture_default_captured(uint16_t time) ;

static msp430_compare_control_t Msp430TimerCapComP_0_Control_getControl( void ) ;

static void Msp430TimerCapComP_0_Event_fired( void ) ;

static void Msp430TimerCapComP_0_Compare_default_fired( void ) ;

static void Msp430TimerCapComP_0_Timer_overflow( void ) ;

static uint16_t Msp430TimerCapComP_1_Capture_getEvent( void ) ;

static void Msp430TimerCapComP_1_Capture_default_captured(uint16_t time) ;

static msp430_compare_control_t Msp430TimerCapComP_1_Control_getControl( void ) ;

static void Msp430TimerCapComP_1_Event_fired( void ) ;

static void Msp430TimerCapComP_1_Compare_default_fired( void ) ;

static void Msp430TimerCapComP_1_Timer_overflow( void ) ;

static uint16_t Msp430TimerCapComP_2_Capture_getEvent( void ) ;

static void Msp430TimerCapComP_2_Capture_default_captured(uint16_t time) ;

static msp430_compare_control_t Msp430TimerCapComP_2_Control_getControl( void ) ;

static void Msp430TimerCapComP_2_Event_fired( void ) ;

static void Msp430TimerCapComP_2_Compare_default_fired( void ) ;

static void Msp430TimerCapComP_2_Timer_overflow( void ) ;

static uint16_t Msp430TimerCapComP_3_Capture_getEvent( void ) ;

static void Msp430TimerCapComP_3_Capture_default_captured(uint16_t time) ;

static msp430_compare_control_t Msp430TimerCapComP_3_Control_getControl( void ) ;

static void Msp430TimerCapComP_3_Control_enableEvents( void ) ;

static void Msp430TimerCapComP_3_Control_setControlAsCompare( void ) ;

static void Msp430TimerCapComP_3_Control_disableEvents( void ) ;

static void Msp430TimerCapComP_3_Control_clearPendingInterrupt( void ) ;

static void Msp430TimerCapComP_3_Event_fired( void ) ;

static void Msp430TimerCapComP_3_Compare_setEvent(uint16_t time) ;

static void Msp430TimerCapComP_3_Compare_setEventFromNow(uint16_t delta) ;

static void Msp430TimerCapComP_3_Timer_overflow( void ) ;

static uint16_t Msp430TimerCapComP_4_Capture_getEvent( void ) ;

static void Msp430TimerCapComP_4_Capture_default_captured(uint16_t time) ;

static msp430_compare_control_t Msp430TimerCapComP_4_Control_getControl( void ) ;

static void Msp430TimerCapComP_4_Event_fired( void ) ;

static void Msp430TimerCapComP_4_Compare_default_fired( void ) ;

static void Msp430TimerCapComP_4_Timer_overflow( void ) ;

static uint16_t Msp430TimerCapComP_5_Capture_getEvent( void ) ;

static void Msp430TimerCapComP_5_Capture_default_captured(uint16_t time) ;

static msp430_compare_control_t Msp430TimerCapComP_5_Control_getControl( void ) ;

static void Msp430TimerCapComP_5_Event_fired( void ) ;

static void Msp430TimerCapComP_5_Compare_default_fired( void ) ;

static void Msp430TimerCapComP_5_Timer_overflow( void ) ;

static uint16_t Msp430TimerCapComP_6_Capture_getEvent( void ) ;

static void Msp430TimerCapComP_6_Capture_default_captured(uint16_t time) ;

static msp430_compare_control_t Msp430TimerCapComP_6_Control_getControl( void ) ;

static void Msp430TimerCapComP_6_Event_fired( void ) ;

static void Msp430TimerCapComP_6_Compare_default_fired( void ) ;

static void Msp430TimerCapComP_6_Timer_overflow( void ) ;

static uint16_t Msp430TimerCapComP_7_Capture_getEvent( void ) ;

static void Msp430TimerCapComP_7_Capture_default_captured(uint16_t time) ;

static msp430_compare_control_t Msp430TimerCapComP_7_Control_getControl( void ) ;

static void Msp430TimerCapComP_7_Event_fired( void ) ;

static void Msp430TimerCapComP_7_Compare_default_fired( void ) ;

static void Msp430TimerCapComP_7_Timer_overflow( void ) ;

static uint16_t Msp430TimerCapComP_8_Capture_getEvent( void ) ;

static void Msp430TimerCapComP_8_Capture_default_captured(uint16_t time) ;

static msp430_compare_control_t Msp430TimerCapComP_8_Control_getControl( void ) ;

static void Msp430TimerCapComP_8_Event_fired( void ) ;

static void Msp430TimerCapComP_8_Compare_default_fired( void ) ;

static void Msp430TimerCapComP_8_Timer_overflow( void ) ;

static uint16_t Msp430TimerCapComP_9_Capture_getEvent( void ) ;

static void Msp430TimerCapComP_9_Capture_default_captured(uint16_t time) ;

static msp430_compare_control_t Msp430TimerCapComP_9_Control_getControl( void ) ;

static void Msp430TimerCapComP_9_Event_fired( void ) ;

static void Msp430TimerCapComP_9_Compare_default_fired( void ) ;

static void Msp430TimerCapComP_9_Timer_overflow( void ) ;

static error_t SchedulerBasicP_TaskBasic_postTask(uint8_t arg_0x147bb38) ;

static void SchedulerBasicP_TaskBasic_default_runTask(uint8_t arg_0x147bb38) ;

static void SchedulerBasicP_Scheduler_init( void ) ;

static void SchedulerBasicP_Scheduler_taskLoop( void ) ;

static bool SchedulerBasicP_Scheduler_runNextTask( void ) ;

static mcu_power_t McuSleepC_McuPowerOverride_default_lowestState( void ) ;

static void McuSleepC_McuSleep_sleep( void ) ;

static void BlinkC_Timer0_fired( void ) ;

static void BlinkC_Boot_booted( void ) ;

static void BlinkC_Timer1_fired( void ) ;

static void BlinkC_Timer2_fired( void ) ;

static error_t LedsP_Init_init( void ) ;

static void LedsP_Leds_led0Toggle( void ) ;

static void LedsP_Leds_led1Toggle( void ) ;

static void LedsP_Leds_led2Toggle( void ) ;

static void HplMsp430GeneralIOP_36_IO_toggle( void ) ;

static void HplMsp430GeneralIOP_36_IO_makeOutput( void ) ;

static void HplMsp430GeneralIOP_36_IO_set( void ) ;

static void HplMsp430GeneralIOP_37_IO_toggle( void ) ;

static void HplMsp430GeneralIOP_37_IO_makeOutput( void ) ;

static void HplMsp430GeneralIOP_37_IO_set( void ) ;

static void HplMsp430GeneralIOP_38_IO_toggle( void ) ;

static void HplMsp430GeneralIOP_38_IO_makeOutput( void ) ;

static void HplMsp430GeneralIOP_38_IO_set( void ) ;

static void Msp430GpioC_0_GeneralIO_toggle( void ) ;

static void Msp430GpioC_0_GeneralIO_makeOutput( void ) ;

static void Msp430GpioC_0_GeneralIO_set( void ) ;

static void Msp430GpioC_1_GeneralIO_toggle( void ) ;

static void Msp430GpioC_1_GeneralIO_makeOutput( void ) ;

static void Msp430GpioC_1_GeneralIO_set( void ) ;

static void Msp430GpioC_2_GeneralIO_toggle( void ) ;

static void Msp430GpioC_2_GeneralIO_makeOutput( void ) ;

static void Msp430GpioC_2_GeneralIO_set( void ) ;

static void Msp430AlarmC_0_Msp430Compare_fired( void ) ;

static void Msp430AlarmC_0_Msp430Timer_overflow( void ) ;

static void Msp430AlarmC_0_Alarm_startAt(Msp430AlarmC_0_Alarm_size_type t0, Msp430AlarmC_0_Alarm_size_type dt) ;

static void Msp430AlarmC_0_Alarm_stop( void ) ;

static error_t Msp430AlarmC_0_Init_init( void ) ;

static void Msp430CounterC_0_Msp430Timer_overflow( void ) ;

static Msp430CounterC_0_Counter_size_type Msp430CounterC_0_Counter_get( void ) ;

static bool Msp430CounterC_0_Counter_isOverflowPending( void ) ;

static void TransformCounterC_0_CounterFrom_overflow( void ) ;

static TransformCounterC_0_Counter_size_type TransformCounterC_0_Counter_get( void ) ;

static TransformAlarmC_0_Alarm_size_type TransformAlarmC_0_Alarm_getNow( void ) ;

static void TransformAlarmC_0_Alarm_startAt(TransformAlarmC_0_Alarm_size_type t0, TransformAlarmC_0_Alarm_size_type dt) ;

static TransformAlarmC_0_Alarm_size_type TransformAlarmC_0_Alarm_getAlarm( void ) ;

static void TransformAlarmC_0_Alarm_stop( void ) ;

static void TransformAlarmC_0_AlarmFrom_fired( void ) ;

static void TransformAlarmC_0_Counter_overflow( void ) ;

static void AlarmToTimerC_0_fired_runTask( void ) ;

static void AlarmToTimerC_0_Alarm_fired( void ) ;

static uint32_t AlarmToTimerC_0_Timer_getNow( void ) ;

static void AlarmToTimerC_0_Timer_startOneShotAt(uint32_t t0, uint32_t dt) ;

static void AlarmToTimerC_0_Timer_stop( void ) ;

static void VirtualizeTimerC_0_updateFromTimer_runTask( void ) ;

static void VirtualizeTimerC_0_TimerFrom_fired( void ) ;

static void VirtualizeTimerC_0_Timer_default_fired(uint8_t arg_0x18a3ea0) ;

static void VirtualizeTimerC_0_Timer_startPeriodic(uint8_t arg_0x18a3ea0, uint32_t dt) ;

static void CounterToLocalTimeC_0_Counter_overflow( void ) ;

static error_t PlatformP_MoteInit_init( void ) ;

static error_t PlatformP_MoteClockInit_init( void ) ;

static error_t PlatformP_LedsInit_init( void ) ;

inline static error_t PlatformP_Init_init( void ) ;

__inline static void MotePlatformC_uwait(uint16_t u) ;

__inline static void MotePlatformC_TOSH_wait( void ) ;

static void MotePlatformC_TOSH_FLASH_M25P_DP_bit(bool set) ;

inline static void MotePlatformC_TOSH_FLASH_M25P_DP( void ) ;

inline static error_t MotePlatformC_Init_init( void ) ;

static void Msp430ClockP_Msp430ClockInit_initTimerB( void ) ;

static void Msp430ClockP_Msp430ClockInit_initTimerA( void ) ;

static void Msp430ClockP_Msp430ClockInit_setupDcoCalibrate( void ) ;

static void Msp430ClockP_Msp430ClockInit_initClocks( void ) ;

enum Msp430ClockP___nesc_unnamed4268 { Msp430ClockP_ACLK_CALIB_PERIOD = 8, Msp430ClockP_TARGET_DCO_DELTA = 4096 / 32 * Msp430ClockP_ACLK_CALIB_PERIOD };

inline static void Msp430ClockP_Msp430ClockInit_defaultSetupDcoCalibrate( void ) ;

inline static void Msp430ClockP_Msp430ClockInit_defaultInitClocks( void ) ;

inline static void Msp430ClockP_Msp430ClockInit_defaultInitTimerA( void ) ;

inline static void Msp430ClockP_Msp430ClockInit_defaultInitTimerB( void ) ;

inline static void Msp430ClockP_Msp430ClockInit_default_setupDcoCalibrate( void ) ;

inline static void Msp430ClockP_Msp430ClockInit_default_initClocks( void ) ;

inline static void Msp430ClockP_Msp430ClockInit_default_initTimerA( void ) ;

inline static void Msp430ClockP_Msp430ClockInit_default_initTimerB( void ) ;

inline static void Msp430ClockP_startTimerA( void ) ;

inline static void Msp430ClockP_startTimerB( void ) ;

static void Msp430ClockP_set_dco_calib(int calib) ;

inline static uint16_t Msp430ClockP_test_calib_busywait_delta(int calib) ;

inline static void Msp430ClockP_busyCalibrateDco( void ) ;

inline static error_t Msp430ClockP_Init_init( void ) ;

static void Msp430TimerP_0_Event_fired(uint8_t arg_0x1561800) ;

static void Msp430TimerP_0_Timer_overflow( void ) ;

inline static void Msp430TimerP_0_VectorTimerX0_fired( void ) ;

inline static void Msp430TimerP_0_VectorTimerX1_fired( void ) ;

inline static void Msp430TimerP_0_Overflow_fired( void ) ;

inline static void Msp430TimerP_0_Event_default_fired(uint8_t n) ;

static void Msp430TimerP_1_Event_fired(uint8_t arg_0x1561800) ;

static void Msp430TimerP_1_Timer_overflow( void ) ;

static uint16_t Msp430TimerP_1_Timer_get( void ) ;

inline static bool Msp430TimerP_1_Timer_isOverflowPending( void ) ;

inline static void Msp430TimerP_1_VectorTimerX0_fired( void ) ;

inline static void Msp430TimerP_1_VectorTimerX1_fired( void ) ;

inline static void Msp430TimerP_1_Overflow_fired( void ) ;

static void Msp430TimerP_1_Event_default_fired(uint8_t n) ;

static void Msp430TimerCapComP_0_Capture_captured(uint16_t time) ;

static void Msp430TimerCapComP_0_Compare_fired( void ) ;

typedef msp430_compare_control_t Msp430TimerCapComP_0_cc_t;

inline static Msp430TimerCapComP_0_cc_t Msp430TimerCapComP_0_int2CC(uint16_t x) ;

inline static Msp430TimerCapComP_0_cc_t Msp430TimerCapComP_0_Control_getControl( void ) ;

inline static uint16_t Msp430TimerCapComP_0_Capture_getEvent( void ) ;

static void Msp430TimerCapComP_0_Event_fired( void ) ;

inline static void Msp430TimerCapComP_0_Capture_default_captured(uint16_t n) ;

inline static void Msp430TimerCapComP_0_Compare_default_fired( void ) ;

inline static void Msp430TimerCapComP_0_Timer_overflow( void ) ;

static void Msp430TimerCapComP_1_Capture_captured(uint16_t time) ;

static void Msp430TimerCapComP_1_Compare_fired( void ) ;

typedef msp430_compare_control_t Msp430TimerCapComP_1_cc_t;

inline static Msp430TimerCapComP_1_cc_t Msp430TimerCapComP_1_int2CC(uint16_t x) ;

inline static Msp430TimerCapComP_1_cc_t Msp430TimerCapComP_1_Control_getControl( void ) ;

inline static uint16_t Msp430TimerCapComP_1_Capture_getEvent( void ) ;

static void Msp430TimerCapComP_1_Event_fired( void ) ;

inline static void Msp430TimerCapComP_1_Capture_default_captured(uint16_t n) ;

inline static void Msp430TimerCapComP_1_Compare_default_fired( void ) ;

inline static void Msp430TimerCapComP_1_Timer_overflow( void ) ;

static void Msp430TimerCapComP_2_Capture_captured(uint16_t time) ;

static void Msp430TimerCapComP_2_Compare_fired( void ) ;

typedef msp430_compare_control_t Msp430TimerCapComP_2_cc_t;

inline static Msp430TimerCapComP_2_cc_t Msp430TimerCapComP_2_int2CC(uint16_t x) ;

inline static Msp430TimerCapComP_2_cc_t Msp430TimerCapComP_2_Control_getControl( void ) ;

inline static uint16_t Msp430TimerCapComP_2_Capture_getEvent( void ) ;

static void Msp430TimerCapComP_2_Event_fired( void ) ;

inline static void Msp430TimerCapComP_2_Capture_default_captured(uint16_t n) ;

inline static void Msp430TimerCapComP_2_Compare_default_fired( void ) ;

inline static void Msp430TimerCapComP_2_Timer_overflow( void ) ;

static void Msp430TimerCapComP_3_Capture_captured(uint16_t time) ;

static void Msp430TimerCapComP_3_Compare_fired( void ) ;

static uint16_t Msp430TimerCapComP_3_Timer_get( void ) ;

typedef msp430_compare_control_t Msp430TimerCapComP_3_cc_t;

inline static uint16_t Msp430TimerCapComP_3_CC2int(Msp430TimerCapComP_3_cc_t x) ;

inline static Msp430TimerCapComP_3_cc_t Msp430TimerCapComP_3_int2CC(uint16_t x) ;

inline static uint16_t Msp430TimerCapComP_3_compareControl( void ) ;

inline static Msp430TimerCapComP_3_cc_t Msp430TimerCapComP_3_Control_getControl( void ) ;

inline static void Msp430TimerCapComP_3_Control_clearPendingInterrupt( void ) ;

inline static void Msp430TimerCapComP_3_Control_setControlAsCompare( void ) ;

inline static void Msp430TimerCapComP_3_Control_enableEvents( void ) ;

inline static void Msp430TimerCapComP_3_Control_disableEvents( void ) ;

inline static uint16_t Msp430TimerCapComP_3_Capture_getEvent( void ) ;

inline static void Msp430TimerCapComP_3_Compare_setEvent(uint16_t x) ;

inline static void Msp430TimerCapComP_3_Compare_setEventFromNow(uint16_t x) ;

inline static void Msp430TimerCapComP_3_Event_fired( void ) ;

inline static void Msp430TimerCapComP_3_Capture_default_captured(uint16_t n) ;

inline static void Msp430TimerCapComP_3_Timer_overflow( void ) ;

static void Msp430TimerCapComP_4_Capture_captured(uint16_t time) ;

static void Msp430TimerCapComP_4_Compare_fired( void ) ;

typedef msp430_compare_control_t Msp430TimerCapComP_4_cc_t;

inline static Msp430TimerCapComP_4_cc_t Msp430TimerCapComP_4_int2CC(uint16_t x) ;

inline static Msp430TimerCapComP_4_cc_t Msp430TimerCapComP_4_Control_getControl( void ) ;

inline static uint16_t Msp430TimerCapComP_4_Capture_getEvent( void ) ;

inline static void Msp430TimerCapComP_4_Event_fired( void ) ;

inline static void Msp430TimerCapComP_4_Capture_default_captured(uint16_t n) ;

inline static void Msp430TimerCapComP_4_Compare_default_fired( void ) ;

inline static void Msp430TimerCapComP_4_Timer_overflow( void ) ;

static void Msp430TimerCapComP_5_Capture_captured(uint16_t time) ;

static void Msp430TimerCapComP_5_Compare_fired( void ) ;

typedef msp430_compare_control_t Msp430TimerCapComP_5_cc_t;

inline static Msp430TimerCapComP_5_cc_t Msp430TimerCapComP_5_int2CC(uint16_t x) ;

inline static Msp430TimerCapComP_5_cc_t Msp430TimerCapComP_5_Control_getControl( void ) ;

inline static uint16_t Msp430TimerCapComP_5_Capture_getEvent( void ) ;

inline static void Msp430TimerCapComP_5_Event_fired( void ) ;

inline static void Msp430TimerCapComP_5_Capture_default_captured(uint16_t n) ;

inline static void Msp430TimerCapComP_5_Compare_default_fired( void ) ;

inline static void Msp430TimerCapComP_5_Timer_overflow( void ) ;

static void Msp430TimerCapComP_6_Capture_captured(uint16_t time) ;

static void Msp430TimerCapComP_6_Compare_fired( void ) ;

typedef msp430_compare_control_t Msp430TimerCapComP_6_cc_t;

inline static Msp430TimerCapComP_6_cc_t Msp430TimerCapComP_6_int2CC(uint16_t x) ;

inline static Msp430TimerCapComP_6_cc_t Msp430TimerCapComP_6_Control_getControl( void ) ;

inline static uint16_t Msp430TimerCapComP_6_Capture_getEvent( void ) ;

inline static void Msp430TimerCapComP_6_Event_fired( void ) ;

inline static void Msp430TimerCapComP_6_Capture_default_captured(uint16_t n) ;

inline static void Msp430TimerCapComP_6_Compare_default_fired( void ) ;

inline static void Msp430TimerCapComP_6_Timer_overflow( void ) ;

static void Msp430TimerCapComP_7_Capture_captured(uint16_t time) ;

static void Msp430TimerCapComP_7_Compare_fired( void ) ;

typedef msp430_compare_control_t Msp430TimerCapComP_7_cc_t;

inline static Msp430TimerCapComP_7_cc_t Msp430TimerCapComP_7_int2CC(uint16_t x) ;

inline static Msp430TimerCapComP_7_cc_t Msp430TimerCapComP_7_Control_getControl( void ) ;

inline static uint16_t Msp430TimerCapComP_7_Capture_getEvent( void ) ;

inline static void Msp430TimerCapComP_7_Event_fired( void ) ;

inline static void Msp430TimerCapComP_7_Capture_default_captured(uint16_t n) ;

inline static void Msp430TimerCapComP_7_Compare_default_fired( void ) ;

inline static void Msp430TimerCapComP_7_Timer_overflow( void ) ;

static void Msp430TimerCapComP_8_Capture_captured(uint16_t time) ;

static void Msp430TimerCapComP_8_Compare_fired( void ) ;

typedef msp430_compare_control_t Msp430TimerCapComP_8_cc_t;

inline static Msp430TimerCapComP_8_cc_t Msp430TimerCapComP_8_int2CC(uint16_t x) ;

inline static Msp430TimerCapComP_8_cc_t Msp430TimerCapComP_8_Control_getControl( void ) ;

inline static uint16_t Msp430TimerCapComP_8_Capture_getEvent( void ) ;

inline static void Msp430TimerCapComP_8_Event_fired( void ) ;

inline static void Msp430TimerCapComP_8_Capture_default_captured(uint16_t n) ;

inline static void Msp430TimerCapComP_8_Compare_default_fired( void ) ;

inline static void Msp430TimerCapComP_8_Timer_overflow( void ) ;

static void Msp430TimerCapComP_9_Capture_captured(uint16_t time) ;

static void Msp430TimerCapComP_9_Compare_fired( void ) ;

typedef msp430_compare_control_t Msp430TimerCapComP_9_cc_t;

inline static Msp430TimerCapComP_9_cc_t Msp430TimerCapComP_9_int2CC(uint16_t x) ;

inline static Msp430TimerCapComP_9_cc_t Msp430TimerCapComP_9_Control_getControl( void ) ;

inline static uint16_t Msp430TimerCapComP_9_Capture_getEvent( void ) ;

inline static void Msp430TimerCapComP_9_Event_fired( void ) ;

inline static void Msp430TimerCapComP_9_Capture_default_captured(uint16_t n) ;

inline static void Msp430TimerCapComP_9_Compare_default_fired( void ) ;

inline static void Msp430TimerCapComP_9_Timer_overflow( void ) ;

static void Msp430TimerCommonP_VectorTimerB1_fired( void ) ;

static void Msp430TimerCommonP_VectorTimerA0_fired( void ) ;

static void Msp430TimerCommonP_VectorTimerA1_fired( void ) ;

static void Msp430TimerCommonP_VectorTimerB0_fired( void ) ;

void sig_TIMERA0_VECTOR( void ) ;

void sig_TIMERA1_VECTOR( void ) ;

void sig_TIMERB0_VECTOR( void ) ;

void sig_TIMERB1_VECTOR( void ) ;

static error_t RealMainP_SoftwareInit_init( void ) ;

static void RealMainP_Boot_booted( void ) ;

static error_t RealMainP_PlatformInit_init( void ) ;

static void RealMainP_Scheduler_init( void ) ;

static void RealMainP_Scheduler_taskLoop( void ) ;

static bool RealMainP_Scheduler_runNextTask( void ) ;

int main( void ) ;

static void SchedulerBasicP_TaskBasic_runTask(uint8_t arg_0x147bb38) ;

static void SchedulerBasicP_McuSleep_sleep( void ) ;

enum SchedulerBasicP___nesc_unnamed4269 { SchedulerBasicP_NUM_TASKS = 2U, SchedulerBasicP_NO_TASK = 255 };

uint8_t SchedulerBasicP_m_head;

uint8_t SchedulerBasicP_m_tail;

uint8_t (SchedulerBasicP_m_next[SchedulerBasicP_NUM_TASKS]);

__inline static uint8_t SchedulerBasicP_popTask( void ) ;

inline static bool SchedulerBasicP_isWaiting(uint8_t id) ;

inline static bool SchedulerBasicP_pushTask(uint8_t id) ;

inline static void SchedulerBasicP_Scheduler_init( void ) ;

static bool SchedulerBasicP_Scheduler_runNextTask( void ) ;

inline static void SchedulerBasicP_Scheduler_taskLoop( void ) ;

static error_t SchedulerBasicP_TaskBasic_postTask(uint8_t id) ;

inline static void SchedulerBasicP_TaskBasic_default_runTask(uint8_t id) ;

static mcu_power_t McuSleepC_McuPowerOverride_lowestState( void ) ;

bool McuSleepC_dirty = TRUE;

mcu_power_t McuSleepC_powerState = MSP430_POWER_ACTIVE;

const uint16_t (McuSleepC_msp430PowerBits[MSP430_POWER_LPM4 + 1]) = {0, 0x0010, 0x0040 + 0x0010, 0x0080 + 0x0010, 0x0080 + 0x0040 + 0x0010, 0x0080 + 0x0040 + 0x0020 + 0x0010};

inline static mcu_power_t McuSleepC_getPowerState( void ) ;

inline static void McuSleepC_computePowerState( void ) ;

inline static void McuSleepC_McuSleep_sleep( void ) ;

inline static mcu_power_t McuSleepC_McuPowerOverride_default_lowestState( void ) ;

static void BlinkC_Timer0_startPeriodic(uint32_t dt) ;

static void BlinkC_Timer1_startPeriodic(uint32_t dt) ;

static void BlinkC_Leds_led0Toggle( void ) ;

static void BlinkC_Leds_led1Toggle( void ) ;

static void BlinkC_Leds_led2Toggle( void ) ;

static void BlinkC_Timer2_startPeriodic(uint32_t dt) ;

inline static void BlinkC_Boot_booted( void ) ;

inline static void BlinkC_Timer0_fired( void ) ;

inline static void BlinkC_Timer1_fired( void ) ;

inline static void BlinkC_Timer2_fired( void ) ;

static void LedsP_Led0_toggle( void ) ;

static void LedsP_Led0_makeOutput( void ) ;

static void LedsP_Led0_set( void ) ;

static void LedsP_Led1_toggle( void ) ;

static void LedsP_Led1_makeOutput( void ) ;

static void LedsP_Led1_set( void ) ;

static void LedsP_Led2_toggle( void ) ;

static void LedsP_Led2_makeOutput( void ) ;

static void LedsP_Led2_set( void ) ;

inline static error_t LedsP_Init_init( void ) ;

inline static void LedsP_Leds_led0Toggle( void ) ;

inline static void LedsP_Leds_led1Toggle( void ) ;

inline static void LedsP_Leds_led2Toggle( void ) ;

inline static void HplMsp430GeneralIOP_36_IO_set( void ) ;

inline static void HplMsp430GeneralIOP_36_IO_toggle( void ) ;

inline static void HplMsp430GeneralIOP_36_IO_makeOutput( void ) ;

inline static void HplMsp430GeneralIOP_37_IO_set( void ) ;

inline static void HplMsp430GeneralIOP_37_IO_toggle( void ) ;

inline static void HplMsp430GeneralIOP_37_IO_makeOutput( void ) ;

inline static void HplMsp430GeneralIOP_38_IO_set( void ) ;

inline static void HplMsp430GeneralIOP_38_IO_toggle( void ) ;

inline static void HplMsp430GeneralIOP_38_IO_makeOutput( void ) ;

static void Msp430GpioC_0_HplGeneralIO_toggle( void ) ;

static void Msp430GpioC_0_HplGeneralIO_makeOutput( void ) ;

static void Msp430GpioC_0_HplGeneralIO_set( void ) ;

inline static void Msp430GpioC_0_GeneralIO_set( void ) ;

inline static void Msp430GpioC_0_GeneralIO_toggle( void ) ;

inline static void Msp430GpioC_0_GeneralIO_makeOutput( void ) ;

static void Msp430GpioC_1_HplGeneralIO_toggle( void ) ;

static void Msp430GpioC_1_HplGeneralIO_makeOutput( void ) ;

static void Msp430GpioC_1_HplGeneralIO_set( void ) ;

inline static void Msp430GpioC_1_GeneralIO_set( void ) ;

inline static void Msp430GpioC_1_GeneralIO_toggle( void ) ;

inline static void Msp430GpioC_1_GeneralIO_makeOutput( void ) ;

static void Msp430GpioC_2_HplGeneralIO_toggle( void ) ;

static void Msp430GpioC_2_HplGeneralIO_makeOutput( void ) ;

static void Msp430GpioC_2_HplGeneralIO_set( void ) ;

inline static void Msp430GpioC_2_GeneralIO_set( void ) ;

inline static void Msp430GpioC_2_GeneralIO_toggle( void ) ;

inline static void Msp430GpioC_2_GeneralIO_makeOutput( void ) ;

static void Msp430AlarmC_0_Msp430Compare_setEvent(uint16_t time) ;

static void Msp430AlarmC_0_Msp430Compare_setEventFromNow(uint16_t delta) ;

static uint16_t Msp430AlarmC_0_Msp430Timer_get( void ) ;

static void Msp430AlarmC_0_Alarm_fired( void ) ;

static void Msp430AlarmC_0_Msp430TimerControl_enableEvents( void ) ;

static void Msp430AlarmC_0_Msp430TimerControl_setControlAsCompare( void ) ;

static void Msp430AlarmC_0_Msp430TimerControl_disableEvents( void ) ;

static void Msp430AlarmC_0_Msp430TimerControl_clearPendingInterrupt( void ) ;

inline static error_t Msp430AlarmC_0_Init_init( void ) ;

inline static void Msp430AlarmC_0_Alarm_stop( void ) ;

inline static void Msp430AlarmC_0_Msp430Compare_fired( void ) ;

inline static void Msp430AlarmC_0_Alarm_startAt(uint16_t t0, uint16_t dt) ;

inline static void Msp430AlarmC_0_Msp430Timer_overflow( void ) ;

static uint16_t Msp430CounterC_0_Msp430Timer_get( void ) ;

static bool Msp430CounterC_0_Msp430Timer_isOverflowPending( void ) ;

static void Msp430CounterC_0_Counter_overflow( void ) ;

inline static uint16_t Msp430CounterC_0_Counter_get( void ) ;

inline static bool Msp430CounterC_0_Counter_isOverflowPending( void ) ;

inline static void Msp430CounterC_0_Msp430Timer_overflow( void ) ;

static TransformCounterC_0_CounterFrom_size_type TransformCounterC_0_CounterFrom_get( void ) ;

static bool TransformCounterC_0_CounterFrom_isOverflowPending( void ) ;

static void TransformCounterC_0_Counter_overflow( void ) ;

TransformCounterC_0_upper_count_type TransformCounterC_0_m_upper;

enum TransformCounterC_0___nesc_unnamed4270 { TransformCounterC_0_LOW_SHIFT_RIGHT = 5, TransformCounterC_0_HIGH_SHIFT_LEFT = 8 * sizeof( TransformCounterC_0_from_size_type ) - TransformCounterC_0_LOW_SHIFT_RIGHT, TransformCounterC_0_NUM_UPPER_BITS = 8 * sizeof( TransformCounterC_0_to_size_type ) - 8 * sizeof( TransformCounterC_0_from_size_type ) + 5, TransformCounterC_0_OVERFLOW_MASK = TransformCounterC_0_NUM_UPPER_BITS? ( TransformCounterC_0_upper_count_type )(2) << TransformCounterC_0_NUM_UPPER_BITS - 1 - 1 : 0 };

static TransformCounterC_0_to_size_type TransformCounterC_0_Counter_get( void ) ;

inline static void TransformCounterC_0_CounterFrom_overflow( void ) ;

static void TransformAlarmC_0_Alarm_fired( void ) ;

static void TransformAlarmC_0_AlarmFrom_startAt(TransformAlarmC_0_AlarmFrom_size_type t0, TransformAlarmC_0_AlarmFrom_size_type dt) ;

static void TransformAlarmC_0_AlarmFrom_stop( void ) ;

static TransformAlarmC_0_Counter_size_type TransformAlarmC_0_Counter_get( void ) ;

TransformAlarmC_0_to_size_type TransformAlarmC_0_m_t0;

TransformAlarmC_0_to_size_type TransformAlarmC_0_m_dt;

enum TransformAlarmC_0___nesc_unnamed4271 { TransformAlarmC_0_MAX_DELAY_LOG2 = 8 * sizeof( TransformAlarmC_0_from_size_type ) - 1 - 5, TransformAlarmC_0_MAX_DELAY = ( TransformAlarmC_0_to_size_type )(1) << TransformAlarmC_0_MAX_DELAY_LOG2 };

inline static TransformAlarmC_0_to_size_type TransformAlarmC_0_Alarm_getNow( void ) ;

inline static TransformAlarmC_0_to_size_type TransformAlarmC_0_Alarm_getAlarm( void ) ;

inline static void TransformAlarmC_0_Alarm_stop( void ) ;

static void TransformAlarmC_0_set_alarm( void ) ;

static void TransformAlarmC_0_Alarm_startAt(TransformAlarmC_0_to_size_type t0, TransformAlarmC_0_to_size_type dt) ;

inline static void TransformAlarmC_0_AlarmFrom_fired( void ) ;

inline static void TransformAlarmC_0_Counter_overflow( void ) ;

static error_t AlarmToTimerC_0_fired_postTask( void ) ;

static AlarmToTimerC_0_Alarm_size_type AlarmToTimerC_0_Alarm_getNow( void ) ;

static void AlarmToTimerC_0_Alarm_startAt(AlarmToTimerC_0_Alarm_size_type t0, AlarmToTimerC_0_Alarm_size_type dt) ;

static AlarmToTimerC_0_Alarm_size_type AlarmToTimerC_0_Alarm_getAlarm( void ) ;

static void AlarmToTimerC_0_Alarm_stop( void ) ;

static void AlarmToTimerC_0_Timer_fired( void ) ;

enum AlarmToTimerC_0___nesc_unnamed4272 { AlarmToTimerC_0_fired = 0U };

typedef int (AlarmToTimerC_0___nesc_sillytask_fired[AlarmToTimerC_0_fired]);

uint32_t AlarmToTimerC_0_m_dt;

bool AlarmToTimerC_0_m_oneshot;

inline static void AlarmToTimerC_0_start(uint32_t t0, uint32_t dt, bool oneshot) ;

inline static void AlarmToTimerC_0_Timer_stop( void ) ;

static void AlarmToTimerC_0_fired_runTask( void ) ;

inline static void AlarmToTimerC_0_Alarm_fired( void ) ;

inline static void AlarmToTimerC_0_Timer_startOneShotAt(uint32_t t0, uint32_t dt) ;

inline static uint32_t AlarmToTimerC_0_Timer_getNow( void ) ;

static error_t VirtualizeTimerC_0_updateFromTimer_postTask( void ) ;

static uint32_t VirtualizeTimerC_0_TimerFrom_getNow( void ) ;

static void VirtualizeTimerC_0_TimerFrom_startOneShotAt(uint32_t t0, uint32_t dt) ;

static void VirtualizeTimerC_0_TimerFrom_stop( void ) ;

static void VirtualizeTimerC_0_Timer_fired(uint8_t arg_0x18a3ea0) ;

enum VirtualizeTimerC_0___nesc_unnamed4273 { VirtualizeTimerC_0_updateFromTimer = 1U };

typedef int (VirtualizeTimerC_0___nesc_sillytask_updateFromTimer[VirtualizeTimerC_0_updateFromTimer]);

enum VirtualizeTimerC_0___nesc_unnamed4274 { VirtualizeTimerC_0_NUM_TIMERS = 3U, VirtualizeTimerC_0_END_OF_LIST = 255 };

typedef struct VirtualizeTimerC_0___nesc_unnamed4275 {
  uint32_t t0;
  uint32_t dt;
  bool isoneshot :1;
  bool isrunning :1;
  bool _reserved :6;
} VirtualizeTimerC_0_Timer_t;

VirtualizeTimerC_0_Timer_t (VirtualizeTimerC_0_m_timers[VirtualizeTimerC_0_NUM_TIMERS]);

static void VirtualizeTimerC_0_fireTimers(uint32_t now) ;

static void VirtualizeTimerC_0_updateFromTimer_runTask( void ) ;

inline static void VirtualizeTimerC_0_TimerFrom_fired( void ) ;

inline static void VirtualizeTimerC_0_startTimer(uint8_t num, uint32_t t0, uint32_t dt, bool isoneshot) ;

static void VirtualizeTimerC_0_Timer_startPeriodic(uint8_t num, uint32_t dt) ;

inline static void VirtualizeTimerC_0_Timer_default_fired(uint8_t num) ;

inline static void CounterToLocalTimeC_0_Counter_overflow( void ) ;

inline static void __nesc_enable_interrupt( void ) 
{
}

inline static void Msp430TimerCapComP_2_Timer_overflow( void ) 
{
}

inline static void Msp430TimerCapComP_1_Timer_overflow( void ) 
{
}

inline static void Msp430TimerCapComP_0_Timer_overflow( void ) 
{
}

static inline void Msp430TimerP_0_Timer_overflow( void ) 
{
  Msp430TimerCapComP_0_Timer_overflow();
  Msp430TimerCapComP_1_Timer_overflow();
  Msp430TimerCapComP_2_Timer_overflow();
}

inline static void Msp430TimerP_0_Overflow_fired( void ) 
{
  Msp430TimerP_0_Timer_overflow();
}

inline static void Msp430TimerP_0_Event_default_fired(uint8_t n) 
{
}

static inline void Msp430TimerP_0_Event_fired(uint8_t arg_0x1561800) 
{
  switch (arg_0x1561800) 
  {
    case 0:
      Msp430TimerCapComP_0_Event_fired();
      break;
    case 1:
      Msp430TimerCapComP_1_Event_fired();
      break;
    case 2:
      Msp430TimerCapComP_2_Event_fired();
      break;
    case 5:
      Msp430TimerP_0_Overflow_fired();
      break;
    default :
      Msp430TimerP_0_Event_default_fired(arg_0x1561800);
      break;
  }

}

inline static void Msp430TimerP_0_VectorTimerX0_fired( void ) 
{
  Msp430TimerP_0_Event_fired(0);
}

static inline void Msp430TimerCommonP_VectorTimerA0_fired( void ) 
{
  Msp430TimerP_0_VectorTimerX0_fired();
}

inline static Msp430TimerCapComP_0_cc_t Msp430TimerCapComP_0_int2CC(uint16_t x) 
{
  union Msp430TimerCapComP_0___nesc_unnamed4276  {
    uint16_t f;
    Msp430TimerCapComP_0_cc_t t;
  } c = {.f = x};
  return c.t;
}

inline static Msp430TimerCapComP_0_cc_t Msp430TimerCapComP_0_Control_getControl( void ) 
{
  return Msp430TimerCapComP_0_int2CC(*(volatile uint16_t )(354U));
}

inline static void Msp430TimerCapComP_0_Capture_default_captured(uint16_t n) 
{
}

static inline void Msp430TimerCapComP_0_Capture_captured(uint16_t time) 
{
  Msp430TimerCapComP_0_Capture_default_captured(time);
}

inline static uint16_t Msp430TimerCapComP_0_Capture_getEvent( void ) 
{
  return *(volatile uint16_t )(370U);
}

inline static void Msp430TimerCapComP_0_Compare_default_fired( void ) 
{
}

static inline void Msp430TimerCapComP_0_Compare_fired( void ) 
{
  Msp430TimerCapComP_0_Compare_default_fired();
}

inline static Msp430TimerCapComP_1_cc_t Msp430TimerCapComP_1_int2CC(uint16_t x) 
{
  union Msp430TimerCapComP_1___nesc_unnamed4277  {
    uint16_t f;
    Msp430TimerCapComP_1_cc_t t;
  } c = {.f = x};
  return c.t;
}

inline static Msp430TimerCapComP_1_cc_t Msp430TimerCapComP_1_Control_getControl( void ) 
{
  return Msp430TimerCapComP_1_int2CC(*(volatile uint16_t )(356U));
}

inline static void Msp430TimerCapComP_1_Capture_default_captured(uint16_t n) 
{
}

static inline void Msp430TimerCapComP_1_Capture_captured(uint16_t time) 
{
  Msp430TimerCapComP_1_Capture_default_captured(time);
}

inline static uint16_t Msp430TimerCapComP_1_Capture_getEvent( void ) 
{
  return *(volatile uint16_t )(372U);
}

inline static void Msp430TimerCapComP_1_Compare_default_fired( void ) 
{
}

static inline void Msp430TimerCapComP_1_Compare_fired( void ) 
{
  Msp430TimerCapComP_1_Compare_default_fired();
}

inline static Msp430TimerCapComP_2_cc_t Msp430TimerCapComP_2_int2CC(uint16_t x) 
{
  union Msp430TimerCapComP_2___nesc_unnamed4278  {
    uint16_t f;
    Msp430TimerCapComP_2_cc_t t;
  } c = {.f = x};
  return c.t;
}

inline static Msp430TimerCapComP_2_cc_t Msp430TimerCapComP_2_Control_getControl( void ) 
{
  return Msp430TimerCapComP_2_int2CC(*(volatile uint16_t )(358U));
}

inline static void Msp430TimerCapComP_2_Capture_default_captured(uint16_t n) 
{
}

static inline void Msp430TimerCapComP_2_Capture_captured(uint16_t time) 
{
  Msp430TimerCapComP_2_Capture_default_captured(time);
}

inline static uint16_t Msp430TimerCapComP_2_Capture_getEvent( void ) 
{
  return *(volatile uint16_t )(374U);
}

inline static void Msp430TimerCapComP_2_Compare_default_fired( void ) 
{
}

static inline void Msp430TimerCapComP_2_Compare_fired( void ) 
{
  Msp430TimerCapComP_2_Compare_default_fired();
}

inline static void Msp430TimerP_0_VectorTimerX1_fired( void ) 
{
  uint8_t n = *(volatile uint16_t )(302U);
  Msp430TimerP_0_Event_fired(n >> 1);
}

static inline void Msp430TimerCommonP_VectorTimerA1_fired( void ) 
{
  Msp430TimerP_0_VectorTimerX1_fired();
}

inline static void Msp430TimerP_1_VectorTimerX0_fired( void ) 
{
  Msp430TimerP_1_Event_fired(0);
}

static inline void Msp430TimerCommonP_VectorTimerB0_fired( void ) 
{
  Msp430TimerP_1_VectorTimerX0_fired();
}

inline static void Msp430TimerCapComP_9_Timer_overflow( void ) 
{
}

inline static void Msp430TimerCapComP_8_Timer_overflow( void ) 
{
}

inline static void Msp430TimerCapComP_7_Timer_overflow( void ) 
{
}

inline static void Msp430TimerCapComP_6_Timer_overflow( void ) 
{
}

inline static void Msp430TimerCapComP_5_Timer_overflow( void ) 
{
}

inline static void Msp430TimerCapComP_4_Timer_overflow( void ) 
{
}

inline static void Msp430TimerCapComP_3_Timer_overflow( void ) 
{
}

inline static void Msp430AlarmC_0_Msp430Timer_overflow( void ) 
{
}

inline static void CounterToLocalTimeC_0_Counter_overflow( void ) 
{
}

inline static void TransformAlarmC_0_Counter_overflow( void ) 
{
}

static inline void TransformCounterC_0_Counter_overflow( void ) 
{
  TransformAlarmC_0_Counter_overflow();
  CounterToLocalTimeC_0_Counter_overflow();
}

inline static void TransformCounterC_0_CounterFrom_overflow( void ) 
{
{
  TransformCounterC_0_m_upper++;
  if(TransformCounterC_0_m_upper & TransformCounterC_0_OVERFLOW_MASK == 0)
  {
    TransformCounterC_0_Counter_overflow();
  }
}
}

static inline void Msp430CounterC_0_Counter_overflow( void ) 
{
  TransformCounterC_0_CounterFrom_overflow();
}

inline static void Msp430CounterC_0_Msp430Timer_overflow( void ) 
{
  Msp430CounterC_0_Counter_overflow();
}

static inline void Msp430TimerP_1_Timer_overflow( void ) 
{
  Msp430CounterC_0_Msp430Timer_overflow();
  Msp430AlarmC_0_Msp430Timer_overflow();
  Msp430TimerCapComP_3_Timer_overflow();
  Msp430TimerCapComP_4_Timer_overflow();
  Msp430TimerCapComP_5_Timer_overflow();
  Msp430TimerCapComP_6_Timer_overflow();
  Msp430TimerCapComP_7_Timer_overflow();
  Msp430TimerCapComP_8_Timer_overflow();
  Msp430TimerCapComP_9_Timer_overflow();
}

inline static void Msp430TimerP_1_Overflow_fired( void ) 
{
  Msp430TimerP_1_Timer_overflow();
}

static inline error_t AlarmToTimerC_0_fired_postTask( void ) 
{
  unsigned char result;
  result = SchedulerBasicP_TaskBasic_postTask(AlarmToTimerC_0_fired);
  return result;
}

inline static void AlarmToTimerC_0_Alarm_fired( void ) 
{
  AlarmToTimerC_0_fired_postTask();
}

static inline void TransformAlarmC_0_Alarm_fired( void ) 
{
  AlarmToTimerC_0_Alarm_fired();
}

inline static void TransformAlarmC_0_AlarmFrom_fired( void ) 
{
{
  if(TransformAlarmC_0_m_dt == 0)
  {
    TransformAlarmC_0_Alarm_fired();
  }
  else 
  {
    TransformAlarmC_0_set_alarm();
  }
}
}

static inline void Msp430AlarmC_0_Alarm_fired( void ) 
{
  TransformAlarmC_0_AlarmFrom_fired();
}

inline static void Msp430TimerCapComP_3_Control_disableEvents( void ) 
{
  *(volatile uint16_t )(386U) &= ~0x0010;
}

static inline void Msp430AlarmC_0_Msp430TimerControl_disableEvents( void ) 
{
  Msp430TimerCapComP_3_Control_disableEvents();
}

inline static void Msp430AlarmC_0_Msp430Compare_fired( void ) 
{
  Msp430AlarmC_0_Msp430TimerControl_disableEvents();
  Msp430AlarmC_0_Alarm_fired();
}

static inline void Msp430TimerCapComP_3_Compare_fired( void ) 
{
  Msp430AlarmC_0_Msp430Compare_fired();
}

inline static uint16_t Msp430TimerCapComP_3_Capture_getEvent( void ) 
{
  return *(volatile uint16_t )(402U);
}

inline static void Msp430TimerCapComP_3_Capture_default_captured(uint16_t n) 
{
}

static inline void Msp430TimerCapComP_3_Capture_captured(uint16_t time) 
{
  Msp430TimerCapComP_3_Capture_default_captured(time);
}

inline static Msp430TimerCapComP_3_cc_t Msp430TimerCapComP_3_int2CC(uint16_t x) 
{
  union Msp430TimerCapComP_3___nesc_unnamed4279  {
    uint16_t f;
    Msp430TimerCapComP_3_cc_t t;
  } c = {.f = x};
  return c.t;
}

inline static Msp430TimerCapComP_3_cc_t Msp430TimerCapComP_3_Control_getControl( void ) 
{
  return Msp430TimerCapComP_3_int2CC(*(volatile uint16_t )(386U));
}

inline static void Msp430TimerCapComP_3_Event_fired( void ) 
{
  if(Msp430TimerCapComP_3_Control_getControl().cap)
  {
    Msp430TimerCapComP_3_Capture_captured(Msp430TimerCapComP_3_Capture_getEvent());
  }
  else 
  {
    Msp430TimerCapComP_3_Compare_fired();
  }
}

inline static bool SchedulerBasicP_isWaiting(uint8_t id) 
{
  return SchedulerBasicP_m_next[id] != SchedulerBasicP_NO_TASK || SchedulerBasicP_m_tail == id;
}

inline static bool SchedulerBasicP_pushTask(uint8_t id) 
{
  if(!SchedulerBasicP_isWaiting(id))
  {
    if(SchedulerBasicP_m_head == SchedulerBasicP_NO_TASK)
    {
      SchedulerBasicP_m_head = id;
      SchedulerBasicP_m_tail = id;
    }
    else 
    {
      SchedulerBasicP_m_next[SchedulerBasicP_m_tail] = id;
      SchedulerBasicP_m_tail = id;
    }
    return TRUE;
  }
  else 
  {
    return FALSE;
  }
}

static inline uint16_t Msp430CounterC_0_Msp430Timer_get( void ) 
{
  unsigned int result;
  result = Msp430TimerP_1_Timer_get();
  return result;
}

inline static uint16_t Msp430CounterC_0_Counter_get( void ) 
{
  return Msp430CounterC_0_Msp430Timer_get();
}

static inline TransformCounterC_0_CounterFrom_size_type TransformCounterC_0_CounterFrom_get( void ) 
{
  unsigned int result;
  result = Msp430CounterC_0_Counter_get();
  return result;
}

inline static bool Msp430TimerP_1_Timer_isOverflowPending( void ) 
{
  return *(volatile uint16_t )(384U) & 1U;
}

static inline bool Msp430CounterC_0_Msp430Timer_isOverflowPending( void ) 
{
  unsigned char result;
  result = Msp430TimerP_1_Timer_isOverflowPending();
  return result;
}

inline static bool Msp430CounterC_0_Counter_isOverflowPending( void ) 
{
  return Msp430CounterC_0_Msp430Timer_isOverflowPending();
}

static inline bool TransformCounterC_0_CounterFrom_isOverflowPending( void ) 
{
  unsigned char result;
  result = Msp430CounterC_0_Counter_isOverflowPending();
  return result;
}

inline static void Msp430TimerCapComP_3_Control_enableEvents( void ) 
{
  *(volatile uint16_t )(386U) |= 0x0010;
}

static inline void Msp430AlarmC_0_Msp430TimerControl_enableEvents( void ) 
{
  Msp430TimerCapComP_3_Control_enableEvents();
}

inline static void Msp430TimerCapComP_3_Control_clearPendingInterrupt( void ) 
{
  *(volatile uint16_t )(386U) &= ~0x0001;
}

static inline void Msp430AlarmC_0_Msp430TimerControl_clearPendingInterrupt( void ) 
{
  Msp430TimerCapComP_3_Control_clearPendingInterrupt();
}

inline static void Msp430TimerCapComP_3_Compare_setEvent(uint16_t x) 
{
  *(volatile uint16_t )(402U) = x;
}

static inline void Msp430AlarmC_0_Msp430Compare_setEvent(uint16_t time) 
{
  Msp430TimerCapComP_3_Compare_setEvent(time);
}

static inline uint16_t Msp430TimerCapComP_3_Timer_get( void ) 
{
  unsigned int result;
  result = Msp430TimerP_1_Timer_get();
  return result;
}

inline static void Msp430TimerCapComP_3_Compare_setEventFromNow(uint16_t x) 
{
  *(volatile uint16_t )(402U) = Msp430TimerCapComP_3_Timer_get() + x;
}

static inline void Msp430AlarmC_0_Msp430Compare_setEventFromNow(uint16_t delta) 
{
  Msp430TimerCapComP_3_Compare_setEventFromNow(delta);
}

static inline uint16_t Msp430AlarmC_0_Msp430Timer_get( void ) 
{
  unsigned int result;
  result = Msp430TimerP_1_Timer_get();
  return result;
}

inline static void Msp430AlarmC_0_Alarm_startAt(uint16_t t0, uint16_t dt) 
{
{
  uint16_t now = Msp430AlarmC_0_Msp430Timer_get();
  uint16_t elapsed = now - t0;
  if(elapsed >= dt)
  {
    Msp430AlarmC_0_Msp430Compare_setEventFromNow(2);
  }
  else 
  {
    uint16_t remaining = dt - elapsed;
    if(remaining <= 2)
    {
      Msp430AlarmC_0_Msp430Compare_setEventFromNow(2);
    }
    else 
    {
      Msp430AlarmC_0_Msp430Compare_setEvent(now + remaining);
    }
  }
  Msp430AlarmC_0_Msp430TimerControl_clearPendingInterrupt();
  Msp430AlarmC_0_Msp430TimerControl_enableEvents();
}
}

static inline void TransformAlarmC_0_AlarmFrom_startAt(TransformAlarmC_0_AlarmFrom_size_type t0, TransformAlarmC_0_AlarmFrom_size_type dt) 
{
  Msp430AlarmC_0_Alarm_startAt(t0, dt);
}

inline static void Msp430TimerCapComP_4_Compare_default_fired( void ) 
{
}

static inline void Msp430TimerCapComP_4_Compare_fired( void ) 
{
  Msp430TimerCapComP_4_Compare_default_fired();
}

inline static uint16_t Msp430TimerCapComP_4_Capture_getEvent( void ) 
{
  return *(volatile uint16_t )(404U);
}

inline static void Msp430TimerCapComP_4_Capture_default_captured(uint16_t n) 
{
}

static inline void Msp430TimerCapComP_4_Capture_captured(uint16_t time) 
{
  Msp430TimerCapComP_4_Capture_default_captured(time);
}

inline static Msp430TimerCapComP_4_cc_t Msp430TimerCapComP_4_int2CC(uint16_t x) 
{
  union Msp430TimerCapComP_4___nesc_unnamed4280  {
    uint16_t f;
    Msp430TimerCapComP_4_cc_t t;
  } c = {.f = x};
  return c.t;
}

inline static Msp430TimerCapComP_4_cc_t Msp430TimerCapComP_4_Control_getControl( void ) 
{
  return Msp430TimerCapComP_4_int2CC(*(volatile uint16_t )(388U));
}

inline static void Msp430TimerCapComP_4_Event_fired( void ) 
{
  if(Msp430TimerCapComP_4_Control_getControl().cap)
  {
    Msp430TimerCapComP_4_Capture_captured(Msp430TimerCapComP_4_Capture_getEvent());
  }
  else 
  {
    Msp430TimerCapComP_4_Compare_fired();
  }
}

inline static void Msp430TimerCapComP_5_Compare_default_fired( void ) 
{
}

static inline void Msp430TimerCapComP_5_Compare_fired( void ) 
{
  Msp430TimerCapComP_5_Compare_default_fired();
}

inline static uint16_t Msp430TimerCapComP_5_Capture_getEvent( void ) 
{
  return *(volatile uint16_t )(406U);
}

inline static void Msp430TimerCapComP_5_Capture_default_captured(uint16_t n) 
{
}

static inline void Msp430TimerCapComP_5_Capture_captured(uint16_t time) 
{
  Msp430TimerCapComP_5_Capture_default_captured(time);
}

inline static Msp430TimerCapComP_5_cc_t Msp430TimerCapComP_5_int2CC(uint16_t x) 
{
  union Msp430TimerCapComP_5___nesc_unnamed4281  {
    uint16_t f;
    Msp430TimerCapComP_5_cc_t t;
  } c = {.f = x};
  return c.t;
}

inline static Msp430TimerCapComP_5_cc_t Msp430TimerCapComP_5_Control_getControl( void ) 
{
  return Msp430TimerCapComP_5_int2CC(*(volatile uint16_t )(390U));
}

inline static void Msp430TimerCapComP_5_Event_fired( void ) 
{
  if(Msp430TimerCapComP_5_Control_getControl().cap)
  {
    Msp430TimerCapComP_5_Capture_captured(Msp430TimerCapComP_5_Capture_getEvent());
  }
  else 
  {
    Msp430TimerCapComP_5_Compare_fired();
  }
}

inline static void Msp430TimerCapComP_6_Compare_default_fired( void ) 
{
}

static inline void Msp430TimerCapComP_6_Compare_fired( void ) 
{
  Msp430TimerCapComP_6_Compare_default_fired();
}

inline static uint16_t Msp430TimerCapComP_6_Capture_getEvent( void ) 
{
  return *(volatile uint16_t )(408U);
}

inline static void Msp430TimerCapComP_6_Capture_default_captured(uint16_t n) 
{
}

static inline void Msp430TimerCapComP_6_Capture_captured(uint16_t time) 
{
  Msp430TimerCapComP_6_Capture_default_captured(time);
}

inline static Msp430TimerCapComP_6_cc_t Msp430TimerCapComP_6_int2CC(uint16_t x) 
{
  union Msp430TimerCapComP_6___nesc_unnamed4282  {
    uint16_t f;
    Msp430TimerCapComP_6_cc_t t;
  } c = {.f = x};
  return c.t;
}

inline static Msp430TimerCapComP_6_cc_t Msp430TimerCapComP_6_Control_getControl( void ) 
{
  return Msp430TimerCapComP_6_int2CC(*(volatile uint16_t )(392U));
}

inline static void Msp430TimerCapComP_6_Event_fired( void ) 
{
  if(Msp430TimerCapComP_6_Control_getControl().cap)
  {
    Msp430TimerCapComP_6_Capture_captured(Msp430TimerCapComP_6_Capture_getEvent());
  }
  else 
  {
    Msp430TimerCapComP_6_Compare_fired();
  }
}

inline static void Msp430TimerCapComP_7_Compare_default_fired( void ) 
{
}

static inline void Msp430TimerCapComP_7_Compare_fired( void ) 
{
  Msp430TimerCapComP_7_Compare_default_fired();
}

inline static uint16_t Msp430TimerCapComP_7_Capture_getEvent( void ) 
{
  return *(volatile uint16_t )(410U);
}

inline static void Msp430TimerCapComP_7_Capture_default_captured(uint16_t n) 
{
}

static inline void Msp430TimerCapComP_7_Capture_captured(uint16_t time) 
{
  Msp430TimerCapComP_7_Capture_default_captured(time);
}

inline static Msp430TimerCapComP_7_cc_t Msp430TimerCapComP_7_int2CC(uint16_t x) 
{
  union Msp430TimerCapComP_7___nesc_unnamed4283  {
    uint16_t f;
    Msp430TimerCapComP_7_cc_t t;
  } c = {.f = x};
  return c.t;
}

inline static Msp430TimerCapComP_7_cc_t Msp430TimerCapComP_7_Control_getControl( void ) 
{
  return Msp430TimerCapComP_7_int2CC(*(volatile uint16_t )(394U));
}

inline static void Msp430TimerCapComP_7_Event_fired( void ) 
{
  if(Msp430TimerCapComP_7_Control_getControl().cap)
  {
    Msp430TimerCapComP_7_Capture_captured(Msp430TimerCapComP_7_Capture_getEvent());
  }
  else 
  {
    Msp430TimerCapComP_7_Compare_fired();
  }
}

inline static void Msp430TimerCapComP_8_Compare_default_fired( void ) 
{
}

static inline void Msp430TimerCapComP_8_Compare_fired( void ) 
{
  Msp430TimerCapComP_8_Compare_default_fired();
}

inline static uint16_t Msp430TimerCapComP_8_Capture_getEvent( void ) 
{
  return *(volatile uint16_t )(412U);
}

inline static void Msp430TimerCapComP_8_Capture_default_captured(uint16_t n) 
{
}

static inline void Msp430TimerCapComP_8_Capture_captured(uint16_t time) 
{
  Msp430TimerCapComP_8_Capture_default_captured(time);
}

inline static Msp430TimerCapComP_8_cc_t Msp430TimerCapComP_8_int2CC(uint16_t x) 
{
  union Msp430TimerCapComP_8___nesc_unnamed4284  {
    uint16_t f;
    Msp430TimerCapComP_8_cc_t t;
  } c = {.f = x};
  return c.t;
}

inline static Msp430TimerCapComP_8_cc_t Msp430TimerCapComP_8_Control_getControl( void ) 
{
  return Msp430TimerCapComP_8_int2CC(*(volatile uint16_t )(396U));
}

inline static void Msp430TimerCapComP_8_Event_fired( void ) 
{
  if(Msp430TimerCapComP_8_Control_getControl().cap)
  {
    Msp430TimerCapComP_8_Capture_captured(Msp430TimerCapComP_8_Capture_getEvent());
  }
  else 
  {
    Msp430TimerCapComP_8_Compare_fired();
  }
}

inline static void Msp430TimerCapComP_9_Compare_default_fired( void ) 
{
}

static inline void Msp430TimerCapComP_9_Compare_fired( void ) 
{
  Msp430TimerCapComP_9_Compare_default_fired();
}

inline static uint16_t Msp430TimerCapComP_9_Capture_getEvent( void ) 
{
  return *(volatile uint16_t )(414U);
}

inline static void Msp430TimerCapComP_9_Capture_default_captured(uint16_t n) 
{
}

static inline void Msp430TimerCapComP_9_Capture_captured(uint16_t time) 
{
  Msp430TimerCapComP_9_Capture_default_captured(time);
}

inline static Msp430TimerCapComP_9_cc_t Msp430TimerCapComP_9_int2CC(uint16_t x) 
{
  union Msp430TimerCapComP_9___nesc_unnamed4285  {
    uint16_t f;
    Msp430TimerCapComP_9_cc_t t;
  } c = {.f = x};
  return c.t;
}

inline static Msp430TimerCapComP_9_cc_t Msp430TimerCapComP_9_Control_getControl( void ) 
{
  return Msp430TimerCapComP_9_int2CC(*(volatile uint16_t )(398U));
}

inline static void Msp430TimerCapComP_9_Event_fired( void ) 
{
  if(Msp430TimerCapComP_9_Control_getControl().cap)
  {
    Msp430TimerCapComP_9_Capture_captured(Msp430TimerCapComP_9_Capture_getEvent());
  }
  else 
  {
    Msp430TimerCapComP_9_Compare_fired();
  }
}

inline static void Msp430TimerP_1_VectorTimerX1_fired( void ) 
{
  uint8_t n = *(volatile uint16_t )(286U);
  Msp430TimerP_1_Event_fired(n >> 1);
}

static inline void Msp430TimerCommonP_VectorTimerB1_fired( void ) 
{
  Msp430TimerP_1_VectorTimerX1_fired();
}

inline static void SchedulerBasicP_Scheduler_init( void ) 
{
{
  memset(( void )(SchedulerBasicP_m_next), SchedulerBasicP_NO_TASK, sizeof(SchedulerBasicP_m_next));
  SchedulerBasicP_m_head = SchedulerBasicP_NO_TASK;
  SchedulerBasicP_m_tail = SchedulerBasicP_NO_TASK;
}
}

static inline void RealMainP_Scheduler_init( void ) 
{
  SchedulerBasicP_Scheduler_init();
}

inline static void HplMsp430GeneralIOP_38_IO_set( void ) 
{
  *(volatile uint8_t )(49U) |= 0x01 << 6;
}

static inline void Msp430GpioC_2_HplGeneralIO_set( void ) 
{
  HplMsp430GeneralIOP_38_IO_set();
}

inline static void Msp430GpioC_2_GeneralIO_set( void ) 
{
  Msp430GpioC_2_HplGeneralIO_set();
}

static inline void LedsP_Led2_set( void ) 
{
  Msp430GpioC_2_GeneralIO_set();
}

inline static void HplMsp430GeneralIOP_37_IO_set( void ) 
{
  *(volatile uint8_t )(49U) |= 0x01 << 5;
}

static inline void Msp430GpioC_1_HplGeneralIO_set( void ) 
{
  HplMsp430GeneralIOP_37_IO_set();
}

inline static void Msp430GpioC_1_GeneralIO_set( void ) 
{
  Msp430GpioC_1_HplGeneralIO_set();
}

static inline void LedsP_Led1_set( void ) 
{
  Msp430GpioC_1_GeneralIO_set();
}

inline static void HplMsp430GeneralIOP_36_IO_set( void ) 
{
  *(volatile uint8_t )(49U) |= 0x01 << 4;
}

static inline void Msp430GpioC_0_HplGeneralIO_set( void ) 
{
  HplMsp430GeneralIOP_36_IO_set();
}

inline static void Msp430GpioC_0_GeneralIO_set( void ) 
{
  Msp430GpioC_0_HplGeneralIO_set();
}

static inline void LedsP_Led0_set( void ) 
{
  Msp430GpioC_0_GeneralIO_set();
}

inline static void HplMsp430GeneralIOP_38_IO_makeOutput( void ) 
{
  *(volatile uint8_t )(50U) |= 0x01 << 6;
}

static inline void Msp430GpioC_2_HplGeneralIO_makeOutput( void ) 
{
  HplMsp430GeneralIOP_38_IO_makeOutput();
}

inline static void Msp430GpioC_2_GeneralIO_makeOutput( void ) 
{
  Msp430GpioC_2_HplGeneralIO_makeOutput();
}

static inline void LedsP_Led2_makeOutput( void ) 
{
  Msp430GpioC_2_GeneralIO_makeOutput();
}

inline static void HplMsp430GeneralIOP_37_IO_makeOutput( void ) 
{
  *(volatile uint8_t )(50U) |= 0x01 << 5;
}

static inline void Msp430GpioC_1_HplGeneralIO_makeOutput( void ) 
{
  HplMsp430GeneralIOP_37_IO_makeOutput();
}

inline static void Msp430GpioC_1_GeneralIO_makeOutput( void ) 
{
  Msp430GpioC_1_HplGeneralIO_makeOutput();
}

static inline void LedsP_Led1_makeOutput( void ) 
{
  Msp430GpioC_1_GeneralIO_makeOutput();
}

inline static void HplMsp430GeneralIOP_36_IO_makeOutput( void ) 
{
  *(volatile uint8_t )(50U) |= 0x01 << 4;
}

static inline void Msp430GpioC_0_HplGeneralIO_makeOutput( void ) 
{
  HplMsp430GeneralIOP_36_IO_makeOutput();
}

inline static void Msp430GpioC_0_GeneralIO_makeOutput( void ) 
{
  Msp430GpioC_0_HplGeneralIO_makeOutput();
}

static inline void LedsP_Led0_makeOutput( void ) 
{
  Msp430GpioC_0_GeneralIO_makeOutput();
}

inline static error_t LedsP_Init_init( void ) 
{
{
  LedsP_Led0_makeOutput();
  LedsP_Led1_makeOutput();
  LedsP_Led2_makeOutput();
  LedsP_Led0_set();
  LedsP_Led1_set();
  LedsP_Led2_set();
}
  return SUCCESS;
}

static inline error_t PlatformP_LedsInit_init( void ) 
{
  unsigned char result;
  result = LedsP_Init_init();
  return result;
}

inline static void TOSH_SET_SIMO0_PIN() 
{

  _P3OUT |= 1 << 1;
}

inline static void TOSH_SET_UCLK0_PIN() 
{

  _P3OUT |= 1 << 3;
}

inline static void TOSH_SET_FLASH_CS_PIN() 
{

  _P4OUT |= 1 << 4;
}

inline static void TOSH_CLR_UCLK0_PIN() 
{

  _P3OUT &= ~1 << 3;
}

inline static void TOSH_CLR_FLASH_CS_PIN() 
{

  _P4OUT &= ~1 << 4;
}

__inline static void MotePlatformC_TOSH_wait( void ) 
{
}

inline static void TOSH_SET_FLASH_HOLD_PIN() 
{

  _P4OUT |= 1 << 7;
}

inline static void TOSH_MAKE_FLASH_CS_OUTPUT() 
{

  _P4DIR |= 1 << 4;
}

inline static void TOSH_MAKE_FLASH_HOLD_OUTPUT() 
{

  _P4DIR |= 1 << 7;
}

inline static void TOSH_MAKE_UCLK0_OUTPUT() 
{

  _P3DIR |= 1 << 3;
}

inline static void TOSH_MAKE_SIMO0_OUTPUT() 
{

  _P3DIR |= 1 << 1;
}

inline static void MotePlatformC_TOSH_FLASH_M25P_DP( void ) 
{
  TOSH_MAKE_SIMO0_OUTPUT();
  TOSH_MAKE_UCLK0_OUTPUT();
  TOSH_MAKE_FLASH_HOLD_OUTPUT();
  TOSH_MAKE_FLASH_CS_OUTPUT();
  TOSH_SET_FLASH_HOLD_PIN();
  TOSH_SET_FLASH_CS_PIN();
  MotePlatformC_TOSH_wait();
  TOSH_CLR_FLASH_CS_PIN();
  TOSH_CLR_UCLK0_PIN();
  MotePlatformC_TOSH_FLASH_M25P_DP_bit(TRUE);
  MotePlatformC_TOSH_FLASH_M25P_DP_bit(FALSE);
  MotePlatformC_TOSH_FLASH_M25P_DP_bit(TRUE);
  MotePlatformC_TOSH_FLASH_M25P_DP_bit(TRUE);
  MotePlatformC_TOSH_FLASH_M25P_DP_bit(TRUE);
  MotePlatformC_TOSH_FLASH_M25P_DP_bit(FALSE);
  MotePlatformC_TOSH_FLASH_M25P_DP_bit(FALSE);
  MotePlatformC_TOSH_FLASH_M25P_DP_bit(TRUE);
  TOSH_SET_FLASH_CS_PIN();
  TOSH_SET_UCLK0_PIN();
  TOSH_SET_SIMO0_PIN();
}

__inline static void MotePlatformC_uwait(uint16_t u) 
{
  uint16_t t0 = _TAR;
  while(_TAR - t0 <= u)
;
}

inline static error_t MotePlatformC_Init_init( void ) 
{
{
  _P1SEL = 0;
  _P2SEL = 0;
  _P3SEL = 0;
  _P4SEL = 0;
  _P5SEL = 0;
  _P6SEL = 0;
  _P1OUT = 0x00;
  _P1DIR = 0xe0;
  _P2OUT = 0x30;
  _P2DIR = 0x7b;
  _P3OUT = 0x00;
  _P3DIR = 0xf1;
  _P4OUT = 0xdd;
  _P4DIR = 0xfd;
  _P5OUT = 0xff;
  _P5DIR = 0xff;
  _P6OUT = 0x00;
  _P6DIR = 0xff;
  _P1IE = 0;
  _P2IE = 0;
  MotePlatformC_uwait(1024 * 10);
  MotePlatformC_TOSH_FLASH_M25P_DP();
}
  return SUCCESS;
}

static inline error_t PlatformP_MoteInit_init( void ) 
{
  unsigned char result;
  result = MotePlatformC_Init_init();
  return result;
}

inline static void Msp430ClockP_startTimerB( void ) 
{
  _TBCTL = 0x0020 | _TBCTL & ~0x0020 | 0x0010;
}

inline static void Msp430ClockP_startTimerA( void ) 
{
  _TACTL = 0x0020 | _TACTL & ~0x0020 | 0x0010;
}

inline static void Msp430ClockP_Msp430ClockInit_defaultInitTimerB( void ) 
{
  _TBR = 0;
  _TBCTL = 0x0100 | 0x0002;
}

inline static void Msp430ClockP_Msp430ClockInit_default_initTimerB( void ) 
{
  Msp430ClockP_Msp430ClockInit_defaultInitTimerB();
}

static inline void Msp430ClockP_Msp430ClockInit_initTimerB( void ) 
{
  Msp430ClockP_Msp430ClockInit_default_initTimerB();
}

inline static void Msp430ClockP_Msp430ClockInit_defaultInitTimerA( void ) 
{
  _TAR = 0;
  _TACTL = 0x0200 | 0x0002;
}

inline static void Msp430ClockP_Msp430ClockInit_default_initTimerA( void ) 
{
  Msp430ClockP_Msp430ClockInit_defaultInitTimerA();
}

static inline void Msp430ClockP_Msp430ClockInit_initTimerA( void ) 
{
  Msp430ClockP_Msp430ClockInit_default_initTimerA();
}

inline static void Msp430ClockP_Msp430ClockInit_defaultInitClocks( void ) 
{
  _BCSCTL1 = 0x80 | _BCSCTL1 & 0x04 | 0x02 | 0x01;
  _BCSCTL2 = 0x04;
  _IE1 &= ~1 << 1;
}

inline static void Msp430ClockP_Msp430ClockInit_default_initClocks( void ) 
{
  Msp430ClockP_Msp430ClockInit_defaultInitClocks();
}

static inline void Msp430ClockP_Msp430ClockInit_initClocks( void ) 
{
  Msp430ClockP_Msp430ClockInit_default_initClocks();
}

inline static uint16_t Msp430ClockP_test_calib_busywait_delta(int calib) 
{
  int8_t aclk_count = 2;
  uint16_t dco_prev = 0;
  uint16_t dco_curr = 0;
  Msp430ClockP_set_dco_calib(calib);
  while(aclk_count-- > 0)
  {
    _TBCCR0 = _TBR + Msp430ClockP_ACLK_CALIB_PERIOD;
    _TBCCTL0 &= ~0x0001;
    while(_TBCCTL0 & 0x0001 == 0)
;
    dco_prev = dco_curr;
    dco_curr = _TAR;
  }
  return dco_curr - dco_prev;
}

inline static void Msp430ClockP_busyCalibrateDco( void ) 
{
  int calib;
  int step;
  for(calib = 0, step = 0x800; step != 0; step >>= 1)
  {
    if(Msp430ClockP_test_calib_busywait_delta(calib | step) <= Msp430ClockP_TARGET_DCO_DELTA)
    {
      calib |= step;
    }
  }

  if(calib & 0x0e0 == 0x0e0)
  {
    calib &= ~0x01f;
  }
  Msp430ClockP_set_dco_calib(calib);
}

inline static void Msp430ClockP_Msp430ClockInit_defaultSetupDcoCalibrate( void ) 
{
  _TACTL = 0x0200 | 0x0020;
  _TBCTL = 0x0100 | 0x0020;
  _BCSCTL1 = 0x80 | 0x04;
  _BCSCTL2 = 0;
  _TBCCTL0 = 0x4000;
}

inline static void Msp430ClockP_Msp430ClockInit_default_setupDcoCalibrate( void ) 
{
  Msp430ClockP_Msp430ClockInit_defaultSetupDcoCalibrate();
}

static inline void Msp430ClockP_Msp430ClockInit_setupDcoCalibrate( void ) 
{
  Msp430ClockP_Msp430ClockInit_default_setupDcoCalibrate();
}

inline static error_t Msp430ClockP_Init_init( void ) 
{
  _TACTL = 0x0004;
  _TAIV = 0;
  _TBCTL = 0x0004;
  _TBIV = 0;
{
  Msp430ClockP_Msp430ClockInit_setupDcoCalibrate();
  Msp430ClockP_busyCalibrateDco();
  Msp430ClockP_Msp430ClockInit_initClocks();
  Msp430ClockP_Msp430ClockInit_initTimerA();
  Msp430ClockP_Msp430ClockInit_initTimerB();
  Msp430ClockP_startTimerA();
  Msp430ClockP_startTimerB();
}
  return SUCCESS;
}

static inline error_t PlatformP_MoteClockInit_init( void ) 
{
  unsigned char result;
  result = Msp430ClockP_Init_init();
  return result;
}

inline static error_t PlatformP_Init_init( void ) 
{
  PlatformP_MoteClockInit_init();
  PlatformP_MoteInit_init();
  PlatformP_LedsInit_init();
  return SUCCESS;
}

static inline error_t RealMainP_PlatformInit_init( void ) 
{
  unsigned char result;
  result = PlatformP_Init_init();
  return result;
}

inline static void TOSH_CLR_SIMO0_PIN() 
{

  _P3OUT &= ~1 << 1;
}

static inline bool RealMainP_Scheduler_runNextTask( void ) 
{
  unsigned char result;
  result = SchedulerBasicP_Scheduler_runNextTask();
  return result;
}

inline static void Msp430AlarmC_0_Alarm_stop( void ) 
{
  Msp430AlarmC_0_Msp430TimerControl_disableEvents();
}

static inline void TransformAlarmC_0_AlarmFrom_stop( void ) 
{
  Msp430AlarmC_0_Alarm_stop();
}

inline static void TransformAlarmC_0_Alarm_stop( void ) 
{
  TransformAlarmC_0_AlarmFrom_stop();
}

static inline void AlarmToTimerC_0_Alarm_stop( void ) 
{
  TransformAlarmC_0_Alarm_stop();
}

inline static void AlarmToTimerC_0_Timer_stop( void ) 
{
  AlarmToTimerC_0_Alarm_stop();
}

static inline void VirtualizeTimerC_0_TimerFrom_stop( void ) 
{
  AlarmToTimerC_0_Timer_stop();
}

inline static void HplMsp430GeneralIOP_36_IO_toggle( void ) 
{
{
  __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
  *(volatile uint8_t )(49U) ^= 0x01 << 4;
  __nesc_atomic_end(__nesc_atomic);
}
}

static inline void Msp430GpioC_0_HplGeneralIO_toggle( void ) 
{
  HplMsp430GeneralIOP_36_IO_toggle();
}

inline static void Msp430GpioC_0_GeneralIO_toggle( void ) 
{
  Msp430GpioC_0_HplGeneralIO_toggle();
}

static inline void LedsP_Led0_toggle( void ) 
{
  Msp430GpioC_0_GeneralIO_toggle();
}

inline static void LedsP_Leds_led0Toggle( void ) 
{
  LedsP_Led0_toggle();
}

static inline void BlinkC_Leds_led0Toggle( void ) 
{
  LedsP_Leds_led0Toggle();
}

inline static void BlinkC_Timer0_fired( void ) 
{
  BlinkC_Leds_led0Toggle();
}

inline static void HplMsp430GeneralIOP_37_IO_toggle( void ) 
{
{
  __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
  *(volatile uint8_t )(49U) ^= 0x01 << 5;
  __nesc_atomic_end(__nesc_atomic);
}
}

static inline void Msp430GpioC_1_HplGeneralIO_toggle( void ) 
{
  HplMsp430GeneralIOP_37_IO_toggle();
}

inline static void Msp430GpioC_1_GeneralIO_toggle( void ) 
{
  Msp430GpioC_1_HplGeneralIO_toggle();
}

static inline void LedsP_Led1_toggle( void ) 
{
  Msp430GpioC_1_GeneralIO_toggle();
}

inline static void LedsP_Leds_led1Toggle( void ) 
{
  LedsP_Led1_toggle();
}

static inline void BlinkC_Leds_led1Toggle( void ) 
{
  LedsP_Leds_led1Toggle();
}

inline static void BlinkC_Timer1_fired( void ) 
{
  BlinkC_Leds_led1Toggle();
}

inline static void HplMsp430GeneralIOP_38_IO_toggle( void ) 
{
{
  __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
  *(volatile uint8_t )(49U) ^= 0x01 << 6;
  __nesc_atomic_end(__nesc_atomic);
}
}

static inline void Msp430GpioC_2_HplGeneralIO_toggle( void ) 
{
  HplMsp430GeneralIOP_38_IO_toggle();
}

inline static void Msp430GpioC_2_GeneralIO_toggle( void ) 
{
  Msp430GpioC_2_HplGeneralIO_toggle();
}

static inline void LedsP_Led2_toggle( void ) 
{
  Msp430GpioC_2_GeneralIO_toggle();
}

inline static void LedsP_Leds_led2Toggle( void ) 
{
  LedsP_Led2_toggle();
}

static inline void BlinkC_Leds_led2Toggle( void ) 
{
  LedsP_Leds_led2Toggle();
}

inline static void BlinkC_Timer2_fired( void ) 
{
  BlinkC_Leds_led2Toggle();
}

inline static void VirtualizeTimerC_0_Timer_default_fired(uint8_t num) 
{
}

static inline void VirtualizeTimerC_0_Timer_fired(uint8_t arg_0x18a3ea0) 
{
  switch (arg_0x18a3ea0) 
  {
    case 0U:
      BlinkC_Timer0_fired();
      break;
    case 1U:
      BlinkC_Timer1_fired();
      break;
    case 2U:
      BlinkC_Timer2_fired();
      break;
    default :
      VirtualizeTimerC_0_Timer_default_fired(arg_0x18a3ea0);
      break;
  }

}

static inline void AlarmToTimerC_0_Alarm_startAt(AlarmToTimerC_0_Alarm_size_type t0, AlarmToTimerC_0_Alarm_size_type dt) 
{
  TransformAlarmC_0_Alarm_startAt(t0, dt);
}

inline static void AlarmToTimerC_0_start(uint32_t t0, uint32_t dt, bool oneshot) 
{
  AlarmToTimerC_0_m_dt = dt;
  AlarmToTimerC_0_m_oneshot = oneshot;
  AlarmToTimerC_0_Alarm_startAt(t0, dt);
}

inline static void AlarmToTimerC_0_Timer_startOneShotAt(uint32_t t0, uint32_t dt) 
{
  AlarmToTimerC_0_start(t0, dt, TRUE);
}

static inline void VirtualizeTimerC_0_TimerFrom_startOneShotAt(uint32_t t0, uint32_t dt) 
{
  AlarmToTimerC_0_Timer_startOneShotAt(t0, dt);
}

inline static TransformAlarmC_0_to_size_type TransformAlarmC_0_Alarm_getAlarm( void ) 
{
{
  __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
{
  TransformAlarmC_0_to_size_type __nesc_temp = TransformAlarmC_0_m_t0 + TransformAlarmC_0_m_dt;
{
  __nesc_atomic_end(__nesc_atomic);
  return __nesc_temp;
}
}
  __nesc_atomic_end(__nesc_atomic);
}
}

static inline AlarmToTimerC_0_Alarm_size_type AlarmToTimerC_0_Alarm_getAlarm( void ) 
{
  unsigned long result;
  result = TransformAlarmC_0_Alarm_getAlarm();
  return result;
}

static inline TransformAlarmC_0_Counter_size_type TransformAlarmC_0_Counter_get( void ) 
{
  unsigned long result;
  result = TransformCounterC_0_Counter_get();
  return result;
}

inline static TransformAlarmC_0_to_size_type TransformAlarmC_0_Alarm_getNow( void ) 
{
  return TransformAlarmC_0_Counter_get();
}

static inline AlarmToTimerC_0_Alarm_size_type AlarmToTimerC_0_Alarm_getNow( void ) 
{
  unsigned long result;
  result = TransformAlarmC_0_Alarm_getNow();
  return result;
}

inline static uint32_t AlarmToTimerC_0_Timer_getNow( void ) 
{
  return AlarmToTimerC_0_Alarm_getNow();
}

static inline uint32_t VirtualizeTimerC_0_TimerFrom_getNow( void ) 
{
  unsigned long result;
  result = AlarmToTimerC_0_Timer_getNow();
  return result;
}

inline static void VirtualizeTimerC_0_TimerFrom_fired( void ) 
{
  VirtualizeTimerC_0_fireTimers(VirtualizeTimerC_0_TimerFrom_getNow());
}

static inline void AlarmToTimerC_0_Timer_fired( void ) 
{
  VirtualizeTimerC_0_TimerFrom_fired();
}

inline static uint16_t Msp430TimerCapComP_3_CC2int(Msp430TimerCapComP_3_cc_t x) 
{
  union Msp430TimerCapComP_3___nesc_unnamed4286  {
    Msp430TimerCapComP_3_cc_t f;
    uint16_t t;
  } c = {.f = x};
  return c.t;
}

inline static uint16_t Msp430TimerCapComP_3_compareControl( void ) 
{
  Msp430TimerCapComP_3_cc_t x = {.cm = 1, .ccis = 0, .clld = 0, .cap = 0, .ccie = 0};
  return Msp430TimerCapComP_3_CC2int(x);
}

inline static void Msp430TimerCapComP_3_Control_setControlAsCompare( void ) 
{
  *(volatile uint16_t )(386U) = Msp430TimerCapComP_3_compareControl();
}

static inline void Msp430AlarmC_0_Msp430TimerControl_setControlAsCompare( void ) 
{
  Msp430TimerCapComP_3_Control_setControlAsCompare();
}

inline static error_t Msp430AlarmC_0_Init_init( void ) 
{
  Msp430AlarmC_0_Msp430TimerControl_disableEvents();
  Msp430AlarmC_0_Msp430TimerControl_setControlAsCompare();
  return SUCCESS;
}

static inline error_t RealMainP_SoftwareInit_init( void ) 
{
  unsigned char result;
  result = Msp430AlarmC_0_Init_init();
  return result;
}

static inline void BlinkC_Timer2_startPeriodic(uint32_t dt) 
{
  VirtualizeTimerC_0_Timer_startPeriodic(2U, dt);
}

static inline void BlinkC_Timer1_startPeriodic(uint32_t dt) 
{
  VirtualizeTimerC_0_Timer_startPeriodic(1U, dt);
}

static inline void BlinkC_Timer0_startPeriodic(uint32_t dt) 
{
  VirtualizeTimerC_0_Timer_startPeriodic(0U, dt);
}

inline static void BlinkC_Boot_booted( void ) 
{
  BlinkC_Timer0_startPeriodic(250);
  BlinkC_Timer1_startPeriodic(500);
  BlinkC_Timer2_startPeriodic(1000);
}

static inline void RealMainP_Boot_booted( void ) 
{
  BlinkC_Boot_booted();
}

static inline error_t VirtualizeTimerC_0_updateFromTimer_postTask( void ) 
{
  unsigned char result;
  result = SchedulerBasicP_TaskBasic_postTask(VirtualizeTimerC_0_updateFromTimer);
  return result;
}

inline static void VirtualizeTimerC_0_startTimer(uint8_t num, uint32_t t0, uint32_t dt, bool isoneshot) 
{
  VirtualizeTimerC_0_Timer_t *timer = &VirtualizeTimerC_0_m_timers[num];
  timer->t0 = t0;
  timer->dt = dt;
  timer->isoneshot = isoneshot;
  timer->isrunning = TRUE;
  VirtualizeTimerC_0_updateFromTimer_postTask();
}

inline static void SchedulerBasicP_TaskBasic_default_runTask(uint8_t id) 
{
}

static inline void SchedulerBasicP_TaskBasic_runTask(uint8_t arg_0x147bb38) 
{
  switch (arg_0x147bb38) 
  {
    case AlarmToTimerC_0_fired:
      AlarmToTimerC_0_fired_runTask();
      break;
    case VirtualizeTimerC_0_updateFromTimer:
      VirtualizeTimerC_0_updateFromTimer_runTask();
      break;
    default :
      SchedulerBasicP_TaskBasic_default_runTask(arg_0x147bb38);
      break;
  }

}

inline static void __nesc_disable_interrupt( void ) 
{
}

inline static mcu_power_t McuSleepC_McuPowerOverride_default_lowestState( void ) 
{
  return MSP430_POWER_LPM4;
}

static inline mcu_power_t McuSleepC_McuPowerOverride_lowestState( void ) 
{
  unsigned char result;
  result = McuSleepC_McuPowerOverride_default_lowestState();
  return result;
}

inline static mcu_power_t McuSleepC_getPowerState( void ) 
{
  mcu_power_t pState = MSP430_POWER_LPM3;
  if(_TACCTL0 & 0x0010 || _TACCTL1 & 0x0010 || _TACCTL2 & 0x0010 && _TACTL & 3 << 8 == 2 << 8 || _ME1 & 1 << 7 | 1 << 6 && _U0TCTL & 0x20 || _ME2 & 1 << 5 | 1 << 4 && _U1TCTL & 0x20 || _U0CTL & 0x01 && _U0TCTL & 0x20 && _U0RCTL & 0x20 && _U0CTL & 0x04 && _U0CTL & 0x20)
  {
    pState = MSP430_POWER_LPM1;
  }
  if(_ADC12CTL0 & 0x0010)
  {
    if(_ADC12CTL1 & 2 << 3)
    {
      if(_ADC12CTL1 & 1 << 3)
      {
        pState = MSP430_POWER_LPM1;
      }
      else 
      {
        pState = MSP430_POWER_ACTIVE;
      }
    }
    else 
    {
      if(_ADC12CTL1 & 0x0400 && _TACTL & 3 << 8 == 2 << 8)
      {
        pState = MSP430_POWER_LPM1;
      }
    }
  }
  return pState;
}

inline static mcu_power_t mcombine(mcu_power_t m1, mcu_power_t m2) 
{
  return m1 < m2? m1 : m2;
}

inline static void McuSleepC_computePowerState( void ) 
{
  McuSleepC_powerState = mcombine(McuSleepC_getPowerState(), McuSleepC_McuPowerOverride_lowestState());
}

inline static void McuSleepC_McuSleep_sleep( void ) 
{
  uint16_t temp;
  if(McuSleepC_dirty)
  {
    McuSleepC_computePowerState();
  }
  temp = McuSleepC_msp430PowerBits[McuSleepC_powerState] | 0x0008;
  _R2 |= temp;
  __nesc_disable_interrupt();
}

static inline void SchedulerBasicP_McuSleep_sleep( void ) 
{
  McuSleepC_McuSleep_sleep();
}

__inline static uint8_t SchedulerBasicP_popTask( void ) 
{
  if(SchedulerBasicP_m_head != SchedulerBasicP_NO_TASK)
  {
    uint8_t id = SchedulerBasicP_m_head;
    SchedulerBasicP_m_head = SchedulerBasicP_m_next[SchedulerBasicP_m_head];
    if(SchedulerBasicP_m_head == SchedulerBasicP_NO_TASK)
    {
      SchedulerBasicP_m_tail = SchedulerBasicP_NO_TASK;
    }
    SchedulerBasicP_m_next[id] = SchedulerBasicP_NO_TASK;
    return id;
  }
  else 
  {
    return SchedulerBasicP_NO_TASK;
  }
}

inline static void SchedulerBasicP_Scheduler_taskLoop( void ) 
{
  for(; ; )
  {
    uint8_t nextTask;
  {
    __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
  {
    while(nextTask = SchedulerBasicP_popTask() == SchedulerBasicP_NO_TASK)
    {
      SchedulerBasicP_McuSleep_sleep();
    }
  }
    __nesc_atomic_end(__nesc_atomic);
  }
    SchedulerBasicP_TaskBasic_runTask(nextTask);
  }

}

static inline void RealMainP_Scheduler_taskLoop( void ) 
{
  SchedulerBasicP_Scheduler_taskLoop();
}

__nesc_atomic_t __nesc_atomic_start( void ) 
{
  __nesc_atomic_t result = {
uint16_t __x;
( uint16_t )(__x) = _R2;
__x;
} & 0x0008 != 0;
  __nesc_disable_interrupt();
  return result;
}

void __nesc_atomic_end(__nesc_atomic_t reenable_interrupts) 
{
  if(reenable_interrupts)
  {
    __nesc_enable_interrupt();
  }
}

void sig_TIMERA0_VECTOR( void ) 
{
  Msp430TimerCommonP_VectorTimerA0_fired();
}

static void Msp430TimerCapComP_0_Event_fired( void ) 
{
  if(Msp430TimerCapComP_0_Control_getControl().cap)
  {
    Msp430TimerCapComP_0_Capture_captured(Msp430TimerCapComP_0_Capture_getEvent());
  }
  else 
  {
    Msp430TimerCapComP_0_Compare_fired();
  }
}

static void Msp430TimerCapComP_1_Event_fired( void ) 
{
  if(Msp430TimerCapComP_1_Control_getControl().cap)
  {
    Msp430TimerCapComP_1_Capture_captured(Msp430TimerCapComP_1_Capture_getEvent());
  }
  else 
  {
    Msp430TimerCapComP_1_Compare_fired();
  }
}

static void Msp430TimerCapComP_2_Event_fired( void ) 
{
  if(Msp430TimerCapComP_2_Control_getControl().cap)
  {
    Msp430TimerCapComP_2_Capture_captured(Msp430TimerCapComP_2_Capture_getEvent());
  }
  else 
  {
    Msp430TimerCapComP_2_Compare_fired();
  }
}

void sig_TIMERA1_VECTOR( void ) 
{
  Msp430TimerCommonP_VectorTimerA1_fired();
}

void sig_TIMERB0_VECTOR( void ) 
{
  Msp430TimerCommonP_VectorTimerB0_fired();
}

static void Msp430TimerP_1_Event_default_fired(uint8_t n) 
{
}

static void Msp430TimerP_1_Event_fired(uint8_t arg_0x1561800) 
{
  switch (arg_0x1561800) 
  {
    case 0:
      Msp430TimerCapComP_3_Event_fired();
      break;
    case 1:
      Msp430TimerCapComP_4_Event_fired();
      break;
    case 2:
      Msp430TimerCapComP_5_Event_fired();
      break;
    case 3:
      Msp430TimerCapComP_6_Event_fired();
      break;
    case 4:
      Msp430TimerCapComP_7_Event_fired();
      break;
    case 5:
      Msp430TimerCapComP_8_Event_fired();
      break;
    case 6:
      Msp430TimerCapComP_9_Event_fired();
      break;
    case 7:
      Msp430TimerP_1_Overflow_fired();
      break;
    default :
      Msp430TimerP_1_Event_default_fired(arg_0x1561800);
      break;
  }

}

static error_t SchedulerBasicP_TaskBasic_postTask(uint8_t id) 
{
{
  __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
{
{
  unsigned char __nesc_temp = SchedulerBasicP_pushTask(id)? SUCCESS : EBUSY;
{
  __nesc_atomic_end(__nesc_atomic);
  return __nesc_temp;
}
}
}
  __nesc_atomic_end(__nesc_atomic);
}
}

static void TransformAlarmC_0_set_alarm( void ) 
{
  TransformAlarmC_0_to_size_type now = TransformAlarmC_0_Counter_get();
  TransformAlarmC_0_to_size_type expires;
  TransformAlarmC_0_to_size_type remaining;
  expires = TransformAlarmC_0_m_t0 + TransformAlarmC_0_m_dt;
  remaining = ( TransformAlarmC_0_to_size_type )(expires - now);
  if(TransformAlarmC_0_m_t0 <= now)
  {
    if(expires >= TransformAlarmC_0_m_t0 && expires <= now)
    {
      remaining = 0;
    }
  }
  else 
  {
    if(expires >= TransformAlarmC_0_m_t0 || expires <= now)
    {
      remaining = 0;
    }
  }
  if(remaining > TransformAlarmC_0_MAX_DELAY)
  {
    TransformAlarmC_0_m_t0 = now + TransformAlarmC_0_MAX_DELAY;
    TransformAlarmC_0_m_dt = remaining - TransformAlarmC_0_MAX_DELAY;
    remaining = TransformAlarmC_0_MAX_DELAY;
  }
  else 
  {
    TransformAlarmC_0_m_t0 += TransformAlarmC_0_m_dt;
    TransformAlarmC_0_m_dt = 0;
  }
  TransformAlarmC_0_AlarmFrom_startAt(( TransformAlarmC_0_from_size_type )(now) << 5, ( TransformAlarmC_0_from_size_type )(remaining) << 5);
}

static TransformCounterC_0_to_size_type TransformCounterC_0_Counter_get( void ) 
{
  TransformCounterC_0_to_size_type rv = 0;
{
  __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
{
  TransformCounterC_0_upper_count_type high = TransformCounterC_0_m_upper;
  TransformCounterC_0_from_size_type low = TransformCounterC_0_CounterFrom_get();
  if(TransformCounterC_0_CounterFrom_isOverflowPending())
  {
    high++;
    low = TransformCounterC_0_CounterFrom_get();
  }
{
  TransformCounterC_0_to_size_type high_to = high;
  TransformCounterC_0_to_size_type low_to = low >> TransformCounterC_0_LOW_SHIFT_RIGHT;
  rv = high_to << TransformCounterC_0_HIGH_SHIFT_LEFT | low_to;
}
}
  __nesc_atomic_end(__nesc_atomic);
}
  return rv;
}

static uint16_t Msp430TimerP_1_Timer_get( void ) 
{
  if(1)
  {
  {
    uint16_t t0;
    uint16_t t1 = *(volatile uint16_t )(400U);
    do
    {
      t0 = t1;
      t1 = *(volatile uint16_t )(400U);
    }
    while(t0 != t1);
  {
    unsigned int __nesc_temp = t1;
    return __nesc_temp;
  }
  }
  }
  else 
  {
    return *(volatile uint16_t )(400U);
  }
}

void sig_TIMERB1_VECTOR( void ) 
{
  Msp430TimerCommonP_VectorTimerB1_fired();
}

int main( void ) 
{
{
  __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
{
{
}
  RealMainP_Scheduler_init();
  RealMainP_PlatformInit_init();
  while(RealMainP_Scheduler_runNextTask())
;
  RealMainP_SoftwareInit_init();
  while(RealMainP_Scheduler_runNextTask())
;
}
  __nesc_atomic_end(__nesc_atomic);
}
  __nesc_enable_interrupt();
  RealMainP_Boot_booted();
  RealMainP_Scheduler_taskLoop();
  return -1;
}

static void Msp430ClockP_set_dco_calib(int calib) 
{
  _BCSCTL1 = _BCSCTL1 & ~0x07 | calib >> 8 & 0x07;
  _DCOCTL = calib & 0xff;
}

static void MotePlatformC_TOSH_FLASH_M25P_DP_bit(bool set) 
{
  if(set)
  {
    TOSH_SET_SIMO0_PIN();
  }
  else 
  {
    TOSH_CLR_SIMO0_PIN();
  }
  TOSH_SET_UCLK0_PIN();
  TOSH_CLR_UCLK0_PIN();
}

static bool SchedulerBasicP_Scheduler_runNextTask( void ) 
{
  uint8_t nextTask;
{
  nextTask = SchedulerBasicP_popTask();
  if(nextTask == SchedulerBasicP_NO_TASK)
  {
  {
    unsigned char __nesc_temp = FALSE;
    return __nesc_temp;
  }
  }
}
  SchedulerBasicP_TaskBasic_runTask(nextTask);
  return TRUE;
}

static void VirtualizeTimerC_0_updateFromTimer_runTask( void ) 
{
  uint32_t now = VirtualizeTimerC_0_TimerFrom_getNow();
  int32_t min_remaining = 1UL << 31 - 1;
  bool min_remaining_isset = FALSE;
  uint8_t num;
  VirtualizeTimerC_0_TimerFrom_stop();
  for(num = 0; num < VirtualizeTimerC_0_NUM_TIMERS; num++)
  {
    VirtualizeTimerC_0_Timer_t *timer = &VirtualizeTimerC_0_m_timers[num];
    if(timer->isrunning)
    {
      uint32_t elapsed = now - timer->t0;
      int32_t remaining = timer->dt - elapsed;
      if(remaining < min_remaining)
      {
        min_remaining = remaining;
        min_remaining_isset = TRUE;
      }
    }
  }

  if(min_remaining_isset)
  {
    if(min_remaining <= 0)
    {
      VirtualizeTimerC_0_fireTimers(now);
    }
    else 
    {
      VirtualizeTimerC_0_TimerFrom_startOneShotAt(now, min_remaining);
    }
  }
}

static void VirtualizeTimerC_0_fireTimers(uint32_t now) 
{
  uint8_t num;
  for(num = 0; num < VirtualizeTimerC_0_NUM_TIMERS; num++)
  {
    VirtualizeTimerC_0_Timer_t *timer = &VirtualizeTimerC_0_m_timers[num];
    if(timer->isrunning)
    {
      uint32_t elapsed = now - timer->t0;
      if(elapsed >= timer->dt)
      {
        if(timer->isoneshot)
        {
          timer->isrunning = FALSE;
        }
        else 
        {
          timer->t0 += timer->dt;
        }
        VirtualizeTimerC_0_Timer_fired(num);
          break;
      }
    }
  }

  VirtualizeTimerC_0_updateFromTimer_postTask();
}

static void TransformAlarmC_0_Alarm_startAt(TransformAlarmC_0_to_size_type t0, TransformAlarmC_0_to_size_type dt) 
{
{
  __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
{
  TransformAlarmC_0_m_t0 = t0;
  TransformAlarmC_0_m_dt = dt;
  TransformAlarmC_0_set_alarm();
}
  __nesc_atomic_end(__nesc_atomic);
}
}

static void AlarmToTimerC_0_fired_runTask( void ) 
{
  if(AlarmToTimerC_0_m_oneshot == FALSE)
  {
    AlarmToTimerC_0_start(AlarmToTimerC_0_Alarm_getAlarm(), AlarmToTimerC_0_m_dt, FALSE);
  }
  AlarmToTimerC_0_Timer_fired();
}

static void VirtualizeTimerC_0_Timer_startPeriodic(uint8_t num, uint32_t dt) 
{
  VirtualizeTimerC_0_startTimer(num, VirtualizeTimerC_0_TimerFrom_getNow(), dt, FALSE);
}
--------------------------------------------------------------------------------
Fixed-address variables:
{'P1OUT': '0x0021', 'P3OUT': '0x0019', 'P4OUT': '0x001D', 'Msp430ClockP_TA0IV': '0x012E', 'TBCCR0': '0x0192', 'BCSCTL1': '0x0057', 'TA0R': '0x0170', 'ME1': '0x0004', 'P1SEL': '0x0026', 'P6OUT': '0x0035', 'P3DIR': '0x001A', 'P1IE': '0x0025', 'I2CTCTLnr': '0x0071', 'Msp430ClockP_TBCTL': '0x0180', 'U0CTLnr': '0x0070', 'P2IE': '0x002D', 'P5OUT': '0x0031', 'TBCCTL0': '0x0182', 'BCSCTL2': '0x0058', 'P6DIR': '0x0036', 'U1TCTL': '0x0079', 'P4SEL': '0x001F', 'P1DIR': '0x0022', 'TA0CTL': '0x0160', 'U0TCTL': '0x0071', 'ADC12CTL1': '0x01A2', 'ADC12CTL0': '0x01A0', 'Msp430ClockP_TBIV': '0x011E', 'P6SEL': '0x0037', 'P2DIR': '0x002A', 'Msp430ClockP_TA0CTL': '0x0160', 'TA0CCTL2': '0x0166', 'TA0CCTL1': '0x0164', 'TA0CCTL0': '0x0162', 'P4DIR': '0x001E', 'P2SEL': '0x002E', 'P3SEL': '0x001B', 'TBR': '0x0190', 'P5DIR': '0x0032', 'ME2': '0x0005', 'I2CDCTLnr': '0x0072', 'r': '0x0019', 'Msp430ClockP_IE1': '0x0000', 'P5SEL': '0x0033', 'P2OUT': '0x0029', 'DCOCTL': '0x0056'}
